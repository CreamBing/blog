<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo美化全过程记录]]></title>
    <url>%2Fblog%2F2019%2F08%2F14%2Fhexo%E7%BE%8E%E5%8C%96%E5%85%A8%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[前言 博客就像是自己的宠物一般,要是长得更好看一点就更好了 目的 美化首页 Hexo自定义页面做首页 利用图床加快图片资源的加载速度，目前比较好用的图床是微博免费图床,利用微博相册实现的 利用html5的新特性 利用vidage.js来优化video的加载 正文 参考资料 https://www.jianshu.com/p/80e0e1058bda Hexo自定义页面做首页 https://chrome.google.com/webstore/detail/新浪微博图床/fdfdnfpdplfbbnemmmoklbfjbhecpnhf 新浪微博免费图床chrome插件 http://chenfengkg.cn/optimize-blog/ hexo美化 https://eonun.com/2019/07/14/Hexo主题美化/ hexo美化 https://11.tt/posts/2018/how-to-play-with-live2d-on-hexo/ 看板娘]]></content>
      <categories>
        <category>博客</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用docker安装vsftp和sftp]]></title>
    <url>%2Fblog%2F2019%2F04%2F09%2F%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85vsftp%E5%92%8Csftp%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>docker</category>
        <category>docker-compose</category>
        <category>vsftp</category>
        <category>sftp</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
        <tag>vsftp</tag>
        <tag>sftp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用docker安装gitlab]]></title>
    <url>%2Fblog%2F2019%2F04%2F06%2F%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85gitlab%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>docker</category>
        <category>docker-compose</category>
        <category>gitlab</category>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[现场web项目不定时卡顿问题排查]]></title>
    <url>%2Fblog%2F2019%2F04%2F04%2F%E7%8E%B0%E5%9C%BAweb%E9%A1%B9%E7%9B%AE%E4%B8%8D%E5%AE%9A%E6%97%B6%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[前言 某次web系统升级之后，前方反馈当登录人数增加，用户点击某页面出现卡顿问题，一段时间后才正常 目的 解决现场 正文 参考资料]]></content>
      <categories>
        <category>tomcat7</category>
        <category>strus1</category>
        <category>现场</category>
      </categories>
      <tags>
        <tag>tomcat7</tag>
        <tag>strus1</tag>
        <tag>现场</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用docker安装jenkins]]></title>
    <url>%2Fblog%2F2019%2F03%2F25%2F%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85jenkins%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>运维(OP)</category>
        <category>docker</category>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA新建Gradle项目]]></title>
    <url>%2Fblog%2F2019%2F03%2F21%2FIDEA%E6%96%B0%E5%BB%BAGradle%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[前言 利用 IDEA 快速新建一个 springboot2 的基于 gradle 依赖管理的项目 目的 利用 IDEA 快速新建一个 springboot2 的基于 gradle 依赖管理的项目 正文 1.下载 gradle 网上也有教程说直接用 idea 自带的，但是为了性能，我选择下载当下最新版本-v5.3 下面是下载链接:https://gradle.org/releases/ ,我一般下载 complete 版本 2.设置环境变量或者在IDEA中导入 如果只是在 IDEA 中新建，只需导入即可，但为了之后方便使用命令，遂添加环境变量 📷截图 ⛔️ gradle5.3 需要在java8 环境下才能正确显示 gradle -v 3.IDEA 新建 gradle 项目 📷截图 4.IDEA 导入 gradle 的 springboot2 项目 在sprign官网生成项目骨架，然后利用idea导入 📷截图 参考资料 1.spring 官网]]></content>
      <categories>
        <category>IDEA</category>
        <category>管理依赖</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Gradle</tag>
        <tag>springboot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-compose搭建kafka集群]]></title>
    <url>%2Fblog%2F2019%2F03%2F20%2Fdocker-compose%E6%90%AD%E5%BB%BAkafka%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>运维(OP)</category>
        <category>docker</category>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-compose搭建zookeeper集群]]></title>
    <url>%2Fblog%2F2019%2F03%2F20%2Fdocker-compose%E6%90%AD%E5%BB%BAzookeeper%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>运维(OP)</category>
        <category>docker</category>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7最小化安装设置固定ip]]></title>
    <url>%2Fblog%2F2019%2F03%2F20%2Fcentos7%E6%9C%80%E5%B0%8F%E5%8C%96%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9Aip%2F</url>
    <content type="text"><![CDATA[前言 虚拟机装了个CentOS7，使用的NAT的网络模式，为了防止再次启动系统的时候网络IP发生变化，因此设置静态IP和DNS 目的 使虚拟机中的centos7在重启后ip不变 正文 1.查看原有ip分配情况 由于CentOS是最小化安装，没有ifconfig命令，因此可以采用ip命令查看。 1ip addr 📷截图 我们发现 lo 是回环地址,另一个 ens33 就是就是我们要修改的文件 2.vi修改文件 1vi /etc/sysconfig/network-scripts/ifcfg-* 📷截图 123456BOOTPROTO=static #dhcp改为static（修改）ONBOOT=yes #开机启用本配置，一般在最后一行（修改）IPADDR=192.168.1.204 #静态IP（增加）GATEWAY=192.168.1.2 #默认网关，虚拟机安装的话，通常是2，也就是VMnet8的网关设置,（增加）NETMASK=255.255.255.0 #子网掩码（增加）DNS1=192.168.1.2 #DNS 配置，虚拟机安装的话，DNS就网关就行，多个DNS网址的话再增加（增加） 📷截图 3.重启网络服务 1service network restart 4.检查网络 1ip addr 参考资料]]></content>
      <categories>
        <category>centos7</category>
        <category>运维(OP)</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>最小化安装</tag>
        <tag>固定ip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EffectiveJava第三版第五条读书笔记]]></title>
    <url>%2Fblog%2F2019%2F02%2F01%2FEffectiveJava%E7%AC%AC%E4%B8%89%E7%89%88%E7%AC%AC%E4%BA%94%E6%9D%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 自己java编程已有两年，自己也写过一些轮子，也在工作中针对自己以前写的代码重构过，但是距离那些优秀的类库总有一些差距，最近在看 Effective Java 第三版，书中总结甚为精辟，遂在阅读过程中逐条写下笔记，以指导自己更加有效的使用 java 编程语言及基本类库,涵盖部分jdk 7,8,9 的新特性 目的 Prefer dependency injection to hardwiring resources 优先考虑依赖注入来引用资源,代替硬编码 正文 硬编码 硬编码是将数据直接嵌入到程序或其他可执行对象的源代码中的软件开发实践，与从外部获取数据或在运行时生成数据不同。 硬编码数据通常只能通过编辑源代码和重新编译可执行文件来修改，尽管可以使用调试器或十六进制编辑器在内存或磁盘上进行更改。 硬编码的数据通常表示不变的信息，例如物理常量，版本号和静态文本元素。 另一方面，软编码数据对用户输入，HTTP服务器响应或配置文件等任意信息进行编码，并在运行时确定。 使用场景 许多类依赖于一个或多个底层资源。例如，拼写检查器依赖于字典。将此类类实现为静态实用工具类并不少见 123456789// Inappropriate use of static utility - inflexible &amp; untestable!public class SpellChecker &#123; private static final Lexicon dictionary = ...; private SpellChecker() &#123;&#125; // Noninstantiable public static boolean isValid(String word) &#123; ... &#125; public static List&lt;String&gt; suggestions(String typo) &#123; ... &#125;&#125; 参考资料]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>EffectiveJava第三版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>EffectiveJava第三版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EffectiveJava第三版第四条读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F31%2FEffectiveJava%E7%AC%AC%E4%B8%89%E7%89%88%E7%AC%AC%E5%9B%9B%E6%9D%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 自己java编程已有两年，自己也写过一些轮子，也在工作中针对自己以前写的代码重构过，但是距离那些优秀的类库总有一些差距，最近在看 Effective Java 第三版，书中总结甚为精辟，遂在阅读过程中逐条写下笔记，以指导自己更加有效的使用 java 编程语言及基本类库,涵盖部分jdk 7,8,9 的新特性 目的 Enforce noninstantiability with a private constructor 通过私有构造器强化不可实例化的能力 正文 这个正是利用私有构造器的原因，例如 JDK 中 java.lang.Math 或者 java.util.Arrays 将基本类型的值或者数组类型上的相关方法利用静态方法组织起来 或者通过 java.util.Collections 的方式，把特定接口的对象上的静态方法，包括工厂方法组织起来 这样的工具类不希望被实例化，因为实例化对它没有任何意义 副作用: 这个类不能被子类化，无法被继承 1234567891011121314151617181920212223242526272829303132333435363738394041/** * https://creambing.github.io Inc. * Copyright(c)2018-2025 All Rights Reserved. */package com.creambing.technicalbook.effectivejava3.creatinganddestroyingobjects.item4;import java.util.HashMap;import java.util.Map;/** * Class Name: MapUtils * Description: * 通过私有构造器强化不可实例化的能力 * Enforce noninstantiability with a private constructor * 使用范围： * 当需要编写只包含静态方法或者静态域的类时，例如 java.lang.Math java.uril.Arrays * 单例模式 * 缺点： * 这个类不能被子类化，无法被继承 * &lt;p&gt; * author: CreamBing * time: 2019-01-30 13:58 * version: v1.0.0 */public class MapUtils &#123; //私有构造，表示这个类初始化没有意义 private MapUtils() &#123; //可以防止反射实例化 throw new AssertionError(); &#125; //在google guava类库中就有该工具方法，在方法类型推断还没有出来之前 public static &lt;K, V&gt; HashMap&lt;K, V&gt; newHashMap() &#123; return new HashMap&lt;&gt;(); &#125; public static void main(String[] args) &#123; Map&lt;String, String&gt; map = MapUtils.newHashMap(); &#125;&#125; 参考资料]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>EffectiveJava第三版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>EffectiveJava第三版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EffectiveJava第三版第三条读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F30%2FEffectiveJava%E7%AC%AC%E4%B8%89%E7%89%88%E7%AC%AC%E4%B8%89%E6%9D%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 自己java编程已有两年，自己也写过一些轮子，也在工作中针对自己以前写的代码重构过，但是距离那些优秀的类库总有一些差距，最近在看 Effective Java 第三版，书中总结甚为精辟，遂在阅读过程中逐条写下笔记，以指导自己更加有效的使用 java 编程语言及基本类库,涵盖部分jdk 7,8,9 的新特性 目的 Enforce the singleton property with a private constructor or an enum type 用私有构造器或者枚举类型强化Singleton属性 正文 利用枚举类型实现单例-天然的防止反射和反序列化调用 123456789public enum SingletonWithEnum &#123; //枚举元素本身就是单例 INSTANCE; //添加自己需要的操作 public void singletonOperation()&#123; System.out.println("complete singleton"); &#125;&#125; 这里貌似没有提供私有构造，其实在enum内部实现中隐藏了私有构造 12枚举类实现其实省略了private类型的构造函数枚举类的域(field)其实是相应的enum类型的一个实例对象 推荐的写法时面向接口 1234public interface MySingleton &#123; void doSomething();&#125; 123456789101112public enum MySingletonImpl implements MySingleton &#123; INSTANCE; @Override public void doSomething() &#123; System.out.println("complete singleton"); &#125; public static MySingleton getInstance() &#123; return MySingletonImpl.INSTANCE; &#125;&#125; 静态内部类实现单例 123456789101112public class Singleton &#123; private static class SingletonHolder &#123; private static final Singleton INSTANCE = new Singleton(); &#125; private Singleton() &#123; &#125; public static Singleton getInstance() &#123; return SingletonHolder.INSTANCE; &#125;&#125; 解决序列化和反射漏洞需如下修改 12345678910111213141516171819public class Singleton2 implements Serializable &#123; private static class SingletonHolder &#123; private static final Singleton2 INSTANCE = new Singleton2(); &#125; private Singleton2() &#123; // 防止反射获取多个对象的漏洞 if (null != SingletonHolder.INSTANCE) &#123; throw new RuntimeException("it is a Singleton"); &#125; &#125; public static Singleton2 getInstance() &#123; return SingletonHolder.INSTANCE; &#125; // 防止反序列化获取多个对象的漏洞 private Object readResolve() throws ObjectStreamException &#123; return SingletonHolder.INSTANCE; &#125;&#125; 如何选用： -单例对象 占用资源少，不需要延时加载，枚举 好于 饿汉 -单例对象 占用资源多，需要延时加载，静态内部类 好于 懒汉式 参考资料 https://blog.csdn.net/qq_27093465/article/details/52180865 Java 枚举(enum) 详解7种常见的用法 https://www.jianshu.com/p/4e8ca4e2af6c Java 单例模式的两种高效写法]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>EffectiveJava第三版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>EffectiveJava第三版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第十四章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F20%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的类型信息 正文 1.类型信息 关键词：RTTI，加载，泛型class引用，instanceof，isInatance，工厂设计模式，反射机制，代理设计模式，动态代理，空对象，反射获取private对象 运行时类型信息可以使得在程序运行时发现和使用类型信息。 Java在运行时识别对象和类信息的两种方式： 12RTTI，假定我们在编译时就知道了所有类型“反射”机制，允许在运行时发现和使用类信息 2.为什么需要RTTI 参考资料]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第十三章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F20%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的字符串 正文 1.字符串 字符串的操作是计算机程序设计中最常见的行为。 关键词： StringBuilder ，StringBuffer，toString()，format转换，正则表达式 2.不可变String String对象时不可变的。每当把String对象作为方法的参数时，都会复制一份引用。（其实就是对函数中参数列表中参数的操作不会影响外面的原参数） 3.重载“+”与StringBuilder 用于String的“+”与“+=”是Java中仅有的两个重载过的操作符，而Java并不允许程序员重载任何操作符。 在使用&quot;+&quot;操作符时，编译器自动引入了java.lang.StringBuilder类，避免了连加情况下产生大量需要回收的垃圾（每+一次就会产生一个新的字符串）。 因此，当为一个类编写toString()方法时，如果字符串操作简单，可以信赖编译器，它会为你合理的构造最终字符串结果。但是如果要在toString()中使用循环，那么最好自己创建一个StringBuilder对象，结合append()用它来构造最终结果。 StringBuilder提供了丰富而全面的方法，包括insert()、replace()、subString()甚至reverse()，但最常用的还是append()和toString()，delete()方法。 StringBuilder是Java SE5引入的，在这之前还有Java的StringBuffer。StringBuffer是线程安全的，因此开销会大一些。StringBuilder字符串操作会更快一些。 4.无意识的递归 如果希望toString()方法打印出对象的内存地址，不可以使用this关键字。如果这样写 123public String toString() &#123;return &quot; InfiniteRecursion address: &quot; + this + &quot;\n&quot;;&#125; 编译器会试图将&quot;+&quot;后面的this转换为String，此时调用toString()函数，导致无穷递归。因此如果想要打印出内存地址，应该调用Object.toString()方法，所以调用super.toString()就可以了 123public String toString() &#123;return &quot; InfiniteRecursion address: &quot; + super.toString() + &quot;\n&quot;;&#125; 结果是： 1234567891011[ E02_RepairInfinite address: E02_RepairInfinite@3e25a5, E02_RepairInfinite address: E02_RepairInfinite@19821f, E02_RepairInfinite address: E02_RepairInfinite@addbf1, E02_RepairInfinite address: E02_RepairInfinite@42e816, E02_RepairInfinite address: E02_RepairInfinite@9304b1, E02_RepairInfinite address: E02_RepairInfinite@190d11, E02_RepairInfinite address: E02_RepairInfinite@a90653, E02_RepairInfinite address: E02_RepairInfinite@de6ced, E02_RepairInfinite address: E02_RepairInfinite@c17164, E02_RepairInfinite address: E02_RepairInfinite@1fb8ee3] 5.String上的操作 String的一些基本方法: 一、构造函数 1234String(byte[ ] bytes)：通过byte数组构造字符串对象。String(char[ ] value)：通过char数组构造字符串对象。String(Sting original)：构造一个original的副本。即：拷贝一个original。String(StringBuffer buffer)：通过StringBuffer数组构造字符串对象。 二、方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151. char charAt(int index) ：取字符串中的某一个字符，其中的参数index指的是字符串中序数。字符串的序数从0开始到length()-1 。 例如： String s = new String(&quot;abcdefghijklmnopqrstuvwxyz&quot;); System.out.println(&quot;s.charAt(5): &quot; + s.charAt(5) ); 结果为： s.charAt(5): f2. int compareTo(String anotherString) ：当前String对象与anotherString比较。相等关系返回０；不相等时，从两个字符串第0个字符开始比较，返回第一个不相等的字符差，另一种情况，较长字符串的前面部分恰巧是较短的字符串，返回它们的长度差。3. int compareTo(Object o) ：如果o是String对象，和2的功能一样；否则抛出ClassCastException异常。 例如: String s1 = new String(&quot;abcdefghijklmn&quot;); String s2 = new String(&quot;abcdefghij&quot;); String s3 = new String(&quot;abcdefghijalmn&quot;); System.out.println(&quot;s1.compareTo(s2): &quot; + s1.compareTo(s2) ); //返回长度差 System.out.println(&quot;s1.compareTo(s3): &quot; + s1.compareTo(s3) ); //返回&apos;k&apos;-&apos;a&apos;的差 结果为：s1.compareTo(s2): 4 s1.compareTo(s3): 104. String concat(String str) ：将该String对象与str连接在一起。5. boolean contentEquals(StringBuffer sb) ：将该String对象与StringBuffer对象sb进行比较。6. static String copyValueOf(char[] data) ：7. static String copyValueOf(char[] data, int offset, int count) ：这两个方法将char数组转换成String，与其中一个构造函数类似。8. boolean endsWith(String suffix) ：该String对象是否以suffix结尾。 例如： String s1 = new String(&quot;abcdefghij&quot;); String s2 = new String(&quot;ghij&quot;); System.out.println(&quot;s1.endsWith(s2): &quot; + s1.endsWith(s2) ); 结果为：s1.endsWith(s2): true9. boolean equals(Object anObject) ：当anObject不为空并且与当前String对象一样，返回true；否则，返回false。10. byte[] getBytes() ：将该String对象转换成byte数组。11. void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) ：该方法将字符串拷贝到字符数组中。其中，srcBegin为拷贝的起始位置、srcEnd为拷贝的结束位置、字符串数值dst为目标字符数组、dstBegin为目标字符数组的拷贝起始位置。 例如： char[] s1 = &#123;&apos;I&apos;,&apos; &apos;,&apos;l&apos;,&apos;o&apos;,&apos;v&apos;,&apos;e&apos;,&apos; &apos;,&apos;h&apos;,&apos;e&apos;,&apos;r&apos;,&apos;!&apos;&#125;;//s1=I love her! String s2 = new String(&quot;you!&quot;); s2.getChars(0,3,s1,7); //s1=I love you! System.out.println( s1 ); 结果为：I love you!12. int hashCode() ：返回当前字符的哈希表码。13. int indexOf(int ch) ：只找第一个匹配字符位置。14. int indexOf(int ch, int fromIndex) ：从fromIndex开始找第一个匹配字符位置。15. int indexOf(String str) ：只找第一个匹配字符串位置。16. int indexOf(String str, int fromIndex) ：从fromIndex开始找第一个匹配字符串位置。 例如： String s = new String(&quot;write once, run anywhere!&quot;); String ss = new String(&quot;run&quot;); System.out.println(&quot;s.indexOf(&apos;r&apos;): &quot; + s.indexOf(&apos;r&apos;) ); System.out.println(&quot;s.indexOf(&apos;r&apos;,2): &quot; + s.indexOf(&apos;r&apos;,2) ); System.out.println(&quot;s.indexOf(ss): &quot; + s.indexOf(ss) ); 结果为：s.indexOf(&apos;r&apos;): 1 s.indexOf(&apos;r&apos;,2): 12 s.indexOf(ss): 1217. int lastIndexOf(int ch)18. int lastIndexOf(int ch, int fromIndex)19. int lastIndexOf(String str)20. int lastIndexOf(String str, int fromIndex) 以上四个方法与13、14、15、16类似，不同的是：找最后一个匹配的内容。 public class CompareToDemo &#123; public static void main (String[] args) &#123; String s1 = new String(&quot;acbdebfg&quot;); System.out.println(s1.lastIndexOf((int)&apos;b&apos;,7)); &#125; &#125; 运行结果：5（其中fromIndex的参数为 7，是从字符串acbdebfg的最后一个字符g开始往前数的位数。既是从字符c开始匹配，寻找最后一个匹配b的位置。所以结果为 5）21. int length() ：返回当前字符串长度。22. String replace(char oldChar, char newChar) ：将字符号串中第一个oldChar替换成newChar。23. boolean startsWith(String prefix) ：该String对象是否以prefix开始。24. boolean startsWith(String prefix, int toffset) ：该String对象从toffset位置算起，是否以prefix开始。 例如：String s = new String(&quot;write once, run anywhere!&quot;); String ss = new String(&quot;write&quot;); String sss = new String(&quot;once&quot;); System.out.println(&quot;s.startsWith(ss): &quot; + s.startsWith(ss) ); System.out.println(&quot;s.startsWith(sss,6): &quot; + s.startsWith(sss,6) ); 结果为：s.startsWith(ss): true s.startsWith(sss,6): true25. String substring(int beginIndex) ：取从beginIndex位置开始到结束的子字符串。26.String substring(int beginIndex, int endIndex) ：取从beginIndex位置开始到endIndex位置的子字符串。27. char[ ] toCharArray() ：将该String对象转换成char数组。28. String toLowerCase() ：将字符串转换成小写。29. String toUpperCase() ：将字符串转换成大写。 例如：String s = new String(&quot;java.lang.Class String&quot;); System.out.println(&quot;s.toUpperCase(): &quot; + s.toUpperCase() ); System.out.println(&quot;s.toLowerCase(): &quot; + s.toLowerCase() ); 结果为：s.toUpperCase(): JAVA.LANG.CLASS STRING s.toLowerCase(): java.lang.class string30. static String valueOf(boolean b)31. static String valueOf(char c)32. static String valueOf(char[] data)33. static String valueOf(char[] data, int offset, int count)34. static String valueOf(double d)35. static String valueOf(float f)36. static String valueOf(int i)37. static String valueOf(long l)38. static String valueOf(Object obj)以上方法用于将各种不同类型转换成Java字符型。这些都是类方法。下面挑选一些上面常用的方法：Java中String类的常用方法:public char charAt(int index)返回字符串中第index个字符；public int length()返回字符串的长度；public int indexOf(String str)返回字符串中第一次出现str的位置；public int indexOf(String str,int fromIndex)返回字符串从fromIndex开始第一次出现str的位置；public boolean equalsIgnoreCase(String another)比较字符串与another是否一样（忽略大小写）；public String replace(char oldchar,char newChar)在字符串中用newChar字符替换oldChar字符public boolean startsWith(String prefix)判断字符串是否以prefix字符串开头；public boolean endsWith(String suffix)判断一个字符串是否以suffix字符串结尾；public String toUpperCase()返回一个字符串为该字符串的大写形式；public String toLowerCase()返回一个字符串为该字符串的小写形式public String substring(int beginIndex)返回该字符串从beginIndex开始到结尾的子字符串；public String substring(int beginIndex,int endIndex)返回该字符串从beginIndex开始到endsIndex结尾的子字符串public String trim()返回该字符串去掉开头和结尾空格后的字符串public String[] split(String regex)将一个字符串按照指定的分隔符分隔，返回分隔后的字符串数组 6.格式化的输出 Java SE5推出了格式化输出这一功能。如下： printf() printf()并不是用重载的“+”操作符来连接引号内的字符串，而是使用特殊的占位符来表示数据将来的位置。而且它还将插入格式化字符串的参数，以逗号分隔，排成一行。 1printf(&quot;Row 1: [%d %f]\n&quot;, x, y); 这些占位符称作格式修饰符，它不但说明了插入位置，还说明了插入说明类型的变量，%d表示整数，%f表示浮点数，%s表示字符串。 System.out.format() Java SE5引入的format方法可用于PrintStream或者PrintWriter对象。其中也包括System.out对象。 format()方法模仿自C的printf()，两者是等价的，以下展示三种方法输出坐标点： 123456789101112131415public class SimpleFormat &#123;public static void main(String[] args) &#123;int x = 5;double y = 5.332542;// The old way:System.out.println("Row 1: [" + x + " " + y + "]");// The new way:System.out.format("Row 1: [%d %f]\n", x, y);// orSystem.out.printf("Row 1: [%d %f]\n", x, y);&#125;&#125; /* Output:Row 1: [5 5.332542]Row 1: [5 5.332542]Row 1: [5 5.332542] Formatter类 在Java中，所有新的格式化功能都有java.util.Formatter处理。Formatter构造器经过重载可以接受多种输出目的地，最常用的还是PrintStream()\OutputStream和File。 12345678910111213141516171819202122232425262728293031import java.io.*;import java.util.*;public class Turtle &#123;private String name;private Formatter f;public Turtle(String name, Formatter f) &#123;this.name = name;this.f = f;&#125;public void move(int x, int y) &#123;f.format("%s The Turtle is at (%d,%d)\n", name, x, y);&#125;public static void main(String[] args) &#123;PrintStream outAlias = System.out;Turtle tommy = new Turtle("Tommy",new Formatter(System.out));Turtle terry = new Turtle("Terry",new Formatter(outAlias));tommy.move(0,0);terry.move(4,8);tommy.move(3,4);terry.move(2,5);tommy.move(3,3);terry.move(3,3);&#125;&#125; /* Output:Tommy The Turtle is at (0,0)Terry The Turtle is at (4,8)Tommy The Turtle is at (3,4)Terry The Turtle is at (2,5)Tommy The Turtle is at (3,3) tommy输出到System.out中，terry输出到System.out的一个别名中 格式化说明符 为了在插入数据是控制空格和对齐，需要更加精细的格式修饰符。格式如下： 1[argument_index$][flags][width][.precision]conversion flags表示左右对齐，默认是右对齐，如果想左对齐就使用“-”标志 with控制最小尺寸（宽度）至少该这么长，不够用空格替代。 在with后面加上&quot;.&quot;后面表示精度precision。 用于String（%s）时，表示最多可写的字符数 用于浮点数（%f）表示小数点后面的位数，多了舍入，少了补0，默认是6位 用于整数（%d）时,不可用于整数，会触发异常 123456789101112131415161718192021222324252627282930313233343536import java.util.*;public class Receipt &#123;private double total = 0;private Formatter f = new Formatter(System.out);public void printTitle() &#123;f.format("%-15s %5s %10s\n", "Item", "Qty", "Price"); //Item项都有“-”，表示左对齐，其余项都是右对齐f.format("%-15s %5s %10s\n", "----", "---", "-----");&#125;public void print(String name, int qty, double price) &#123;f.format("%-15.15s %5d %10.2f\n", name, qty, price); //name是左对齐并且最多15个字符，包括空格。price最多小数点后两位。total += price;&#125;public void printTotal() &#123;f.format("%-15s %5s %10.2f\n", "Tax", "", total*0.06);f.format("%-15s %5s %10s\n", "", "", "-----");f.format("%-15s %5s %10.2f\n", "Total", "",total * 1.06);&#125;public static void main(String[] args) &#123;Receipt receipt = new Receipt();receipt.printTitle();receipt.print("Jack’s Magic Beans", 4, 4.25);receipt.print("Princess Peas", 3, 5.1);receipt.print("Three Bears Porridge", 1, 14.29);receipt.printTotal();&#125;&#125; /* Output:Item Qty Price---- --- -----Jack’s Magic Be 4 4.25Princess Peas 3 5.10Three Bears Por 1 14.29Tax 1.42-----Total 25.06 Formatter转换 常用的类型转换： d 整型 (十进制) c Unicode字符 b Boolean sString f 浮点型 (十进制) e 浮点型(科学计数) x 整数 (十六进制) h 散列码(十六进制) % 字符&quot;%&quot; 实例： 1234Formatter f = new Formatter(System.out);char u = ‘a’;f.format(&quot;c: %c\n&quot;, u);f.format(&quot;b: %b\n&quot;, u); 所有类型变量都可以执行b转换，除了Boolean类型对应相应的true/false，其它的只要参数不为Null，结果永远是true。（参数为数字0，仍然是true，这点与C不同） String.format() String.format()是一个static方法，它接受与Formatter.format()方法一样的参数，但返回一个String对象。 如下所示： 1String.format(&quot;(t%d, q%d) %s&quot;, transactionID,queryID, message) 7.正则表达式 正则表达式是一个强大而灵活的文本处理工具。它提供可一种完全通用的方式，能够解决各种字符串处理相关的问题：匹配、选择、编辑和验证。 正则可以切分，替换，判断字符串，通过设定的regex规则。 在Java中，\的意思是“我要插入一个正则表达式的反斜线，所以其后字符含有特殊意义” 12345678910\\d 表示一位数字\\W 表示非单词字符\\w 表示单词字符\\\\ 表示普通反斜线\n 换行符\t 制表符+ 一个或多个前一位的表达式| 或者? 可能有\\+ 正号（加号在正则表达式中有特殊的意义，必须用\\将其转译为一个普通字符） 123456789101112public class IntegerMatch &#123;public static void main(String[] args) &#123;System.out.println("-1234".matches("-?\\d+")); //可能以负号开头且后面跟着数字们System.out.println("5678".matches("-?\\d+")); System.out.println("+911".matches("-?\\d+"));System.out.println("+911".matches("(-|\\+)?\\d+")); //可能以正负号开头且后面跟着数字们&#125;&#125; /* Output:truetruefalsetrue split()方法目标是“将字符串从正则表达式匹配的地方切开” 1234567891011121314151617181920212223//: strings/Splitting.javaimport java.util.*;public class Splitting &#123;public static String knights ="Then, when you have found the shrubbery, you must " +"cut down the mightiest tree in the forest... " +"with... a herring!";public static void split(String regex) &#123;System.out.println(Arrays.toString(knights.split(regex)));&#125;public static void main(String[] args) &#123;split(" "); // 从有空格处分开 split("\\W+"); // 从有非单词字符处分开split("n\\W+"); // 从“字符n后面跟了非单词字符”处分开&#125;&#125; /* Output:[Then,, when, you, have, found, the, shrubbery,, you, must, cut, down,the, mightiest, tree, in, the, forest..., with..., a, herring!][Then, when, you, have, found, the, shrubbery, you, must, cut, down,the, mightiest, tree, in, the, forest, with, a, herring][The, whe, you have found the shrubbery, you must cut dow, the mightiesttree i, the forest... with... a herring!] String.split()还有个重载版本，允许限制字符串分隔次数。 String类自带“替换”正则表达式 123456789101112import static net.mindview.util.Print.*;public class Replacing &#123;static String s = Splitting.knights;public static void main(String[] args) &#123;print(s.replaceFirst("f\\w+", "located")); //以f开头的单词换成Locatedprint(s.replaceAll("shrubbery|tree|herring","banana")); //这几个单词的位置换成banana&#125;&#125; /* Output:Then, when you have located the shrubbery, you must cut down themightiest tree in the forest... with... a herring!Then, when you have found the banana, you must cut down the mightiestbanana in the forest... with... a banana! 创建正则表达式 B字符B 1234567\xhh十六进制值为oxhh的字符\uhhhh十六进制表示为0xhhhh的Unicode字符\t制表符\n换行符\r回车符\f转页符\e转义符 字符类： 123456789101112. 任意字符[abc] 包含a、b、c的任何字符[^abc] 除了a、b、c的任何字符[a-zA-Z] 从a-z或者A-Z的所有字符[abc[hij]] 包含a、b、c、h、i、j的所有字符[a-z&amp;&amp;[hij]] 包含h、i、j（交集）\s 空白符（空格、tab、换行、换页、回车）\S 非空白符\d 数字[0-9]\D 非数字[^o-9]\w 词字符[a-zA-Z_0-9]\W 非词字符[^\w] 逻辑操作符： 123XY X后面有YX|Y X或Y(X) 捕获组。可以在表达式中用\i引用第i个捕获组 边界匹配符： 12345^一行的开始$ 一行的结束\b 单词的边界\B 非单词的边界\G 前一个匹配的结束 量词 量词描述一个模式吸收输入文本的方式： 贪婪型： 贪婪表达式会为所有可能的模式发现尽可能多的匹配。 勉强型： 用问号来指定，这个词量匹配满足模式所需的最少字符数。 占有型： Java特有。当正则表达式被用于字符串时，它会产生相当多的状态，以便在匹配失败时可以回溯。而“占有的”词量并不保存这些中间状态，因此它们可以防止回溯。 贪婪型 勉强型 占有型 如何匹配 X? X?? X?+ 一个或0个X X* X*? x*+ 0个或者多个X x+ x+? X++ 一个或者多个X X{n} X{n}? X{n}+ 恰好n次X X{n,} X{n,}? X{n,}+ 至少n次X X{n,m} X{n,m}? X{n,m}+ X至少n次，且不超过m次 接口CharSequence从CharBuffer、String、StringBuffer、StringBuilder类中抽象出字符序列的一般化定义 123456interface CharSequence &#123;charAt(int i);length();subSequence(int start,int end);toString();&#125; 这些类都实现了该接口 Parttern和Matcher Parttern对象表示编译后的正则表达式。 1、导入java.util.regex包 2、用static Parttern.compile()方法来编译正则表达式。 3、使用已编译的Parttern对象上的matcher()方法，加上一个输入字符串，从而共同构造一个Matcher对象。它有很多功能可用。 1234567891011121314151617181920212223242526272829303132333435//&#123;Args: abcabcabcdefabc "abc+" "(abc)+" "(abc)&#123;2,&#125;" &#125;import java.util.regex.*;import static net.mindview.util.Print.*;public class TestRegularExpression &#123;public static void main(String[] args) &#123;if(args.length &lt; 2) &#123;print("Usage:\njava TestRegularExpression " +"characterSequence regularExpression+");System.exit(0);&#125;print("Input: \"" + args[0] + "\"");for(String arg : args) &#123;print("Regular expression: \"" + arg + "\"");Pattern p = Pattern.compile(arg);Matcher m = p.matcher(args[0]);while(m.find()) &#123;print("Match \"" + m.group() + "\" at positions " +m.start() + "-" + (m.end() - 1));&#125;&#125;&#125;&#125; /* Output:Input: "abcabcabcdefabc"Regular expression: "abcabcabcdefabc"Match "abcabcabcdefabc" at positions 0-14Regular expression: "abc+"Match "abc" at positions 0-2Match "abc" at positions 3-5Match "abc" at positions 6-8Match "abc" at positions 12-14Regular expression: "(abc)+"Match "abcabcabc" at positions 0-8Match "abc" at positions 12-14Regular expression: "(abc)&#123;2,&#125;"Match "abcabcabc" at positions 0-8 使用Matcher上的方法，我们能够判断各种不同类型的匹配是否成功： 1234boolean matches()判断整个输入字符串是否匹配正则表达式，只有整个输入都匹配正则表达式时才会trueboolean lookingAt() 判断字符串的开始部分是否能匹配模式，只有输入的第一部分匹配才会trueboolean find() 在CharSequence中按照正则表达式查找多个匹配boolean find(int start) 在指定位置查找多个匹配 1234567891011121314151617181920import java.util.regex.*;import static net.mindview.util.Print.*;public class Finding &#123;public static void main(String[] args) &#123;Matcher m = Pattern.compile("\\w+") //模式\\w+将字符串划分为单词.matcher("Evening is full of the linnet’s wings");while(m.find())printnb(m.group() + " ");print();int i = 0;while(m.find(i)) &#123;printnb(m.group() + " ");i++;&#125;&#125;&#125; /* Output:Evening is full of the linnet s wingsEvening vening ening ning ing ng g is is s full full ull ll l of of fthe the he e linnet linnet innet nnet net et t s s wings wings ings ngsgs s 组 组是用括号划分的正则表达式，组号为0表示整个正则表达式，组号为1表示第一队括号()括起的组，依次类推。 Matcher对象提供了一系列方法 12345public int groupCount() 返回该匹配器的模式中的分组数目,不包括第0组public String group() 返回前一次匹配操作的第0组public String group(int i) 返回前一次匹配操作指定的组号，如果匹配成功，但是指定的组没有匹配输入字符串的任何部分，则将返回null。public int start(int group) 返回前一次匹配操作中寻找到的组的起始索引public int end(int group) 返回前一次匹配操作中寻找到的组的最后一个字符索引+1的值 Pattern标记 Pattern类的compile()方法还有另一个版本，它接受一个标记参数，以调整匹配的行为。 Pattern Pattern.compile(String regex, int flag) flag来自Pattern类中的常量，常用的有Pattern.CASE_INSENSITIVE,Pattern.MULTILINE, 以及 Pattern.COMMENTS split() spilit()方法将输入字符断开成字符串对象数组，断开边界由正则表达式确定。默认情况下是遇到空格切分的 12String[] split(CharSequence input) //通过正则表达式分隔inputString[] split(CharSequence input, int limit) //通过正则表达式分隔input，分隔成limit个 12345678910111213141516import java.util.regex.*;import java.util.*;import static net.mindview.util.Print.*;public class SplitDemo &#123;public static void main(String[] args) &#123;String input ="This!!unusual use!!of exclamation!!points";print(Arrays.toString(Pattern.compile("!!").split(input)));// Only do the first three:print(Arrays.toString(Pattern.compile("!!").split(input, 3)));&#125;&#125; /* Output:[This, unusual use, of exclamation, points][This, unusual use, of exclamation!!points] 替换操作 1234replaceFirst(String replacement) 用于替换第一个匹配成功的部分为字符串replacementreplaceAll(String replacement) 将匹配成功的所有部分替换为字符串replacementappendReplacement(StringBuffer sbuf,String replacement)执行渐进式替换appendTail(StringBuffer sbuf,String replacement)输入字符串余下部分复制到sbuf中 reset() public Matcher reset()； //这个方法将Matcher重置为最初的状态 正则表达式与Java I/O 可以讲正则表达式用于动态字符串，应有两个参数： 文件名和要匹配的正则表达式。 输出：匹配的部分和该部分所在行。 12345678910111213141516171819202122232425262728293031323334353637383940//: strings/JGrep.java// A very simple version of the "grep" program.// &#123;Args: JGrep.java "\\b[Ssct]\\w+"&#125;import java.util.regex.*;import net.mindview.util.*;public class JGrep &#123;public static void main(String[] args) throws Exception &#123;if(args.length &lt; 2) &#123;System.out.println("Usage: java JGrep file regex");System.exit(0);&#125;Pattern p = Pattern.compile(args[1]);// Iterate through the lines of the input file:int index = 0;Matcher m = p.matcher("");for(String line : new TextFile(args[0])) &#123;m.reset(line); //没有在循环里创建Matcher，性能提升while(m.find())System.out.println(index++ + ": " +m.group() + ": " + m.start());&#125;&#125;&#125; /* Output: (Sample)0: strings: 41: simple: 102: the: 283: Ssct: 264: class: 75: static: 96: String: 267: throws: 418: System: 69: System: 610: compile: 2411: through: 1512: the: 2313: the: 3614: String: 815: System: 816: start: 31 8.扫描输入 input元素使用类来自java.io。 ReadLine()方法将一行输入转为String对象。 Java SE5新增了Scanner类（java.util.*），可以接受任何类型的输入对象，包括File对象，InputStream、String或者Readable对象。Readable时Java SE5新增的一个接口，具有read()方法。 使用Scanner，所有输入，粉刺，翻译的操作都隐藏在不同类型的next()中，比如nextInt()、nextDouble()，普通的next()方法方法返回下一个String。 所有基本类型都有next()方法，除了char类型，包括BigDecimal和BigInteger。 Scanner还有相应的hasNext方法，用以判断下一个输入分词是否是所需的类型。 Scanner可以自动吞IOException异常。 Scanner定界符 默认情况下，Scanner根据空白字符对输入进行分词，也可以用正则表达式指定定界符，利用函数scanner.useDelimiter(正则表达式) 1234567891011121314import java.util.*;public class ScannerDelimiter &#123;public static void main(String[] args) &#123;Scanner scanner = new Scanner("12, 42, 78, 99, 42");scanner.useDelimiter("\\s*,\\s*"); //,作为定界符，包括逗号前后的空格符while(scanner.hasNextInt())System.out.println(scanner.nextInt());&#125;&#125; /* Output:1242789942 用正则表达式扫描 除了能够扫描基本类型外，可能还想要扫描自定义的正则表达式。 1234567891011121314151617181920212223242526272829//: strings/ThreatAnalyzer.javaimport java.util.regex.*;import java.util.*;public class ThreatAnalyzer &#123;static String threatData ="58.27.82.161@02/10/2005\n" +"204.45.234.40@02/11/2005\n" +"58.27.82.161@02/11/2005\n" +"58.27.82.161@02/12/2005\n" +"58.27.82.161@02/12/2005\n" +"[Next log section with different data format]";public static void main(String[] args) &#123;Scanner scanner = new Scanner(threatData);String pattern = "(\\d+[.]\\d+[.]\\d+[.]\\d+)@" +"(\\d&#123;2&#125;/\\d&#123;2&#125;/\\d&#123;4&#125;)";while(scanner.hasNext(pattern)) &#123;scanner.next(pattern);MatchResult match = scanner.match();String ip = match.group(1);String date = match.group(2);System.out.format("Threat on %s from %s\n", date,ip);&#125;&#125;&#125; /* Output:Threat on 02/10/2005 from 58.27.82.161Threat on 02/11/2005 from 204.45.234.40Threat on 02/11/2005 from 58.27.82.161Threat on 02/12/2005 from 58.27.82.161Threat on 02/12/2005 from 58.27.82.161 配合正则表达式扫描时，只针对下一个输入分词，如果正则表达式中含有定界符，则永远不可能匹配成功 9.StringTokenizer 以前用StringTokenizer来分词，现在基本上已经废弃不用了。 参考资料 https://blog.csdn.net/severusyue/article/details/51784228 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第十二章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F20%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的通过异常处理错误 正文 1.通过异常处理错误 Java的基本理念是“结构不佳的代码不能运行”。 Java中异常处理的目的在于通过使用少于目前数量的代码来简化大型、可靠的程序的生成，并且通过这种方式可以使程序员增加自信 2.概念 因为异常机制将保证能够捕获这个错误，所以不用小心翼翼的各种去检查。而处理错误只需要在一个地方完成，那就是 异常处理程序。 只需要在异常处理程序中处理错误。 3.基本异常 异常情形是指阻止当前方法或作用域继续执行的问题。 异常处理程序将程序从错误状态中恢复，以使程序要么换一种方式运行，要么继续运行下去。 在没有其它办法的情况下，异常允许我们强制程序停止运行，并告诉我们出现了什么问题。理想状态下，还可以强制程序处理问题，并返回到稳定状态的。 异常参数： 用new在堆上创建异常对象，所有标准异常类都有两个构造器，一个默认的，一个带参的。 能够抛出任意类型的Throwable对象，它是异常类型的根类。 4.捕获异常 监控区域是一个可能产生异常的代码，并且后面跟着处理这些异常的代码。 如果在方法内部抛出了异常，那么这个方法就此结束。如果不希望这个方法结束，那么可以在方法内设置一个特殊的块来捕获异常，即try块。为什么叫try呢，因为在这个块里“尝试”各种可能产生异常的方法进行调用，所以是try。 123456789try &#123;// Code that might generate exceptions&#125; catch(Type1 id1)|&#123;// Handle exceptions of Type1&#125; catch(Type2 id2) &#123;// Handle exceptions of Type2&#125; catch(Type3 id3) &#123;// Handle exceptions of Type3&#125; 异常抛出后，异常处理机制将搜索参数与异常类型相匹配的第一个处理程序，进入catch语句处理，此时认为异常的到了处理。catch子句结束，则处理程序不再往下找匹配了。 终止与恢复： 异常处理理论上有两种基本模型，java支持终止模型。该模型假设错误非常关键，一旦异常被抛出，那么错误已经无可挽回，程序不能继续执行。 另一种模型是恢复模型，就是先修正错误，然后重新进入该方法。这个模型假定了修正完之后再进入执行一定会成功。 相比较终止模型还是比较占优的，因为恢复模型需要了解异常抛出的地点，麻烦。 5.创建自定义异常 可以异常类不写构造函数，使用默认无参构造函数，也可以写构造函数。酱紫可以实现在抛出的异常后面打印出异常所在函数等功能。比如： 1234class MyException extends Exception &#123; public MyException() &#123;&#125; public MyException(String msg) &#123; super(msg); &#125; &#125; 在抛出异常时 1234public static void g() throws MyException &#123; System.out.println(&quot;Throwing MyException from g()&quot;); throw new MyException(&quot;Originated in g()&quot;); &#125; 那么，在打印的时候，就可以打印出 1MyException: Originated in g() 在异常处理程序中，调用Throwable类的printStackTrace()方法，那么“从异常方法调用处直到异常抛出处”的方法调用序列将被打印出来 123MyException at FullConstructors.f(FullConstructors.java:11) at FullConstructors.main(FullConstructors.java:19) printStackTrace()方法可以带参数，比如printStackTrace(System.out)，这样打印出来的信息将被发送到System.out，如果该方法不带参，那么信息将被输出到标准错误流 异常与记录日志 使用java.util.logging工具将输出记录到日志中 当然，不能指望每个程序员把记录日志的程序的基础设施都构建在异常里，所以更常见的情形是需要捕获和记录他人编写的异常，因此需要在异常处理程序中生成日志消息 我们甚至可以进一步定义异常，比如加入额外的构造器和成员，然而一般来说并不会用上这些功能 TODO: 现在都用的slf4j集成log4j来记录日志的，这里分享一下好用的日志框架集成方法 6.异常说明 异常说明使用了关键字 throws，后面接一个潜在的异常类型列表。 void f() throws TooBig, TooSmall, DivZero { //… 这种在编译时被强制检查的异常称为被检查的异常。 也可以声明方法将抛出异常，但是实际上却不抛出。这样做可以先为异常占个位置，以后可以抛出这类异常而不用修改已有方法，这种“作弊”方法通常用在你定义抽象基类和接口时，这样派生类或者接口实现就能抛出这些预先声明的异常。 7.捕获所有异常 捕获异常类型的基类Exception（还有其它基类），这可以保证异常一定会被捕获，最好把它放到异常处理程序列表的末尾 123456catch(Exception e) &#123;System.out.println(&quot;Caught an exception&quot;);&#125;Exception可以调用其从基类继承的方法：String getMessage( )String getLocalizedMessage( ) 获取详细信息（抛出异常对象所带的参数），或者用本地语言表示的详细信息。 栈轨迹： printStackTrace()方法所提供的信息可以通过getStackTrace()方法来直接访问，该方法返回一个由栈轨迹元素所构成的数组，每个元素表示栈中的一帧，元素0也是栈顶元素，是最后调用的方法（Throwable被创建和抛出之处），最后一个元素是栈底，是调用序列的第一个方法调用。 重新抛出异常 挡在异常处理模块里继续抛出异常，那么printStackTrace()方法显示的将是原来异常抛出点的调用栈信息，而非重新抛出点的的信息。 此时可以使用fillinStackTrace()方法 1234catch(Exception e) &#123;System.out.println(&quot;An exception was thrown&quot;);throw (Exception)e.fillInStackTrace();&#125; 调用fillInStackTrace()的这一行就成为异常的新发生地了。 在异常捕获之后抛出另一种异常，其效果类似于fillInStackTrace() 异常链 在捕获一个异常后抛出另一个异常，并希望把原始异常的信息保存下来，这被称为异常链。 Throwable的子类可以在构造器中接受一个case对象作为参数。这个case参数表示原始异常，这样通过把原始异常传递给新的异常。 Throwable子类，只有三种基本异常提供了带case参数的构造器，它们是Error(用于Java虚拟机报告系统错误)、Exception以及RuntimeException。 8.Java标准异常 Throwable对象可分为两种类型（指从Throwable继承而得到的类型）：Error用来表示编译时和系统错误，Exception是可以被抛出的基本类型，包括Java类库，用户方法以及运行时故障都可以抛出此异常。 Error一般不用自己关心，来讲Exception: 特例RuntimeException 比如nullPointerException，空指针异常。 运行时产生的异常，不需要在异常说明中声明方法将抛出RuntimeException类型的异常。它们被称为“不受检查的异常”。这种异常属于错误，会被自动捕获，而不用程序员自己写代码捕获。 如果RuntimeException没有被捕获而直达main()，那么在程序退出前将调用异常的printStackTrace()方法。 9.使用finally进行清理 在异常处理程序后面加上finamlly子句，可保证无论try块里的异常是否抛出，都能执行。（通常适用于内存回收之外的情况） finally执行未必要放在最后，正常的顺序执行到它就是它了 12345678910111213141516171819202122232425import static net.mindview.util.Print.*;class FourException extends Exception &#123;&#125;public class AlwaysFinally &#123;public static void main(String[] args) &#123;print("Entering first try block");try &#123;print("Entering second try block");try &#123;throw new FourException();&#125; finally &#123;print("finally in 2nd try block");&#125;&#125; catch(FourException e) &#123;System.out.println("Caught FourException in 1st try block");&#125; finally &#123;System.out.println("finally in 1st try block");&#125;&#125;&#125; /* Output:Entering first try blockEntering second try blockfinally in 2nd try blockCaught FourException in 1st try blockfinally in 1st try block 当涉及break和continue时，finally子句也会得到执行。 如果把finally子句和带标签的break以及continue配合使用，在java里没必要使用goto语句了。 有return语句时，finally依旧会执行。 异常丢失： 在一个异常还没得到处理的情况下，应该尽量避免抛出另一个异常。 1、使用finally可能导致一个异常还没处理，在接下来的finally字句中又抛出了一个异常，那么前一个异常就会丢失，外面的catch块捕捉到的就是finally抛出的异常而未察觉到最开始抛出的异常。 2、一种更简单的丢失异常的方式是在finally语句中直接return，这就更别说到catch块匹配异常了。 应该避免以上两种编程错误。 10.异常的限制 当覆盖 方法时，只能抛出在基类方法的异常说明里列出的那些异常或者不抛出，但是不能新增异常说明。这个限制意味着，当基类代码运用到派生类时，依旧有用 当处理派生类对象时，编译器只会强制要求捕获派生类该方法产生的异常。如果向上转型为基类，编译器会要求捕获基类方法产生的异常。很智能的。 异常说明本身并不属于方法类型的范畴中，因此不参与重载的判断。 基于特定方法的“异常说明的接口”不是变大了而是变小了，小于等于基类异常说明表——这恰好和类接口在继承时的情形相反 11.构造器 如果异常发生了，所有东西能正常清理吗？ 例如io操作的时候，文件没有正常的构造，在finally中却要file.close，所以一般在close中又加一层try catch 基本规则是:在创建需要清理的对象之后，立即进入一个try-finally块，不过新版jdk有新的语法了 12.异常的匹配 异常匹配并不要求与抛出的异常完全匹配，也可以匹配该异常的基类。 如果故意把基类异常放在前面，导致子类异常的catch子句永远得不到执行，编译器会报错。 13.其它可选方式 1、将异常传递给控制台，使用FileInputStream进行打开关闭操作，记录在一个文件中。 2、用RuntimeException来包装“被检查的异常”。 参考资料 https://blog.csdn.net/severusyue/article/details/51780879 Java编程思想第四版读书笔记——第十二章 通过异常处理错误 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第十一章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F18%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的持有对象 正文 1.持有对象 容器类的基本类型是List，Set，Queue，Map。这些对象类型也成为集合类 2.泛型和类型安全的容器 使用ArrayList相当简单：创建一个实例，用add()插入对象，get()访问对象， size()获取ArrayList中元素的个数 3.基本概念 Java容器类类库的用途是“保存对象”，并将其划分为两个不同的概念: Collection:一个独立元素的序列，这些元素都服从一条或多条规则。List必须按照插入的顺序保存元素，而Set不能有重复元素。Queue按照队列规则来确定对象产生的顺序 Map:一组成对的&quot;键值对&quot;对象，允许使用键值来查找值。映射表允许我们使用另一个对象查找某个对象，它也被称为“关联数组” 4.添加一组元素 下面介绍Collection类添加元素的实用方法： Arrays.asList()接受一个数组或者一个逗号分隔的元素列表（使用可变参数），将其转换为一个List对象。 12List&lt;Integer&gt; list = Arrays.asList(16, 17, 18, 19, 20); list.set(1, 99); Collection.addAll()方法运行起来很快，而且构建一个不包含元素的Collection，然后调用Collection.addAll()这种方式很方便，因此它是首选方式 123Collection&lt;Integer&gt; collection = new ArrayList&lt;Integer&gt;(Arrays.asList(1, 2, 3, 4, 5));Integer[] moreInts = &#123; 6, 7, 8, 9, 10 &#125;; collection.addAll(Arrays.asList(moreInts)); 而Collection.addAll()只能接受另一个Collection对象作为参数，不如Arrays.asList()和Collections.addAll()灵活，这两个方法采样的都是可变参数列表 1Collections.addAll(collection, 11, 12, 13, 14, 15); 可以直接使用Arrays.asList()的输出，将其当做List，但是这种情况下，其底层表示的是数组，不能调整其尺寸，所以不能add()或delete() 123456789101112131415161718192021222324252627 class Snow &#123;&#125; class Powder extends Snow &#123;&#125; class Light extends Powder &#123;&#125; class Heavy extends Powder &#123;&#125; class Crusty extends Snow &#123;&#125; class Slush extends Snow &#123;&#125; public class AsListInference &#123; public static void main(String[] args) &#123; List&lt;Snow&gt; snow1 = Arrays.asList( new Crusty(), new Slush(), new Powder()); // Won’t compile: // List&lt;Snow&gt; snow2 = Arrays.asList( // new Light(), new Heavy()); // Compiler says: // found : java.util.List&lt;Powder&gt; // required: java.util.List&lt;Snow&gt; // Collections.addAll() doesn’t get confused: List&lt;Snow&gt; snow3 = new ArrayList&lt;Snow&gt;(); Collections.addAll(snow3, new Light(), new Heavy()); &#125;&#125; 对于这种多重向上转型，必须显示类型参数说明。 5.容器的打印 可直接打印容器，它自带了打印函数 12345678910111213141516171819202122232425262728293031323334353637383940import java.util.*; import static net.mindview.util.Print.*; public class PrintingContainers &#123; static Collection fill(Collection&lt;String&gt; collection) &#123; collection.add("rat"); collection.add("cat"); collection.add("dog"); collection.add("dog"); return collection; &#125; static Map fill(Map&lt;String,String&gt; map) &#123; map.put("rat", "Fuzzy"); map.put("cat", "Rags"); map.put("dog", "Bosco"); map.put("dog", "Spot"); return map; &#125; public static void main(String[] args) &#123; print(fill(new ArrayList&lt;String&gt;())); print(fill(new LinkedList&lt;String&gt;())); print(fill(new HashSet&lt;String&gt;())); print(fill(new TreeSet&lt;String&gt;())); print(fill(new LinkedHashSet&lt;String&gt;())); print(fill(new HashMap&lt;String,String&gt;())); print(fill(new TreeMap&lt;String,String&gt;())); print(fill(new LinkedHashMap&lt;String,String&gt;())); &#125; &#125; /* Output: [rat, cat, dog, dog] [rat, cat, dog, dog] [dog, cat, rat] [cat, dog, rat] [rat, cat, dog] &#123;dog=Spot, cat=Rags, rat=Fuzzy&#125; &#123;cat=Rags, dog=Spot, rat=Fuzzy&#125; &#123;rat=Fuzzy, cat=Rags, dog=Spot&#125; 这两种主要类型的区别在于容器的每个“槽”保存的元素个数 Collection在每个槽中只能保存一个元素。此类容器包括：List，它以特定的顺序保存一组元素；Set，元素不能重复；Queue，一端插入对象，另一端移除对象。 Map在每个槽内保存两个对象，即键和与之相关联的值 Collection打印出来的内容用[ ]括住，Map打印出来的内容用{ }括住 HashMap提供了最快的查找技术，TreeMap按照比较结果升序保存键，LinkedHashMap则按照插入顺序保存键，同时还保留了HashMap的查询速度 6.List 两种类型的List: 基本的ArrayList，它长于随机访问元素，但是在List的中间插入和移除元素时较慢。 LinkedList，它提供了代价较低的在List中间进行的插入和删除操作，提供了优化的顺序访问。LinkedList在随机访问方面相对比较慢 List重要价值在于，它提供了一种可修改的序列。 indexOf()来发现对象在List中所处位置的索引编号。 从List中移除一个元素，都会涌到equals()方法，List的行为根据equals()的行为而有所变化。 优化是一个棘手的问题，最好的策略就是弃之不顾，知道你发现需要担心它。 subList()方法允许很容易的从较大的列表中创建一个片段，顺序并不影响containsAll()的判断结果。 retainAll()保留两List的交集。 removeAll()也是基于equals()方法的。 addAll()方法使得我们可以在初始List中插入新的列表，而不是仅仅只能用Collection的addAll()方法追加到表尾。 7.迭代器 对于List，add()是插入元素的方法之一，而get()是取出元素的方法之一。 迭代器（Iterator，一种设计模式）是一个对象，它的工作是遍历并选择序列中的对象，迭代器通常被称为轻量级对象，创建它们的代价小。 Java的Iterator只能单向移动，用来： 1234使用方法Iterator()要求容器返回一个Iterator。Iterator准备好返回序列的第一个元素。使用next()获得序列中的下一个元素。使用hasNext()检查序列中是否还有元素。使用remove()将迭代器新近返回的元素删除。 在remove()之前必须先调用next()。 Iterator 能够将遍历序列的操作与序列底层的结构分离。迭代器统一了对容器的访问方式。如下： 123456789101112131415161718192021222324252627import typeinfo.pets.*; import java.util.*; public class CrossContainerIteration &#123; public static void display(Iterator&lt;Pet&gt; it) &#123; while(it.hasNext()) &#123; Pet p = it.next(); System.out.print(p.id() + ":" + p + " "); &#125; System.out.println(); &#125; public static void main(String[] args) &#123; ArrayList&lt;Pet&gt; pets = Pets.arrayList(8); LinkedList&lt;Pet&gt; petsLL = new LinkedList&lt;Pet&gt;(pets); HashSet&lt;Pet&gt; petsHS = new HashSet&lt;Pet&gt;(pets); TreeSet&lt;Pet&gt; petsTS = new TreeSet&lt;Pet&gt;(pets); display(pets.iterator()); display(petsLL.iterator()); display(petsHS.iterator()); display(petsTS.iterator()); &#125; &#125; /* Output: 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 4:Pug 6:Pug 3:Mutt 1:Manx 5:Cymric 7:Manx 2:Cymric 0:Rat 5:Cymric 2:Cymric 7:Manx 1:Manx 3:Mutt 6:Pug 4:Pug 0:Rat ListIterator可以双向移动，并且可以使用set()方法替换它访问过的最后一个元素。 8.LinkedList LinkedList在执行某些操作时比ArrayList更高效，但是在随机访问操作方面却要逊色一些。 LinkedList还添加了可以作为栈，队列，双端队列的方法。可以使用它们的方法 9.stack “栈”通常是指“后进先出”（LIFO）的容器。 可以直接将LinkedList当做栈使用。如: 123456789101112package net.mindview.util; import java.util.LinkedList; public class Stack&lt;T&gt; &#123; private LinkedList&lt;T&gt; storage = new LinkedList&lt;T&gt;(); public void push(T v) &#123; storage.addFirst(v); &#125; public T peek() &#123; return storage.getFirst(); &#125; public T pop() &#123; return storage.removeFirst(); &#125; public boolean empty() &#123; return storage.isEmpty(); &#125; public String toString() &#123; return storage.toString(); &#125; &#125; 如果想在自己的代码里使用Stack类，在创建实例时，需要完整的指定包名，否则可能会和java.util包中的Stack发生冲突 10.set Set最常使用的是测试归属性，可以轻易的查询某个对象是否在某个Set中。查找成为Set中最重要的操作，因此通常会选择一个HashSet的实现，它专门对快速查找进行了优化。 Set具有与Collection完全一样的接口，实际上Set就是Collection，只是行为不同。Set是基于对象的值来确定归属性的，使用contains() HashSet使用了散列，HashSet所维护的顺序与TreeSet和LinkedHashSet都不一样，因为他们的实现具有不同的元素存储方式。TreeSet将元素存储在红-黑树数据结构中，而HashSet使用的是散列函数。LinkedHashList因为查询速度的原因也使用了散列，但是看起来是使用了链表来维护元素的插入顺序。 1234567891011121314151617import java.util.*; import net.mindview.util.*; public class UniqueWords &#123; public static void main(String[] args) &#123; Set&lt;String&gt; words = new TreeSet&lt;String&gt;( new TextFile("SetOperations.java", "\\W+")); System.out.println(words); &#125; &#125; /* Output: [A, B, C, Collections, D, E, F, G, H, HashSet, I, J, K, L, M, N, Output, Print, Set, SetOperations, String, X, Y, Z, add, addAll, added, args, class, contains, containsAll, false, from, holding, import, in, java, main, mindview, net, new, print, public, remove, removeAll, removed, set1, set2, split, static, to, true, util, void] 如上所示代码，打开一个文件，并将其读入一个Set中。TextFile继承自List，构造器打开文件，并根据正则表达式“\W+”将其断开为单词，这个正则表达式表示“一个或多个字母”，TreeSet将其按字典顺序排列，大小写分开。 如果想按字母顺序排列，可以向TreeSwt构造器传入String.CASE_INSENTIVE_ORDER比较器 12345678910111213141516public class UniqueWordsAlphabetic &#123; public static void main(String[] args) &#123; Set&lt;String&gt; words = new TreeSet&lt;String&gt;(String.CASE_INSENSITIVE_ORDER); words.addAll( new TextFile("SetOperations.java", "\\W+")); System.out.println(words); &#125; &#125; /* Output: [A, add, addAll, added, args, B, C, class, Collections, contains, containsAll, D, E, F, false, from, G, H, HashSet, holding, I, import, in, J, java, K, L, M, main, mindview, N, net, new, Output, Print, public, remove, removeAll, removed, Set, set1, set2, SetOperations, split, static, String, to, true, util, void, X, Y, Z] 11.Map Map的get方法返回该键对应的值。如果没有则返回null。 Map的put方法放入键值对。 Map的contansKey()返回是否含有这个键，containsValue()返回是否含有这个值。 Map可以返回它的键的Set，它的值的Collection，或者它的键值对的Set。value()返回所有值组成的Collection，KeySet()方法产生所有健组成的Set，可用于遍历。 12.Queue 队列是一个典型的先进先出（FIFO）的容器。队列常被当做一种可靠的将对象从程序的某个区域传输到另一个区域的途径。队列在并发编程中特别重要。因为它们可以安全的将对象从一个任务传输给另一个任务。 123offer()是与Queue相关的方法之一，他在允许的情况下，将一个元素插入到队尾，或者返回false。peek()和element()都将在布衣橱的情况下返回队头，但是peek()方法在队列为空时返回null，而element()会抛出NoSuchElementException异常。poll()和remove()方法将一出并返回队头，但是poll()在队列为空时返回null，而remove()会抛出NoSuchElementException异常。 Queue可以由LinkedList来实现。而Queue接口窄化了对LinkedList的方法的访问权限。 PriorityQueue: 先进先出描述了最典型的队列规则。队列规则是指在给定一组队列中的元素的情况下，确定下一个弹出队列的元素的规则。先进先出声明的是下一个元素应该是等待时间最长的元素。 12优先级队列声明下一个弹出元素是最需要的元素（拥有最高优先级）。 PriorityQueue可以确保当你调用peek()、poll()和remove()方法时，获取的元素将是队列中优先级最高的元素。重复是允许的，最小的值拥有最高的优先级（如果是String，空格也可以算作值，并且比字母优先级高），可以使用Collection.reverseOrder()来改变顺序。如 stringPQ = new PriorityQueue(strings.size(), Collections.reverseOrder()); 可以用HashSet来消除重复的Charactor.比如： String fact = “EDUCATION SHOULD ESCHEW OBFUSCATION”; Set charSet = new HashSet(); for(char c : fact.toCharArray()) charSet.add©; // Autoboxing PriorityQueue characterPQ = new PriorityQueue(charSet); QueueDemo.printQ(characterPQ); Output: A B C D E F H I L N O S T U W 13.Collection和Iterator Collection是描述所有序列容器的共性的接口。在Java中，Collection和迭代器绑定到了一起，所有实现Collection就意味着需要实现Iterator()方法 然而如果一个不是Collection类型的外部类，就不能实现Collection接口了，此时使用Iterator就是个不错的选择。继承AbstractCollection可以很容易的实现，它强制实现iterator()和size()方法。 1234567891011121314151617181920212223242526272829import typeinfo.pets.*; import java.util.*; public class CollectionSequence extends AbstractCollection&lt;Pet&gt; &#123; private Pet[] pets = Pets.createArray(8); public int size() &#123; return pets.length; &#125; public Iterator&lt;Pet&gt; iterator() &#123; return new Iterator&lt;Pet&gt;() &#123; private int index = 0; public boolean hasNext() &#123; return index &lt; pets.length; &#125; public Pet next() &#123; return pets[index++]; &#125; public void remove() &#123; // Not implemented throw new UnsupportedOperationException(); &#125; &#125;; &#125; public static void main(String[] args) &#123; CollectionSequence c = new CollectionSequence(); InterfaceVsIterator.display(c); InterfaceVsIterator.display(c.iterator()); &#125; &#125; /* Output: 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 上例可见，如果实现Collection()，就必须实现Iterator()，更糟糕的是，如果这个外部类已经有需要继承的类而不能继承自AbstractCollection，要实现Collection就必须实现该接口中的所有方法。 123456789101112131415161718192021222324 class PetSequence &#123; protected Pet[] pets = Pets.createArray(8); &#125; public class NonCollectionSequence extends PetSequence &#123; public Iterator&lt;Pet&gt; iterator() &#123; return new Iterator&lt;Pet&gt;() &#123; private int index = 0; public boolean hasNext() &#123; return index &lt; pets.length; &#125; public Pet next() &#123; return pets[index++]; &#125; public void remove() &#123; // Not implemented throw new UnsupportedOperationException(); &#125; &#125;; &#125; public static void main(String[] args) &#123; NonCollectionSequence nc = new NonCollectionSequence(); InterfaceVsIterator.display(nc.iterator()); &#125; &#125; /* Output: 0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 生成Iterator是将队列与消费队列的方法连接在一起耦合度最小的方式，并且与实现Collection相比，它在序列类上所施加的约束也少得多。 14.Foreach与迭代器 Iterable接口包含一个能够产生Iterator的iterator()方法，并且Iterator接口被foreach用来在序列中移动。 大量的类都是Iterable类型，主要包括所有的Collection类（但是不包含各种Map）。 foreach语句可以用于数组或其它任何Iterable，但并不意味着数组肯定是一个Iterable，而任何自动包装也不会自动发生，不存在任何从数组到Iterable的自动转换，必须手动执行这种转换。 12345678910111213141516import java.util.*; public class ArrayIsNotIterable &#123; static &lt;T&gt; void test(Iterable&lt;T&gt; ib) &#123; for(T t : ib) System.out.print(t + " "); &#125; public static void main(String[] args) &#123; test(Arrays.asList(1, 2, 3)); String[] strings = &#123; "A", "B", "C" &#125;; // An array works in foreach, but it’s not Iterable: //! test(strings); // You must explicitly convert it to an Iterable: test(Arrays.asList(strings)); &#125; &#125; /* Output: 1 2 3 A B C 如上，String数组不可以直接作为Iterator类传递，而是被手动转换成了Collection类，也即Iterable类型 适配器方法惯用法: 当有一个接口并需要另一个接口，编写适配器就可以解决问题。至于为什么有一个接口还要写另一个接口么，比如像有乱序倒序的Iterator方法，如果直接继承就会覆盖原有的顺序方法，所以要写别的能产生Iterable对象的方法接口（适配器）以满足foreach语句实现功能。 通过使用方法中的内部类，下例实现了在foreach方法中将Iterable对象倒序和乱序遍历的方法 1234567891011121314151617181920212223242526272829303132333435363738394041 import java.util.*; public class MultiIterableClass extends IterableClass &#123; public Iterable&lt;String&gt; reversed() &#123; return new Iterable&lt;String&gt;() &#123; public Iterator&lt;String&gt; iterator() &#123; return new Iterator&lt;String&gt;() &#123; int current = words.length - 1; public boolean hasNext() &#123; return current &gt; -1; &#125; public String next() &#123; return words[current--]; &#125; public void remove() &#123; // Not implemented throw new UnsupportedOperationException(); &#125; &#125;; &#125; &#125;; &#125; public Iterable&lt;String&gt; randomized() &#123; return new Iterable&lt;String&gt;() &#123; public Iterator&lt;String&gt; iterator() &#123; List&lt;String&gt; shuffled = new ArrayList&lt;String&gt;(Arrays.asList(words)); Collections.shuffle(shuffled, new Random(47)); return shuffled.iterator(); &#125; &#125;; &#125; public static void main(String[] args) &#123; MultiIterableClass mic = new MultiIterableClass(); for(String s : mic.reversed()) System.out.print(s + " "); System.out.println(); for(String s : mic.randomized()) System.out.print(s + " "); System.out.println(); for(String s : mic) System.out.print(s + " "); &#125; &#125; /* Output: banana-shaped. be to Earth the know we how is that And is banana-shaped. Earth that how the be And we know to And that is how we know the Earth to be banana-shaped. 注意乱序方法并没有创建自己的Iterator,而是直接返回被打乱的List（作为Collection类的一种）中的Iterator。 需要注意的是，Arrrays.asList()产生的List对象会使用底层数组作为其物理实现，也就是会修改原来的数组。如果不想这种情况发生，就应该在另一个容器中创建一个副本。即使用 List list = new ArrayList(Arrays.asList(数组)) 的方法，这样修改的只是list引用而不是原数组 15.总结 Java提供了大量持有对象的方式： 1、数组。一旦生成，容量就不能改变。 2、Collection保存单一的元素，Map保存相关联的键值对。它们可以自动的调整其尺寸。容器不能持有基本类型，但是自动包装机制会自动地执行基本类型到容器中所持有的包装器类型之间的双向转换。 数组和List都是排好序的容器，List可以自动扩容。 如果需要大量随机访问，使用ArrayList，如果要经常在其中插入删除，则使用LinkedList。 各种Queue以及栈的行为，由LinkedList提供支持。 Map将对象与对象相关联，HashMap用来快速访问，而TreeMap保持“键”始终处于排序状态，所以没有HashMap快。LinkedHashMap保持原始插入的顺序，但也通过散列提供了快速访问能力。 Set不接受重复元素。HashSet提供最快的查询速度，TreeSet保持元素处于排序状态，LinkedHashSet以插入顺序保存元素。 新程序不该使用过时的Vector、Hashtable和Stack。 除了TreeSet之外的所有Set都拥有与Collection完全一样的接口。 List和Collection存在着明显的不同，尽管List所要求的方法都在Collection中。 另一方面，在Queue接口中的方法都是独立的，在创建具有Queue功能的实现时，不需要使用Collection方法。 最后，Map和Collection之间唯一的重叠就是Map可以使用entrySet()和values()方法来产生Collection。 参考资料 https://blog.csdn.net/severusyue/article/details/49491441 Java编程思想第四版读书笔记——第十一章 持有对象 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第十章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F18%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%8D%81%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的内部类 正文 1.内部类 可以将一个类的定义放在另一个类的定义内部，这就是内部类 内部类和组合是完全不同的概念 2.创建内部类 内部类是嵌在外部类内部的类。 如果想从外部类的非静态方法创建一个内部类对象，一定要用“. ”,Outer Class . InnerClass 比如： Parcel2.Contents c = q.contents(); 3.链接到外部类 内部类可以访问外围对象的所有成员。对外围类的所有元素都有访问权。 内部类的对象只有在于外部类的对象相关联时才能被创建。当某个外围类对象创建一个内部类对象，此内部类的对象必定会秘密的捕获一个指向那个外围类对象的引用。依赖于外部对象，也就是，必须是外部类对象 . 某方法（） 的方式创建 下面是&quot;迭代器&quot;设计模式的一个梨子 123456789101112131415161718192021222324public class Sequence&#123; private Object[] items; private int next=0; public Sequence(int size)&#123; items=new Object[size]; &#125; private class SequenceSelector&#123; private int i=0; public boolean end()&#123; return i=items.length;// &#125; public void next()&#123; i++; &#125; &#125; public SequenceSelector selector()&#123; return new SequenceSelector(); &#125; public static void main(String[] args)&#123; Sequence seq=new Sequence(); Sequence.SequenceSelector=seq.selector(); &#125; &#125; 4.使用.this和.new 内部类创建外部类对象，return OuterClass.this; 在其它地方创建内部类，要用外围类对象创建，而不是用类名。 OuterClass.InnerClass inner = outer.new Inner(); 在拥有外部类对象之前是不可能创建内部类对象的，这是因为内部类对象会暗暗的连接到创建他的外部类对象上，但是如果你创建的是嵌套类(静态内部类),就不需要对外部类对象的引用了 1234567891011121314public class DotThis&#123; void f()&#123;&#125; public class Inner&#123; public DotThis outer()&#123; return DotThis.this; &#125; &#125; public Inner inner()&#123;return new Inner();&#125; public static void main(String[] args)&#123; DotThis dt=new DotThis(); DotThis.Inner dti=dt.new Inner(); dti.outer().f(); &#125; &#125; 5.内部类与向上转型 接口的所有成员自动被设置为public private内部类给类的设计者提供了一种途径，通过这种方式可以完全阻止任何依赖于类型的编码，并且完全隐藏了细节。因为是private，所以除了外围类不能访问它，只能通过outer.contents() 方法return的new出来。 因为上转型为接口，所以隐藏了原本的类型。 由于不能访问任何新增加的，原本不属于公共接口的方法，所以扩展接口是没有价值的。这也给Java编译器提供了生成更高效代码的机会。因为转型只能转型成接口类型，收窄了 1234567891011121314151617181920212223242526272829303132public interface Destination&#123; String readLabel();&#125;public interface Contents&#123; int value();&#125;class Parcel&#123; private class PContents implements Contents&#123; public int value()&#123;return 10;&#125; &#125; protected class PDestination implements Destination&#123; public String readLabel()&#123; return "Hello word"; &#125; &#125; public PContent contents()&#123; return new PContents(); &#125; public PDestination destination()&#123; return new PDestination(); &#125;&#125;public class TestParcel&#123; public static void main(String[] args)&#123; Parcel p=new Parcel(); Contents c=p.contents(); Destination d=p.destination(); &#125;&#125; 6.在方法和作用域内的内部类 可以在一个方法或者任意的作用域内定义内部类，这样做有两个理由： 1、实现了某类型的接口，于是可以创建并返回对其的引用。 2、要解决一个复杂的问题，想创建一个类来辅助解决方案，但是不希望这个类是公用的。 可以看到内部类可以在以下定义 123456一个定义在方法中的类一个定义在作用域的类，此作用域在方法的内部一个实现了接口的匿名类一个匿名类，它扩展了有非默认构造器的类一个匿名类，他执行字段初始化一个匿名类，它通过实例初始化实现构造 下面两个梨子实现了前两个 123456789101112131415161718192021222324252627282930313233343536373839//方法内部类(又称局部内部类)public class Parcel&#123; //方法 public Destination destination()&#123; //方法内部类 class PInner implements Destination&#123; public String say()&#123; return "Hello word!"; &#125; &#125; return new PInner(); &#125; public static void main(String[] args)&#123; Parcel p=new Parcel(); Destination d=p.destination(); &#125;&#125;//作用域内部类public class Parcel&#123; public void fun(boolean b)&#123; if(b)&#123; //作用域内部类 class Inner&#123; private String id; Inner(String id)&#123; this.id=id; &#125; public String say()&#123;&#125; &#125; new Inner().say(); &#125; &#125; public static void main(String[] args)&#123; Parcel p=new Parcel(); p.fun(true); &#125;&#125; 7.匿名内部类 123456789101112public class Parcel7 &#123; public Contents contents() &#123; return new Contents() &#123; // Insert a class definition private int i = 11; public int value() &#123; return i; &#125; &#125;; // Semicolon required in this case &#125; public static void main(String[] args) &#123; Parcel7 p = new Parcel7(); Contents c = p.contents(); &#125;&#125; 由此可以创建一个继承自Contents的匿名内部类。 不能给内部类用构造器初始化，因为匿名内部类没有名字。 如果定义一个匿名内部类，它需要使用外部定义的参数，那么次参数引用需要是final的,实例初始化的效果就是构造器 1234567891011121314151617181920212223242526272829303132abstract class Base&#123; public Base(int i)&#123; print("Base constructor "); &#125; public abstract void f(); &#125; public class Anonymous&#123; public static Base getBase(int i)&#123;//这里的i参数传递给了匿名类的基类构造函数, //并没有在匿名类内部使用 return new Base(i)&#123; public void f()&#123; print("Anonymout f()"); &#125; &#125;; &#125; public Destination destination(final String dest,final float price)&#123; return new Destination()&#123; private int cost; &#123; cost=Math.round(price);//当直接在匿名类直接使用参数时必须加final &#125; private String str=dest; &#125;; &#125; public static void main(String[] args)&#123; Base base=getBase(4); base.f(); &#125; &#125; 因为匿名内部类既可以扩展类，也可以实现接口，但是不能两者兼备，而且如果是实现接口，也只能实现要给接口 在访工厂方法 利用匿名内部类可以更加优雅的实现工厂方法 1234567891011121314151617181920212223242526interface Game&#123;boolean move();&#125;interface GameFactory&#123;Game getGame();&#125;class Checker implements Game&#123; public boolean move()&#123;return true;&#125; public static GameFactory factory=new GameFactory()&#123; public Game getGame()&#123;return new Checker();&#125; &#125;;&#125;class Chess implements Game&#123; public boolean move()&#123;return true;&#125; public static GameFactory factory=new GameFactory()&#123; public Game getGame()&#123;return new Chess();&#125; &#125;;&#125;public class TestGames&#123; public static void playGame(GameFactory g)&#123; Game game=g.getGame(); g.move(); &#125; public static void main(String[] args)&#123; playGame(Checker.factory); playGame(Chess.factory); &#125; &#125; 8.嵌套类 将内部类声明为static，这通常称为嵌套类。 嵌套类意味着： 1、要创建嵌套类的对象，不需要其外围类的对象。 2、不能从嵌套类的对象中访问非静态的外围对象。 普通内部类不能有static数据和static字段，也不能包含嵌套类，而嵌套类可以包含。它不需要依赖外围类引用 12345678910111213141516171819202122232425262728293031public class Parcel11 &#123; private static class ParcelContents implements Contents &#123; private int i = 11; public int value() &#123; return i; &#125; &#125; protected static class ParcelDestination implements Destination&#123; private String label; private ParcelDestination(String whereTo) &#123; label = whereTo; &#125; public String readLabel() &#123; return label; &#125; // Nested classes can contain other static elements: public static void f() &#123;&#125; static int x = 10; static class AnotherLevel &#123; public static void f() &#123;&#125; static int x = 10; &#125; &#125; public static Destination destination(String s) &#123; return new ParcelDestination(s); &#125; public static Contents contents() &#123; return new ParcelContents(); &#125; public static void main(String[] args) &#123; Contents c = contents(); Destination d = destination("Tasmania"); &#125; &#125; 接口内部的类 接口中的任何类自动是public和static的 如果想创建某些公共代码，使得它们可以被某个接口的所有不同实现所公用，那么使用接口内部的嵌套类会显得很方便 1234567891011public interface ClassInInterface &#123; void howdy(); class Test implements ClassInInterface &#123; public void howdy() &#123; System.out.println("Howdy!"); &#125; public static void main(String[] args) &#123; new Test().howdy(); &#125; &#125; &#125; 扩展 java8接口增强 12a. 在接口中可以添加使用 default 关键字修饰的非抽象方法。即：默认方法（或扩展方法）b. 接口里可以声明静态方法，并且可以实现。 a:在接口中可以添加使用 default 关键字修饰的非抽象方法。即：默认方法（或扩展方法）: Java 8 允许给接口添加一个非抽象的方法实现，只需要使用 default 关键字即可，这个特征又叫做扩展方法（也称为默认方法或虚拟扩展方法或防护方法）。在实现该接口时，该默认扩展方法在子类上可以直接使用，它的使用方式类似于抽象类中非抽象成员方法。 Note：扩展方法不能够重写（也称复写或覆盖） Object 中的方法，却可以重载Object 中的方法。 eg：toString、equals、 hashCode 不能在接口中被覆盖，却可以被重载。 默认方法允许我们在接口里添加新的方法，而不会破坏实现这个接口的已有类的兼容性，也就是说不会强迫实现接口的类实现默认方法。 默认方法和抽象方法的区别是抽象方法必须要被实现，默认方法不是。作为替代方式，接口可以提供一个默认的方法实现，所有这个接口的实现类都会通过继承得到这个方法（如果有需要也可以重写这个方法） 1234567891011121314151617interface Defaulable &#123; //使用default关键字声明了一个默认方法 @SuppressLint("NewApi") default String myDefalutMethod() &#123; return "Default implementation"; &#125;&#125;class DefaultableImpl implements Defaulable &#123; //DefaultableImpl实现了Defaulable接口，没有对默认方法做任何修改&#125;class OverridableImpl implements Defaulable &#123; //OverridableImpl实现了Defaulable接口重写接口的默认实现，提供了自己的实现方法。 @Override public String myDefalutMethod() &#123; return "Overridden implementation"; &#125;&#125; b:接口里可以声明静态方法，并且可以实现 注意:Supplier 的使用,可看参考资料，在接口部分(java编程思想第四版第九章读书笔记 第十点)我们分别建一个工厂和一个产品接口类，然后实现，不同的工厂建立不同的产品，但是我们通过接口静态方法，将工厂的实现利用多态都写在一个接口内。 123456private interface DefaulableFactory &#123; // Interfaces now allow static methods static Defaulable create(Supplier&lt; Defaulable &gt; supplier ) &#123; return supplier.get(); &#125;&#125; a,b的调用 1234567public static void main( String[] args ) &#123; Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::new ); System.out.println( defaulable.myDefalutMethod() ); defaulable = DefaulableFactory.create( OverridableImpl::new ); System.out.println( defaulable.myDefalutMethod() );&#125; 9.为什么需要内部类 内部类继承自某个类或实现某个接口，内部类的代码操作创建它的外围类的对象。可以认为内部类提供了某种进入其外围类的窗口。 内部类最吸引人的原因是： 12内部类使得多重继承的解决方案变得完整。接口解决了部分问题，而内部类有效的实现了“多重继承”。也就是说，内部类允许继承多个非接口类型（类或抽样类）。（个人感觉一个外围类可以包含多个内部类，然后每个内部类通过多个方法分别return new baseClass1&#123;.......&#125;; return new baseClass2&#123;.......&#125;; return new baseClass3&#123;.......&#125;; 在调用时使用 outer.方法() 可以返回多重类型，作为函数的参数，达到“多重继承”的效果。）如果拥有的是抽象类或者具体的类，而非接口，那就只有内部类才能实现多重继承。 如果使用内部类，可以获得一些特别的特性： 1234内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外围类对象的信息相互独立。在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或继承同一个类。创建内部类对象的时刻并不依赖于外围类对象的创建。内部类没有令人迷惑的“is-a”关系，它就是一个独立的实体。 闭包与回调： 闭包是一个可调用的对象，它记录了一些信息，这些信息来自于创建它的作用域。内部类是面向对象的闭包。在此作用域内，内部类有权操作所有的成员，包括private成员。 继承两个类，含有同名方法，使用内部类可以避免覆盖。当创建一个内部类，没有在外围类接口中添加东西，也没有修改外围类接口。 通过回调，对象能够携带一些信息，这些信息允许它在稍后的某个时刻调用初始的对象。 回调的价值在于它的灵活性——可以在运行时动态的决定要调用什么方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package com.test.demo;interface Incrementable &#123; void increment();&#125;class Callee1 implements Incrementable &#123; private int i = 0; public void increment() &#123; i++; System.out.println(i); &#125;&#125;class MyIncrement &#123; public void increment() &#123;// 注意这里已经有了一个increment方法 System.out.println("\nOther operation"); &#125; static void f(MyIncrement mi) &#123; mi.increment(); &#125;&#125;//因为Callee2继承MyIncrement中已经又increment方法了//如果Callee2想要implements(实现) Incrementable//那么就需要使用内部类class Callee2 extends MyIncrement &#123; private int i = 0; public void increment() &#123; super.increment(); i++; System.err.println(i); &#125; private class ClosureDe implements Incrementable &#123; @Override public void increment() &#123; Callee2.this.increment();//这里调用外部类的increment方法 &#125; &#125; Incrementable getCallbackReference() &#123; return new ClosureDe(); &#125;&#125;class Caller &#123; private Incrementable callbackreference; public Caller(Incrementable inc) &#123; this.callbackreference = inc; &#125; void go() &#123; callbackreference.increment(); &#125;&#125;public class Closure &#123; public static void main(String[] args) &#123; Callee1 c1 = new Callee1(); Caller caller1 = new Caller(c1); caller1.go(); caller1.go(); Callee2 c2 = new Callee2(); MyIncrement.f(c2); Caller caller2 = new Caller(c2.getCallbackReference()); caller2.go(); caller2.go(); &#125;&#125; 内部类与控制框架: 应用程序框架就是被设计用以解决某类特定问题的一个类或者一组类。 模板方法是保持不变的事物，而可覆盖的方法就是变化的事物。 控制框架是一类特殊的应用程序框架，它用来解决响应事件的需求。主要用来响应事件的系统被称作事件驱动系统。 “变化向量”是各种不同的Event对象所具有的不同行为，通过创建不同的Event子类来表现不同的行为。 内部类允许： 12控制框架的完整实现是由单个类创建的，从而使得实现的细节被封装起来。内部类用来表示解决问题所必需的各种不同的action()。内部类可以很容易的访问外围类的任意成员，所以可以避免这种实现变得笨拙。 10.内部类的继承 1234567891011121314151617package com.test.demo;class WithInner &#123;class Inner &#123;&#125;&#125;public class InheritInner extends WithInner.Inner &#123; public InheritInner(WithInner wi) &#123; wi.super(); &#125;public InheritInner() &#123;new WithInner().super();&#125;public static void main(String[] args) &#123; WithInner wi = new WithInner(); InheritInner ii = new InheritInner(wi); &#125;&#125; 在继承内部类时如果继续使用默认构造器会报错,而且不能只传递一个指向外部类对象的引用。此时必须在构造器内使用如下语法： 1外部类对象.super(); 这样才提供了必要的引用，才可以编译通过 内部类可以被覆盖吗》当继承某个外部类时,内部类并没有发生什么变化。内部类是完全独立的两个实体，各自在自己的命名空间内 局部内部类》局部内部类不能有访问说明符,因为它不是外部类的一部分;但是它可以访问当前代码代码块中的常量，以及此外部类的所有成员 内部类标识符》内部类也会生成一个.class文件。这些文件的命名规则是:外部类的名字+“$”+内部类的名字；如果是匿名内部类编译器也会产生一个数字作为你其标识 参考资料 https://blog.csdn.net/severusyue/article/details/49444629 severusyue https://blog.csdn.net/sun_promise/article/details/51220518 莫若吻 https://my.oschina.net/0sbVMw/blog/535010 Solid]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第九章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F16%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E4%B9%9D%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的接口 正文 1.接口 接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法 2.抽象类和抽象方法 1public abstract void f(); 创建抽象类是希望通过这个通用接口操纵一系列类。如果一个类包含大于等于一个抽象方法，那么这个类就是抽象类，必须用abstract关键字来限定这个抽象类。 如果试图直接创建该抽象类的对象，编译器会报错。 如果抽象类的子类没有为基类的抽象方法提供定义，那么这个导出类依旧是抽象类。 抽象类也可以不包含任何抽象方法，单纯的用abstract限定类。（该类不能产生对象） 抽象类是很有用的重构工具，它可以使我们可以很容易的将公共方法沿着继承层次结构向上移动 3.接口 interface这个关键字替代class关键字，产生了一个完全抽象的类。接口只提供形式，未提供任何具体实现。 接口被用了建立类与类之间的协议。接口也可以包含域，但是这些域隐式的是static和final的。因此，其中定义的成员变量，是static&amp;final的。 implenments关键字可以跟一组接口，extends关键字只能跟一个基类。 接口中的方法必须是public的，隐式的被声明public的，如果要显示声明，它们也必须被声明为public的。否则在继承的过程中，可访问权限被降低，这是java编译器所不允许的。 4.完全解耦 策略设计模式：创建一个能够根据传递参数对象不同而具有不同行为的方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344package interfaces.classprocessor;import java.util.*;import static net.mindview.util.Print.*;class Processor &#123;public String name() &#123;return getClass().getSimpleName();&#125;Object process(Object input) &#123; return input; &#125;&#125;class Upcase extends Processor &#123;String process(Object input) &#123; // Covariant returnreturn ((String)input).toUpperCase();&#125;&#125;class Downcase extends Processor &#123;String process(Object input) &#123;return ((String)input).toLowerCase();&#125;&#125;class Splitter extends Processor &#123;String process(Object input) &#123;// The split() argument divides a String into pieces:return Arrays.toString(((String)input).split(" "));&#125;&#125;public class Apply &#123;public static void process(Processor p, Object s) &#123;print("Using Processor " + p.name());print(p.process(s));&#125;public static String s ="Disagreement with beliefs is by definition incorrect";public static void main(String[] args) &#123;process(new Upcase(), s);process(new Downcase(), s);process(new Splitter(), s);&#125;&#125; /* Output:Using Processor UpcaseDISAGREEMENT WITH BELIEFS IS BY DEFINITION INCORRECTUsing Processor Downcasedisagreement with beliefs is by definition incorrectUsing Processor Splitter[Disagreement, with, beliefs, is, by, definition, incorrect] 适配器设计模式:当一个类是第三方jar中，你无法修改，但是你想用这个类实现某些接口，可以利用适配器模式，新建一个类实现接口，并将不可修改的类作为它的属性，利用这个属性的方法来实现接口，调用的时候在外面包一层 1234567891011121314151617181920212223242526272829303132333435363738394041424344/* Solution includes, in same package:* package interfaces.interfaceprocessor;* public class StringMixer &#123;* static String process(String s) &#123;* char[] ca = new char[s.length()];* if((s.length())%2 == 0) &#123;* for(int i = 0; i &lt; s.length(); i += 2) &#123;* ca[i] = s.charAt(i + 1);* ca[i + 1] = s.charAt(i); * &#125; * return new String(ca);* &#125;* else &#123;* for(int i = 0; i &lt; s.length() - 1; i += 2) &#123;* ca[i] = s.charAt(i + 1);* ca[i + 1] = s.charAt(i); * &#125;* ca[s.length() - 1] = s.charAt(s.length() - 1); * return new String(ca);* &#125;* &#125; * &#125;*/// program takes command line String argument:package interfaces.interfaceprocessor;class StringMixerAdapter implements Processor &#123; public String name() &#123; return "StringMixerAdapter"; &#125; StringMixer stringMixer; public StringMixerAdapter(StringMixer stringMixer) &#123; this.stringMixer = stringMixer; &#125; public String process(Object input) &#123; return stringMixer.process((String)input); &#125; &#125;public class StringMixerProcessor &#123; public static void main(String[] args) &#123; String s = new String(args[0]); Apply.process(new StringMixerAdapter(new StringMixer()), s); &#125;&#125; 5.java中的多重继承 java没有任何与接口相关的存储，因此可以实现继承多个接口 使用接口的核心原因：1.为了能够向上转型为多个基本类型 2.顺带可以防止客户端程序员创建该类的对象，确保这是一个接口 java通过接口和内部类来达到多重继承的效果 6.通过继承扩展接口 extends只能用于单一类，但是接口继承时却可以引用多个接口，用逗号分开。 1interface Interface1 extends Interface2，Interface3&#123;&#125; 接口无法用implements来实现别的接口，必须用extends。 应该尽量避免组合的多个接口中包含相同方法名，这样会造成代码可读性的混乱。 7.适配接口 类的构造器接受一个接口，将希望使用该类的类都实现该接口，这样可以类就可以作用于更多的类型。比如Scanner类，想使用该类的类型 和策略模式的不同： 方法可以作用于不同的类型。 而适配器模式是，将接口作为类的构造器参数，子类传入这个类，就能调用这个类的方法 8、接口中的域 接口中的域是static&amp;final的，所以常量初始化值会用大写字母的风格。 package interfaces; public interface Months { int JANUARY = 1, FEBRUARY = 2, MARCH = 3, APRIL = 4, MAY = 5, JUNE = 6, JULY = 7, AUGUST = 8, SEPTEMBER = 9, OCTOBER = 10, NOVEMBER = 11, DECEMBER = 12; } 但是一般不这么做，在接口中定义常量，而是用enum关键字实现。 接口中定义的常量一定要初始化，不能出现空final，但是可以被非常量表达式初始化。 9.嵌套接口 嵌套在另一个接口中的接口自动是 public 的，而不能声明为 private 的. 嵌套在另一个类中的接口可以是 private 的，可以在内部实现成为一个 public 类，但是这个类不允许向上转型 当实现某个接口是，并不需要实现嵌套在其内部的任何借口，而且，private接口不能在定义它的类之外被实现。 10.接口与工厂 工厂设计模式： 在工厂对象上调用创建方法，该工厂对象将生成接口的某个实现对象。这样将代码与接口实现分离，这样使得我们可以透明的将某个实现替换成另一个实现。 1234567891011121314151617181920212223242526272829303132333435363738394041424344import static net.mindview.util.Print.*;interface Service &#123;void method1();void method2();&#125;interface ServiceFactory &#123;Service getService();&#125;class Implementation1 implements Service &#123;Implementation1() &#123;&#125; // Package accesspublic void method1() &#123;print("Implementation1 method1");&#125;public void method2() &#123;print("Implementation1 method2");&#125;&#125;class Implementation1Factory implements ServiceFactory &#123;public Service getService() &#123;return new Implementation1();&#125;&#125;class Implementation2 implements Service &#123;Implementation2() &#123;&#125; // Package accesspublic void method1() &#123;print("Implementation2 method1");&#125;public void method2() &#123;print("Implementation2 method2");&#125;&#125;class Implementation2Factory implements ServiceFactory &#123;public Service getService() &#123;return new Implementation2();&#125;&#125;public class Factories &#123;public static void serviceConsumer(ServiceFactory fact) &#123;Service s = fact.getService();s.method1();s.method2();&#125;public static void main(String[] args) &#123;serviceConsumer(new Implementation1Factory());// Implementations are completely interchangeable:serviceConsumer(new Implementation2Factory());&#125;&#125; /* Output:Implementation1 method1Implementation1 method2Implementation2 method1Implementation2 method2 对消费者传递一个工厂1对象，产生工厂1的产品，调用产品1的方法。 对消费者传递一个工厂2对象，产生工厂2的产品，调用产品2的方法。 总结： 确定接口是理想选择，因而应该总是选择接口而不是具体的类,对于创建类，几乎在任何时刻，都可以替代为创建一个工厂和一个接口 这其实是一种陷阱，变成了一种草率的设计优化，任何抽象性应该是真正的需求而产生的 参考资料 https://blog.csdn.net/severusyue/article/details/51766573 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第八章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F16%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%85%AB%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的多态 正文 1.多态 在面向对象的程序设计语言中，多态是继数据抽象和继承之后的第三种基本特征 “封装”通过合并特征和行为来创建新的数据类型。（合并成员函数和方法创建类） “多态”消除类型之间的耦合关系 多态也称做动态绑定，后期绑定或运行时绑定 2.在论向上转型 子类对象的引用向上转型为基类，传递到相应方法中 3.转机 将一个方法调用同一个方法主体关联起来被称作绑定。 程序执行前的绑定（由编译器和连接程序实现），称为前期绑定。 运行时根据对象的类型进行绑定，称为后期绑定，也称为动态绑定或运行时绑定。 Java中除了static方法和final方法（private属于final方法）外，其它所有方法都是动态绑定。 多态让程序员将“改变的事物与未改变的事物分离开来 注意:只有非private方法才能被覆盖，当然覆盖private类时，编译器不会报错。但是导出类和基类中的该同名方法，是两个不同的方法，向上转型为基类调用时，会调用基类的那个private的方法 静态方法是与类，而非单个对象关联的，因此不是多态的 任何域访问操作都有编译器解析，因此不是多态的 当Sub对象转型为Super使用时，任何域访问操作都将由编译器解析，因此不是多态的。（在包含相同成员变量时，子类包含两个域，基类和自己的，当要调用基类中该重名成员变量时，系统不会多态的自动的调用基类的该变量，需要显式的指明super.成员变量。） 4.构造器和多态 当有多重继承关系时，调用构造器顺序： 基类构造器 -&gt; 成员的初始化方法 -&gt; 子类构造器 完整:基类staitic–&gt;子类static–&gt;基类基本类型设为默认值0，对象引用被设为Null–&gt;基类构造器–&gt;子类基本类型设为默认值0，对象引用被设为Null–&gt;子类构造器 在销毁时，需要显式的调用基类的dispose()方法，销毁的顺序和初始化相反，包括字段的销毁顺序和申明的顺序相反。共享数据最后dispose()。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170/** * https://creambing.github.io Inc. * Copyright(c)2018-2025 All Rights Reserved. */package com.creambing.thinkinginjava.polymorphism;/** * Class Name: Share * Description: 清理，用来记录引用计数 * * author: CreamBing * time: 2019-01-11 14:32 * version: v1.0.0 */public class Share &#123; private int refcount = 0; private static long counter = 0; private final long id = ++counter; public Share() &#123; System.out.println("create"+this); &#125; public void addRef()&#123; refcount++; &#125; public int getRefcount() &#123; return refcount; &#125; protected void dispose()&#123; if(--refcount==0)&#123; System.out.println("dispose"+this); &#125; &#125; @Override public String toString() &#123; return "Share&#123;" + "refcount=" + refcount + ", id=" + id + '&#125;'; &#125; public static void main(String[] args) &#123; Share s1 = new Share(); Share s2 = new Share(); System.out.println("**********"); System.out.println(s1); System.out.println("************"); System.out.println(s2); &#125;&#125;/** * https://creambing.github.io Inc. * Copyright(c)2018-2025 All Rights Reserved. *///package com.creambing.thinkinginjava.polymorphism;/** * Class Name: Composing * Description: 共享类 * * author: CreamBing * time: 2019-01-11 14:42 * version: v1.0.0 */public class Composing &#123; private Share share; private static long count = 0; private final long id = ++count; public Composing(Share share) &#123; this.share = share; this.share.addRef(); System.out.println("create "+this); &#125; protected void dispose()&#123; System.out.println("dispose "+this); share.dispose(); &#125; @Override public String toString() &#123; return "Composing&#123;" + "share=" + share + ", id=" + id + '&#125;'; &#125;&#125;/** * https://creambing.github.io Inc. * Copyright(c)2018-2025 All Rights Reserved. *///package com.creambing.thinkinginjava.polymorphism;/** * Class Name: ReferenceCounting * Description: 对象引用计数 * &lt;p&gt; * author: CreamBing * time: 2019-01-11 14:48 * version: v1.0.0 */public class ReferenceCounting &#123; Share s1 = new Share(); Composing[] ca; public ReferenceCounting() &#123; this.ca = new Composing[]&#123;new Composing(s1), new Composing(s1), new Composing(s1)&#125;; &#125; @Override protected void finalize() throws Throwable &#123; if (s1.getRefcount() != 0) &#123; System.out.println("Composing没有清理干净，还有实例引用Share"); &#125; else &#123; System.out.println("Composing清理干净，开始垃圾回收"); super.finalize(); &#125; &#125; /** * createShare&#123;refcount=0, id=1&#125; * create Composing&#123;share=Share&#123;refcount=1, id=1&#125;, id=1&#125; * create Composing&#123;share=Share&#123;refcount=2, id=1&#125;, id=2&#125; * create Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=3&#125; * dispose Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=1&#125; * c[0] dispose * 开始强制垃圾回收 * ************************************* * dispose Composing&#123;share=Share&#123;refcount=2, id=1&#125;, id=2&#125; * dispose Composing&#123;share=Share&#123;refcount=1, id=1&#125;, id=3&#125; * disposeShare&#123;refcount=0, id=1&#125; * ca[1],ca[2]清理，所有Composing对象清理完毕 * 开始强制垃圾回收 * Composing清理干净，开始垃圾回收 * 注释掉********************************后面的东西 * createShare&#123;refcount=0, id=1&#125; * create Composing&#123;share=Share&#123;refcount=1, id=1&#125;, id=1&#125; * create Composing&#123;share=Share&#123;refcount=2, id=1&#125;, id=2&#125; * create Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=3&#125; * dispose Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=1&#125; * c[0] dispose * 开始强制垃圾回收 * ************************************* * Composing没有清理干净，还有实例引用Share * @param args */ public static void main(String[] args) &#123; ReferenceCounting r = new ReferenceCounting(); r.ca[0].dispose(); System.out.println("c[0] dispose"); System.out.println("开始强制垃圾回收"); System.runFinalizersOnExit(true); System.out.println("*************************************"); r.ca[1].dispose(); r.ca[2].dispose(); System.out.println("ca[1],ca[2]清理，所有Composing对象清理完毕"); System.out.println("开始强制垃圾回收"); System.runFinalizersOnExit(true); &#125;&#125; 上面Share类中的下列代码实现了引用计数,refcount记录其他类中对这个类对象的引用数，id记录这是这个类的第几个实例，counter记录了这个类工实例的几次 不过下面的实现虽然巧妙但是并不完美，因为counter的值还是可以通过反射进行修改，详情可见**EffectiveJava第三版第一条读书笔记** 123private int refcount = 0;private static long counter = 0;private final long id = ++counter; 构造器内部的多态方法的行为： 在初始化时，基类构造器中调用子类中覆盖的方法，此时子类的成员变量未赋值，如果此时对其操作可能会产生意想之外的结果。所以应该避免这样做。在构造器内唯一能够安全调用的事基类中的final方法。 编写构造器时一条有效的准则:用尽可能简单的方法使对象进入正常状态，如果可以的话，避免调用其它方法 5.协变返回类型 子类中被覆盖的方法可以返回基类方法所返回类型的子类，这样虽然返回值类型不同，但是也算覆盖。 6.用继承进行设计 组合更加灵活，首选组合 用继承表达行为间的差异，用字段表达状态上的变化 状态设计模式 创建一个基类的引用，通过方法改变其所指向的对象类型（子类们），调用相同的方法，行为产生变化。（调用了相应子类的方法）。 这样可以实现动态灵活性。 如下所示： 12345678910111213141516171819202122232425import static net.mindview.util.Print.*;class Actor &#123;public void act() &#123;&#125;&#125;class HappyActor extends Actor &#123;public void act() &#123; print("HappyActor"); &#125;&#125;class SadActor extends Actor &#123;public void act() &#123; print("SadActor"); &#125;&#125;class Stage &#123;private Actor actor = new HappyActor();public void change() &#123; actor = new SadActor(); &#125;public void performPlay() &#123; actor.act(); &#125;&#125;public class Transmogrify &#123;public static void main(String[] args) &#123;Stage stage = new Stage();stage.performPlay();stage.change();stage.performPlay();&#125;&#125; /* Output:HappyActorSadActor 对于子类扩展基类接口的情况，向上转型后不能调用子类的不同于基类的新方法。 这样需要用到向下转型，在Java中，所有的转型都会对其进行检查。称为“运行时类型识别”（RTTT）如果转型正确，则转型成功；如果所转类型不是正确的类型，则转型失败，返回ClassCastException异常。 父类引用可以指向子类对象，子类引用不可以指向父类对象 12345678910111213141516171819202122232425class Useful &#123;public void f() &#123;&#125;public void g() &#123;&#125;&#125;class MoreUseful extends Useful &#123;public void f() &#123;&#125;public void g() &#123;&#125;public void u() &#123;&#125;public void v() &#123;&#125;public void w() &#123;&#125;&#125;public class RTTI &#123;public static void main(String[] args) &#123;Useful[] x = &#123;new Useful(),new MoreUseful()&#125;;x[0].f();x[1].g();// Compile time: method not found in Useful://! x[1].u();((MoreUseful)x[1]).u(); // Downcast/RTTI((MoreUseful)x[0]).u(); // Exception thrown&#125;&#125; 参考资料 https://blog.csdn.net/severusyue/article/details/51721940 Java编程思想第四版读书笔记——第八章 多态 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EffectiveJava第三版第二条读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F14%2FEffectiveJava%E7%AC%AC%E4%B8%89%E7%89%88%E7%AC%AC%E4%BA%8C%E6%9D%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 自己java编程已有两年，自己也写过一些轮子，也在工作中针对自己以前写的代码重构过，但是距离那些优秀的类库总有一些差距，最近在看 Effective Java 第三版，书中总结甚为精辟，遂在阅读过程中逐条写下笔记，以指导自己更加有效的使用 java 编程语言及基本类库,涵盖部分jdk 7,8,9 的新特性 目的 Consider a builder when faced with many constructor parameters 遇到多个构造器参数时要考虑使用构建器 正文 例:用一个类表示包装食品外面显示的营养成分标签，其中有几个域是必须的 当有一个类需要多个参数的构造器，我们一般最开始考虑到的是重叠构造器 1234567891011121314151617181920212223242526272829303132333435363738394041424344// Telescoping constructor pattern - does not scale well! (Pages 10-11)不能很好的扩展public class NutritionFacts &#123; private final int servingSize; // (mL) required private final int servings; // (per container) required private final int calories; // (per serving) optional private final int fat; // (g/serving) optional private final int sodium; // (mg/serving) optional private final int carbohydrate; // (g/serving) optional public NutritionFacts(int servingSize, int servings) &#123; this(servingSize, servings, 0); &#125; public NutritionFacts(int servingSize, int servings, int calories) &#123; this(servingSize, servings, calories, 0); &#125; public NutritionFacts(int servingSize, int servings, int calories, int fat) &#123; this(servingSize, servings, calories, fat, 0); &#125; public NutritionFacts(int servingSize, int servings, int calories, int fat, int sodium) &#123; this(servingSize, servings, calories, fat, sodium, 0); &#125; public NutritionFacts(int servingSize, int servings, int calories, int fat, int sodium, int carbohydrate) &#123; this.servingSize = servingSize; this.servings = servings; this.calories = calories; this.fat = fat; this.sodium = sodium; this.carbohydrate = carbohydrate; &#125; public static void main(String[] args) &#123; //servingSize，servings,calories,fat,sodium,carbohydrate NutritionFacts cocaCola = new NutritionFacts(240, 8, 100, 0, 35, 27); &#125; &#125; 如上面 main 方法中的调用方法所示：假设我们需要设置 sodium 和 carbohydrate 的值，但是我们不想要设置 fat 的值，如上所见，所调用的构造器需要我们设置我们不想设置的参数，除非我们在编写一个构造器，内部用 set 方法初始化. 重叠构造器在有很多参数的时候，客户端代码会很难编写并且难以阅读，另外其本身也不能很好的扩展 那我们现在考虑更为普遍的一种方式: JavaBeans 12345678910111213141516171819202122232425262728// JavaBeans Pattern - allows inconsistency, mandates mutability (pages 11-12)允许不一致，强制要求可变性public class NutritionFacts &#123; // Parameters initialized to default values (if any) private int servingSize = -1; // Required; no default value private int servings = -1; // Required; no default value private int calories = 0; private int fat = 0; private int sodium = 0; private int carbohydrate = 0; public NutritionFacts() &#123; &#125; // Setters public void setServingSize(int val) &#123; servingSize = val; &#125; public void setServings(int val) &#123; servings = val; &#125; public void setCalories(int val) &#123; calories = val; &#125; public void setFat(int val) &#123; fat = val; &#125; public void setSodium(int val) &#123; sodium = val; &#125; public void setCarbohydrate(int val) &#123; carbohydrate = val; &#125; public static void main(String[] args) &#123; NutritionFacts cocaCola = new NutritionFacts(); cocaCola.setServingSize(240); cocaCola.setServings(8); cocaCola.setCalories(100); cocaCola.setSodium(35); cocaCola.setCarbohydrate(27); &#125;&#125; JavaBeans 方法的缺点： 12由于 JavaBeans 方式将构造过程分隔到了几个调用过程中，在构造过程中 JavaBeans 可能处于不一致的状态，无法仅仅通过检查构造器参数的有效性在保证一致性JavaBeans 模式使得把类做成不可变的可能性不复存在，也就是说可能存在线程安全问题 那么这里我们扩展一下 SpringMVC 中的单例模式，我们知道 controller -&gt; service -&gt; dao 这个流程，他们的对象都是单例的，想想一下这些单例的对象在处理我们传给后台的实体 bean 时会不会有问题了？如果一个张三带着正确密码在登陆的同时，一个李四在登陆，如果是单例并且状态可变，那么最后校验是张三和李四的密码导致他登陆失败？ 答：是不会有问题的，因为我们的实体bean是前台的json串反序列化，或者我们自己 new,然后拼装起来的，所以他并不是单例模式。另外这也说明单例模式中存在可变域可能导致线程不安全，因此 1.在 controller 类中不要定义非单例成员变量 2.万一必须要定义一个非静态成员变量时候，则通过注解@Scope(“prototype”)，将其设置为多例模式 另外上网查了下(未验证)了 JavaBeans 的反序列化的三种工具：fastJson JackJson 以及 Gson 123Gson是通过反射遍历该类中的所有属性，并把其值序列化成json三个工具类的序列化结果跟类的set方法没有关系。JackJson和FastJson序列化结果跟get方法有关系 第三种方法就是建造者模式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class NutritionFacts &#123; //必须域 private final int servingSize; //必须域 private final int servings; //卡路里 private final int calories; //脂肪 private final int fat; //钠 private final int sodium; //糖类 private final int carbohydrate; public static class Builder &#123; // Required parameters private final int servingSize; private final int servings; // Optional parameters - initialized to default values private int calories = 0; private int fat = 0; private int sodium = 0; private int carbohydrate = 0; //必须参数通过唯一构造器初始化 public Builder(int servingSize, int servings) &#123; this.servingSize = servingSize; this.servings = servings; &#125; public Builder calories(int val) &#123; calories = val; return this; &#125; public Builder fat(int val) &#123; fat = val; return this; &#125; public Builder sodium(int val) &#123; sodium = val; return this; &#125; public Builder carbohydrate(int val) &#123; carbohydrate = val; return this; &#125; public NutritionFacts build() &#123; return new NutritionFacts(this); &#125; &#125; private NutritionFacts(Builder builder) &#123; servingSize = builder.servingSize; servings = builder.servings; calories = builder.calories; fat = builder.fat; sodium = builder.sodium; carbohydrate = builder.carbohydrate; &#125; public static void main(String[] args) &#123; NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8) .calories(100).sodium(35).carbohydrate(27).build(); &#125;&#125; 从上面的链式调用可以发现，这样做确实比较优雅，但是他开销比较大。由于上面的这个建造器的属性都设置的final,所以在建造后就无法在修改了？这里有几个疑问？ 1.建造器模式是否只是应用于不可变类？ 2.假设我们要对建造器模式类中的一个属性值在建造后重新赋值，我们怎么做？将 final 去掉，提供 setter 方法吗？如果这样，它和静态内部类中的对应属性是否就不一致了，而且 api 混乱，导致初始化域的方法有两个？ 3.建造器模式的序列化和反序列化？还是上一个问题，静态内部类的属性和建造器内的属性是否需要保持一致，如果是利用 fastjson 的话，内部和外部都得提供 getter 方法，如此种种，感觉建造器模式还是适合工具类，不太适合 web 中的 javabeans,比如表单。尽管可能提供多个参数的构造方法 4.由建造器模式的链式调用想到 JavaBeans 的 setter 方法为什么不return this了，这样就可以链式调用了？ 比如 guava 中 Ordering 的链式调用 123456789101112131415161718192021222324252627282930313233343536373839/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.creambing;import com.google.common.collect.Ordering;import org.junit.Assert;import org.junit.Test;import java.util.Arrays;import java.util.Collections;import java.util.List;import static org.hamcrest.core.IsEqual.equalTo;/** * Class Name:BuilderModeTest * Description:建造者模式测试 * * @author Bing * @create 2019-01-14 16:05 * @version v1.0 */public class BuilderModeTest &#123; /** * 将空值放置在最前面的情况 */ @Test public void testOrderNaturalByNullFirst() &#123; List&lt;Integer&gt; list = Arrays.asList(1, 5, null, 3, 8, 2); Collections.sort(list, Ordering.natural().nullsFirst()); System.out.println("空在最前面-排序后" + list.toString()); Assert.assertThat(list.toString(),equalTo("[null, 1, 2, 3, 5, 8]")); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536类的定义public abstract class Ordering&lt;T&gt; implements Comparator&lt;T&gt; &#123;&#125;@GwtCompatible( serializable = true)final class NaturalOrdering extends Ordering&lt;Comparable&gt; implements Serializable &#123;&#125;@GwtCompatible( serializable = true)final class NullsFirstOrdering&lt;T&gt; extends Ordering&lt;T&gt; implements Serializable &#123;&#125;Ordering抽象类中的静态方法，返回他的子类NaturalOrdering的一个实例，这是个饿汉式不可变单例@GwtCompatible( serializable = true ) public static &lt;C extends Comparable&gt; Ordering&lt;C&gt; natural() &#123; return NaturalOrdering.INSTANCE; &#125;NaturalOrdering中的成员变量static final NaturalOrdering INSTANCE = new NaturalOrdering();Ordering抽象类中的一个公共方法@GwtCompatible( serializable = true ) public &lt;S extends T&gt; Ordering&lt;S&gt; nullsFirst() &#123; return new NullsFirstOrdering(this); &#125;NaturalOrdering中的重写了public &lt;S extends Comparable&gt; Ordering&lt;S&gt; nullsFirst() &#123; Ordering&lt;Comparable&gt; result = this.nullsFirst; if (result == null) &#123; result = this.nullsFirst = super.nullsFirst(); &#125; return result; &#125; 从上可以看到跟构造器关系不大，更符合第一点，用静态工厂方法代替构造器，基于接口编程，初始化返回其子类对象,接着在调基类接口方法 参考资料]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>EffectiveJava第三版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>EffectiveJava第三版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EffectiveJava第三版第一条读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F14%2FEffectiveJava%E7%AC%AC%E4%B8%89%E7%89%88%E7%AC%AC%E4%B8%80%E6%9D%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 自己java编程已有两年，自己也写过一些轮子，也在工作中针对自己以前写的代码重构过，但是距离那些优秀的类库总有一些差距，最近在看 Effective Java 第三版，书中总结甚为精辟，遂在阅读过程中逐条写下笔记，以指导自己更加有效的使用 java 编程语言及基本类库,涵盖部分jdk 7,8,9 的新特性 目的 Consider static factory methods instead of constructors 用静态工厂方法代替构造器 正文 思考 对于类而言，为了让客户端获取它自身的一个实例，最传统的方法就是提供一个公有的构造器，但同时，你是否应该考虑提供一个公有的静态工厂方法，来返回此类的实例的静态方法? 提供静态工厂方法的优势 12345* 它们有名字,比起构造方法的不同参数列表，静态工厂方法能提供有含义且带有参数的初始化方法* 不用每次被调用时都创建新对象，例如单例模式* 可以返回原返回类型的子类，设计模式中的基本的原则之一—— 『里氏替换』 原则，就是说子类应该能替换父类。这项技术用于基于接口的框架，例如Collections Framework API* 返回的对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值。例如EnumSet* 方法返回的对象所属的类，在编写包含该静态工厂方法的类时，可以不存在，构成了服务提供者框架(Service Provider Framework)例如 JDBC API 我们现在对每条优点来实践一下 1.它们有名字 假设我们有一个苹果类 (Appale.java) 它有三个属性:颜色(color)，重量(weight)和是否好吃(delicious) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.creambing.effectivejava;/** * Class Name:Apple * Description:静态工厂代替构造器 * * @author Bing * @create 2019-01-14 11:32 * @version v1.0 */public class Apple &#123; //设为final表示一旦建造成功不许修改 //这里不能设为final,因为final定义的要不在定义时候初始化，要不在构造器初始化 private Color color; private int weight;//单位为g private boolean delicious;//是否好吃 true:好吃，false:不好吃 private Apple() &#123; &#125; //作为例子讲解，本应注释掉 public Apple(Color color, int weight) &#123; this.color = color; this.weight = weight; &#125; //作为例子讲解，本应注释掉 public Apple(Color color, int weight, boolean delicious) &#123; this.color = color; this.weight = weight; this.delicious = delicious; &#125; public Color getColor() &#123; return color; &#125; public void setColor(Color color) &#123; this.color = color; &#125; public int getWeight() &#123; return weight; &#125; public void setWeight(int weight) &#123; this.weight = weight; &#125; public boolean isDelicious() &#123; return delicious; &#125; public void setDelicious(boolean delicious) &#123; this.delicious = delicious; &#125; //**********上面的是一个标准的 javabeans 除了将无参构造器设置为私有的********************************************* public static Apple newInstance()&#123; return new Apple(); &#125; public static Apple createRedDelicious()&#123; return Apple.newInstance().withColor(Color.RED).withDelicious(Boolean.TRUE); &#125; public static Apple createRedNoDelicious()&#123; return Apple.newInstance().withColor(Color.RED).withDelicious(Boolean.FALSE); &#125; //********************上面提供了三个静态工厂方法，很明显意义更加明确而且用户不会调用出错，封装性更好****************** //那这个跟set方法没什么区别了 public Apple withColor(Color c)&#123; this.color = c; return this; &#125; public Apple withWeight(int w)&#123; this.weight = w; return this; &#125; public Apple withDelicious(Boolean b)&#123; this.delicious = b; return this; &#125; //*******************为了不破坏 javabeans 规范，又达到链式调用的目的，新增的一系列 withxxx() 方法****************** @Override public String toString() &#123; return "Apple&#123;" + "color=" + color + ", weight=" + weight + '&#125;'; &#125; public enum Color&#123; RED,GREEN &#125; public static void main(String[] args) &#123; //设置一个5克的绿色苹果 Apple a = Apple.newInstance().withColor(Color.GREEN).withWeight(5); System.out.println(a); //设置一个好吃的红苹果,直接将好吃和不好吃封装到了api里面，通过函数名字表示，用户就很难调用错误的方法 Apple a1 = Apple.createRedDelicious(); //我不得不传一个重量的参数，虽然 0g 的红苹果现实没意义，但是如果是其它可选参数了，另外第三个参数我们也有可能写错，到底是ture好吃，还是false好吃，我们不得不去看api Apple a2 = new Apple(Color.RED,0,Boolean.TRUE); &#125;&#125; 类中的注释很好的说明了问题，另外调用时候的意义也更加明确 1234//设置一个好吃的红苹果,直接将好吃和不好吃封装到了api里面，通过函数名字表示，用户就很难调用错误的方法Apple a1 = Apple.createRedDelicious();//我不得不传一个重量的参数，虽然 0g 的红苹果现实没意义，但是如果是其它可选参数了，另外第三个参数我们也有可能写错，到底是ture好吃，还是false好吃，我们不得不去看apiApple a2 = new Apple(Color.RED,0,Boolean.TRUE); 2.单例模式 这里可以看一下之前在读java编程思想-类的访问权限的时候所做的笔记:java编程思想第四版第六章读书笔记 3.基于接口的框架 例如 jdk 中 java.util.Collections.java 类其中的很多方法就是返回类型是一个接口，其真正返回的是它的子类对象 123public static &lt;T&gt; Collection&lt;T&gt; unmodifiableCollection(Collection&lt;? extends T&gt; c) &#123; return new UnmodifiableCollection&lt;&gt;(c); &#125; 扩展:https://blog.csdn.net/cilen/article/details/7744969 Collections.unmodifiableList方法的使用与场景 4.返回的对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值 例如 jdk 中 EnumSet 的noneOf方法 123456789public static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(Class&lt;E&gt; elementType) &#123; Enum&lt;?&gt;[] universe = getUniverse(elementType); if (universe == null) throw new ClassCastException(elementType + &quot; not an enum&quot;); if (universe.length &lt;= 64) return new RegularEnumSet&lt;&gt;(elementType, universe); else return new JumboEnumSet&lt;&gt;(elementType, universe);&#125; 5.方法返回的对象所属的类，在编写包含该静态工厂方法的类时，可以不存在，构成了服务提供者框架(Service Provider Framework)例如 JDBC API TODO:等我看了相关api再来记录 提供静态工厂方法的缺点 12* .类如果不含有公有的或者受保护的构造器，就不能被子类化* .程序员很难发现它们 常用静态工厂方法的取名 1234567891011* from: 类型转化方法 * of: 聚合方法，带有多个参数，返回该类型的一个实例，把它们合并起来 * valueOf：该方法返回的实例与它的参数具有相同的 “值” 。 * getType：返回的类型是根据方法的参数来描述的，但是不能够说与参数具有相同的值。就像是针对类型的getInstance，但是在工厂方法处于不同的类中的时候使用 * newType：像newInstance一样，但是在工厂方法处于不同的类中的时候使用 * type: getType和newType的简版 * instance 或者 getInstance: 返回的实例是根据方法的参数来描述的，但是不能够说与参数具有相同的值。一般用来表示获取相同的实例，如单例模式，或根根参数获取不同的单例等。 * create 或者 newInstance：类似于getInstance。不同的是，一般用来表示获取新的实例，如Class#newInstance()方法等 * Class#newInstance()破坏了编译时的检查： * newInstance方法总是企图调用类的无参构造器。这个构造器甚至可能根本不存在，或者用户无访问权限，但编译期间你不会收到任何错误 * newInstance方法还会传播由无参构造器抛出的任何异常，即使newInstance缺乏相应的throws子句 梨子: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384/** * https://creambing.github.io Inc. * Copyright(c)2018-2025 All Rights Reserved. */package com.creambing.effectivejava3;import com.google.common.collect.Maps;import java.util.EnumSet;import java.util.HashMap;import java.util.Map;/** * Class Name: StaticFactory * Description: 考虑用静态工厂方法代替构造器 * 优势: * 它们有名字,比起构造方法的不同参数列表，静态工厂方法能提供有含义且带有参数的初始化方法 * 不用每次被调用时都创建新对象，例如单例模式 * 可以返回原返回类型的子类，设计模式中的基本的原则之一—— 『里氏替换』 原则，就是说子类应该能替换父类。这项技术用于基于接口的框架，例如Collections Framework API * 返回的对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值。例如EnumSet * 方法返回的对象所属的类，在编写包含该静态工厂方法的类时，可以不存在，构成了服务提供者框架(Service Provider Framework)例如 JDBC API * *缺点 * 1.类如果不含有公有的或者受保护的构造器，就不能被子类化 * 2.程序员很难发现它们 * * 静态工厂方法惯用名称： * from: 类型转化方法 * of: 聚合方法，带有多个参数，返回该类型的一个实例，把它们合并起来 * valueOf：该方法返回的实例与它的参数具有相同的 “值” 。 * getType：返回的类型是根据方法的参数来描述的，但是不能够说与参数具有相同的值。就像是针对类型的getInstance，但是在工厂方法处于不同的类中的时候使用 * newType：像newInstance一样，但是在工厂方法处于不同的类中的时候使用 * type: getType和newType的简版 * instance 或者 getInstance: 返回的实例是根据方法的参数来描述的，但是不能够说与参数具有相同的值。一般用来表示获取相同的实例，如单例模式，或根根参数获取不同的单例等。 * create 或者 newInstance：类似于getInstance。不同的是，一般用来表示获取新的实例，如Class#newInstance()方法等 * Class#newInstance()破坏了编译时的检查： * newInstance方法总是企图调用类的无参构造器。这个构造器甚至可能根本不存在，或者用户无访问权限，但编译期间你不会收到任何错误 * newInstance方法还会传播由无参构造器抛出的任何异常，即使newInstance缺乏相应的throws子句 * * author: CreamBing * time: 2019-01-13 14:53 * version: v1.0.0 */public class StaticFactory &#123; /** * 需要引入依赖 * &lt;dependency&gt; * &lt;groupId&gt;com.google.guava&lt;/groupId&gt; * &lt;artifactId&gt;guava&lt;/artifactId&gt; * &lt;version&gt;27.0.1-jre&lt;/version&gt; * &lt;/dependency&gt; * @param args */ public static void main(String[] args) &#123; //不过自从 java7 开始,由于泛型参数是可以被推导出，所以可以在创建实例时省略掉泛型参数。 Map&lt;String,String&gt; map = new HashMap&lt;&gt;(); //google guava类库 我们来看看别人类库是怎么封装的 /* public static &lt;K, V&gt; HashMap&lt;K, V&gt; newHashMap() &#123; return new HashMap(); &#125; */ Map&lt;String,String&gt; map1 = Maps.newHashMap(); /* * public static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(Class&lt;E&gt; elementType) &#123; Enum&lt;?&gt;[] universe = getUniverse(elementType); if (universe == null) throw new ClassCastException(elementType + " not an enum"); if (universe.length &lt;= 64) return new RegularEnumSet&lt;&gt;(elementType, universe); else return new JumboEnumSet&lt;&gt;(elementType, universe); &#125; * */ //jdk8内部实现,它返回两种子类之一的一个实例，取决于传入枚举类型的大小 EnumSet&lt;Season&gt; enumSet = EnumSet.of(Season.SUMMER, Season.WINTER); &#125; enum Season &#123; SPRING, SUMMER, FALL, WINTER &#125;&#125; 参考资料 https://blog.csdn.net/cilen/article/details/7744969 Collections.unmodifiableList方法的使用与场景 cilen]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>EffectiveJava第三版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>EffectiveJava第三版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第七章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F13%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E4%B8%83%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的复用类 正文 1.组合语法 满足has-a关系 在类中，创建一个其它类的对象，使用该对象的一些方法，对这个对象进行操作。 类中域为基本类型时能自动被初始化为0，对象引用会被初始化为Null。 初始化类中的引用，可以在四种情况下进行： 1、在定义对象的地方（在类的构造器调用之前就初始化了） 2、在类的构造器中 3、在需要使用这些对象之前（惰性初始化） 4、使用实例初始化 2.继承语法 使用继承我们一般认为导出类是一个或者像是一个，满足is-a或者is-like-a的关系，例如圆形是一个几何形 当创建一个导出类对象时，该对象包含了一个基类子对象。当初始化时，构造器的调用遵循由内到外的顺序，默认情况下调用基类的无参构造器，基类构造器都有参时，可以用super(“参数”)显式的调用基类构造器。 3.代理 代理和组合就是不满足继承关系，他们是包含关系，比如飞机包含控制系统 当一个类并不是另一个类的子类型，却要完全或部分用到另一个类的全部方法时，可以用代理。 在类Ship中创建另一个类的对象controls，然后构造所需要的全部方法，在方法里只需要使用相应的controls.方法。即可使用对象类的所有方法。 4.结合使用组合和继承 虽然编译器强制初始化基类，但是不强制初始化成员对象，所有在用组合的时候应该注意要自己初始化成员对象。 可以使用try finally强制对内存进行回收清理，自己编写函数回收内存，此时回收顺序是由外向内，最后使用super.dispose()回收基类内存。 Java中导出类重载某个基类方法，它并不会屏蔽其在基类中的任何版本，也就是在参数列表类型符合的情况下，基类中的该方法依旧可用。 @override是覆写关键字，如果添加这个注解而错误的重载（没有覆写）该方法，那么编译器会报错。 覆写（override）：函数名一样，返回值类型，参数列表类型都一样。子类函数的访问权限不能小于父类。 重载（overlode）：函数名一样，参数列表不一样，返回值类型可以相同也可以不同。 以上两种都是程序多态性的体现。 自己编写清理方法，不要使用finalize();1.可能永远不会调用，即使被调用也是按照他想要的顺序来回收 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155/** * Class Name: Share * Description: 清理，用来记录引用计数 * * author: CreamBing * time: 2019-01-11 14:32 * version: v1.0.0 */public class Share &#123; private int refcount = 0; private static long counter = 0; private final long id = ++counter; public Share() &#123; System.out.println("create"+this); &#125; public void addRef()&#123; refcount++; &#125; public int getRefcount() &#123; return refcount; &#125; protected void dispose()&#123; if(--refcount==0)&#123; System.out.println("dispose"+this); &#125; &#125; @Override public String toString() &#123; return "Share&#123;" + "refcount=" + refcount + ", id=" + id + '&#125;'; &#125; public static void main(String[] args) &#123; Share s1 = new Share(); Share s2 = new Share(); System.out.println("**********"); System.out.println(s1); System.out.println("************"); System.out.println(s2); &#125;&#125;/** * https://creambing.github.io Inc. * Copyright(c)2018-2025 All Rights Reserved. *//** * Class Name: Composing * Description: 共享类 * * author: CreamBing * time: 2019-01-11 14:42 * version: v1.0.0 */public class Composing &#123; private Share share; private static long count = 0; private final long id = ++count; public Composing(Share share) &#123; this.share = share; this.share.addRef(); System.out.println("create "+this); &#125; protected void dispose()&#123; System.out.println("dispose "+this); share.dispose(); &#125; @Override public String toString() &#123; return "Composing&#123;" + "share=" + share + ", id=" + id + '&#125;'; &#125;&#125;/** * Class Name: ReferenceCounting * Description: 对象引用计数 * &lt;p&gt; * author: CreamBing * time: 2019-01-11 14:48 * version: v1.0.0 */public class ReferenceCounting &#123; Share s1 = new Share(); Composing[] ca; public ReferenceCounting() &#123; this.ca = new Composing[]&#123;new Composing(s1), new Composing(s1), new Composing(s1)&#125;; &#125; @Override protected void finalize() throws Throwable &#123; if (s1.getRefcount() != 0) &#123; System.out.println("Composing没有清理干净，还有实例引用Share"); &#125; else &#123; System.out.println("Composing清理干净，开始垃圾回收"); super.finalize(); &#125; &#125; /** * createShare&#123;refcount=0, id=1&#125; * create Composing&#123;share=Share&#123;refcount=1, id=1&#125;, id=1&#125; * create Composing&#123;share=Share&#123;refcount=2, id=1&#125;, id=2&#125; * create Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=3&#125; * dispose Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=1&#125; * c[0] dispose * 开始强制垃圾回收 * ************************************* * dispose Composing&#123;share=Share&#123;refcount=2, id=1&#125;, id=2&#125; * dispose Composing&#123;share=Share&#123;refcount=1, id=1&#125;, id=3&#125; * disposeShare&#123;refcount=0, id=1&#125; * ca[1],ca[2]清理，所有Composing对象清理完毕 * 开始强制垃圾回收 * Composing清理干净，开始垃圾回收 * 注释掉********************************后面的东西 * createShare&#123;refcount=0, id=1&#125; * create Composing&#123;share=Share&#123;refcount=1, id=1&#125;, id=1&#125; * create Composing&#123;share=Share&#123;refcount=2, id=1&#125;, id=2&#125; * create Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=3&#125; * dispose Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=1&#125; * c[0] dispose * 开始强制垃圾回收 * ************************************* * Composing没有清理干净，还有实例引用Share * @param args */ public static void main(String[] args) &#123; ReferenceCounting r = new ReferenceCounting(); r.ca[0].dispose(); System.out.println("c[0] dispose"); System.out.println("开始强制垃圾回收"); System.runFinalizersOnExit(true); System.out.println("*************************************"); r.ca[1].dispose(); r.ca[2].dispose(); System.out.println("ca[1],ca[2]清理，所有Composing对象清理完毕"); System.out.println("开始强制垃圾回收"); System.runFinalizersOnExit(true); &#125;&#125; 5.在组合和继承之间选择 is-a 继承 hsa -a 组合 6.protected关键字 关键字protected表明，就类用户而言，它是private的，就继承自此类的导出类或者其它位于同一个包的类来说，它是可以访问的。 最好将域保持为private的，保留更改底层实现的权利。然后通过protected方法控制类的继承者的访问权限。 7.向上转型 将导出类转型成基类，继承要慎用，需要向上转型时，推荐使用继承。 向上转型会丢失方法和域 8.final关键字 final数据： 对于基本类型，final使数值恒定不变。对于对象的引用，final使引用恒定不变，但是对象自身是可以修改的。注意:数组也是一种引用。 带有恒定初值（即：编译期常量）的final static 基本类型全用大写命名，并且字与字之间用下划线隔开。 必须在域的定义处或者构造器中用表达式对final进行赋值，这真是final域在使用前总是初始化的原因。 final参数： 在函数参数列表中的final参数，在函数内无法修改它 f(final int i){ i++; } //非法 final方法： 使用场景： 1、把方法锁定，防止继承类修改，覆盖它。 2、提高效率。（逐渐淘汰） 类中所有的private方法都隐式地指定为final的。因为private方法无法被外界取用，所以并不算基类接口的一部分，所以尽管导出类含有相同名称的方法，但是互不干扰，也没有覆盖。 final类： 使用场景： 不可以作为基类被继承。 9.初始化及类的加载 类的代码在初次使用时才会被加载，通常是指加载发生在创建类的第一个对象之时，在访问static域或static方法时，也会发生加载。 注意，只要加载包含static方法的类，static初始化就会执行。注意子类创建对象调用构造器时基类构造器也会被调用，此时基类会被加载，基类的static将会被初始化。 基类staitic–&gt;子类static–&gt;基类基本类型设为默认值0，对象引用被设为Null–&gt;基类构造器–&gt;子类基本类型设为默认值0，对象引用被设为Null–&gt;子类构造器 总结 继承和组合都是从现有类型生成新类型，组合一般是将现有类型作为新类型的底层实现的一部分来加以复用，而继承复用的是接口，这对多态来说至关重要，所以分析一个系统的时候应该弄清楚那些是is-a,那些是has=a关系 参考资料 https://blog.csdn.net/severusyue/article/details/49274695 Java编程思想第四版读书笔记——第七章 复用类 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第六章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F13%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%85%AD%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的访问权限控制 正文 1.包:库单元 Java代码文件，也可以成为编译单元（有时也成为转译单元）。 编译单元内有一个public类，该类名称必须与文件名称相同。 每个编译单元只能有一个public类。 Java包命名规则是必须全是小写字母。 package和import将单一的全局名字空间分开，使得不会出现名称冲突问题。 想要使用某类，需要指定全名或者使用import关键字，import可以使用该包中的public类。 使用静态导入 import static可以在系统中使用包中静态的方法。 jdk5之前需要设置classpath,那是因为引入jar需要指定jar的具体目录，因为java编译需要调用javac,5之前依赖tools.jar，相当与&quot;javac -Calsspath=%JAVA_HOME%\lib\tools.jar xx.xxx.Main XXX.java&quot;所以需要设置，jdk5之后不建议设置classpath,设置javahome的原因也是方便命令的输入 2.Java访问权限修饰词 访问权限： 不加修饰词，就是包访问权限。包内所有其他类对那个成员都有访问权限。对包外类都是private。 取得某成员访问权限的唯一途径是： 1、该成员是public 2、不加权限修饰词并将其他类放在同一个包内，包内其它成员可访问此成员。 3、继承而来的类既可以访问public又可以访问protected。 4、通过访问器和变异器方法（get/set方法），以读取和改变值。 public:接口访问权限： 任何人都可以访问它。不同包里的都可以。 默认包： 对于隶属于相同目录却没有给自己设定任何包名称的文件，Java默认其为该目录的默认包里，这样它们之间的包访问权限可以使它们互相访问。 private:私有 除了包含该类成员的类（这个private成员在的类）之外，任何其他类都无法访问这个成员。 好处： 1、可以控制如何创建该对象，别人必须使用特定构造器创建，例如单例模式，如果默认构造器是唯一并且是自己定义的private构造器，那么它可以防止被继承 2、对于辅助方法，可以指定其为private，防止误用它 protected:继承访问权限 protected成员除了只能被派生类使用外，还提供包访问权限。 3.接口和实现 访问权限的控制常被称为具体实现的隐藏，这被便是“封装”。 4.类的访问权限 1、每个编译单元（文件）只能有一个public类 2、public类的名称必须与文件名相匹配，包括大小写. 类只能是public或者包访问权限的，除了内部类 单例模式的五种实现方式 1.饿汉式(线程安全，调用效率高，但是不能延时加载) 1234567public class ImageLoader&#123; private static ImageLoader instance = new ImageLoader(); private ImageLoader()&#123;&#125; public static ImageLoader getInstance()&#123; return instance; &#125; &#125; 上来就把单例对象创建出来了，要用的时候直接返回即可，这种可以说是单例模式中最简单的一种实现方式。但是问题也比较明显。单例在还没有使用到的时候，初始化就已经完成了。也就是说，如果程序从头到位都没用使用这个单例的话，单例的对象还是会创建。这就造成了不必要的资源浪费。所以不推荐这种实现方式。 2.懒汉式(线程安全，调用效率不高，但是能延时加载)： 12345678910111213141516public class SingletonDemo2 &#123; //类初始化时，不初始化这个对象(延时加载，真正用的时候再创建) private static SingletonDemo2 instance; //构造器私有化 private SingletonDemo2()&#123;&#125; //方法同步，调用效率低 public static synchronized SingletonDemo2 getInstance()&#123; if(instance==null)&#123; instance=new SingletonDemo2(); &#125; return instance; &#125;&#125; 3.Double CheckLock实现单例：DCL也就是双重锁判断机制（由于JVM底层模型原因，偶尔会出问题，不建议使用） 1234567891011121314151617public class SingletonDemo5 &#123; private volatile static SingletonDemo5 SingletonDemo5; private SingletonDemo5() &#123; &#125; public static SingletonDemo5 newInstance() &#123; if (SingletonDemo5 == null) &#123; synchronized (SingletonDemo5.class) &#123; if (SingletonDemo5 == null) &#123; SingletonDemo5 = new SingletonDemo5(); &#125; &#125; &#125; return SingletonDemo5; &#125; &#125; 4.静态内部类实现模式（线程安全，调用效率高，可以延时加载） 12345678910111213public class SingletonDemo3 &#123; private static class SingletonClassInstance&#123; private static final SingletonDemo3 instance=new SingletonDemo3(); &#125; private SingletonDemo3()&#123;&#125; public static SingletonDemo3 getInstance()&#123; return SingletonClassInstance.instance; &#125; &#125; 5.枚举类（线程安全，调用效率高，不能延时加载，可以天然的防止反射和反序列化调用） 123456789public enum SingletonDemo4 &#123; //枚举元素本身就是单例 INSTANCE; //添加自己需要的操作 public void singletonOperation()&#123; &#125;&#125; 如何选用： -单例对象 占用资源少，不需要延时加载，枚举 好于 饿汉 -单例对象 占用资源多，需要延时加载，静态内部类 好于 懒汉式 5.总结 控制对成员的访问有两个原因： 1、是用户不要去触碰不该触碰的部分 2、让库类设计者可以改变类内部工作的方式，而不必担心对客户端程序员产生重大影响。 参考资料 https://blog.csdn.net/severusyue/article/details/49175943?utm_source=blogxgwz1 Java编程思想第四版读书笔记——第六章 访问权限控制 severusyue https://www.cnblogs.com/ngy0217/p/9006716.html java单例模式几种实现方式 点点积累]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第五章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F11%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E4%BA%94%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的初始化和清理 正文 1.用构造器确保初始化 使用构造器（constructor），在创建对象时初始化。分为带参数的初始化和不带参数的初始化。 构造器初始化之前会先进行域的初始化，基本类型和String会被给予相应默认值 2.方法重载 类型提升（向上提升）：int — long — float — double byte — short — int char — int 窄化转换：和向上提升反过来，注意先考虑降到byte再考虑char 返回值是无法区分重载方法的 3.默认构造器 没有构造器的时候，系统会自动生成一个无参的默认构造器。如果写了构造器，就别指望系统生成了，所以如果写了带参构造器，就不能无参初始化了。 另外只有私有构造器，该类无法继承 4.this关键字 this关键字只能在方法内部使用，表示对“调用方法的那个对象”的引用。 尽管可以用this调用一个构造器，但不能调用两个。当在一个构造器中调用另一个构造器时，需要用到this关键字。并且置于最起始处 将自身传递到外部方法，必须用this关键字 1234567891011121314151617181920public class Peeler &#123; //需要把工具类写出来 static Apple peel(Apple apple)&#123; System.out.println("皮削了"); return apple; &#125;&#125;public class Apple &#123; Apple getPeeled()&#123; return Peeler.peel(this); &#125; public static void main(String[] args) &#123; Apple a = new Apple(); a.getPeeled(); &#125;&#125; 除构造器外，编译器禁止在其他任何方法中调用构造器。 static方法是没有this的方法。所以有些人认为static方法不是“面向对象”的，这个概念还是有争议的 5.清理：终结处理和垃圾回收 垃圾回收器只知道释放那些经由new分配的内存。 123对象可能不被垃圾回收。垃圾回收不等于“析构”。垃圾回收只与内存有关（使用垃圾回收器的唯一原因就是回收程序不再使用的内存）。 不应该将finalize()作为统一的清理方法，因为它可能不被执行，这是一个陷阱。 无论是“垃圾回收”还是“终结”，都不保证一定会发生。 finalize()还有一个有趣的用法，它并不依赖于每次都要对finalize()进行调用，这就是对象“终结条件”的验证。 System.gc() 用于强制进行终结动作。比如 强制进入finalize（随着程序的运行也许程序自己也会调用这个方法），当某个关系的标记量有异，打印出来。可供程序员找出程序代码尤其是创建对象时隐晦的缺陷。 垃圾回收器如何工作： Java虚拟机采用一种自适应的垃圾回收技术。 要是没有新垃圾及产生，就会转换到 &quot;标记——清扫&quot;工作模式。 &quot;标记——清扫&quot;所依据的思路同样是从堆栈和静态存储区出发，遍历所有的引用，进而找出存活的对象，给对象一个标记。全部标记工作完成后，清理动作才会开始。 “停止——复制”的回收动作不是在后台运行的，它发生时，程序将会被暂停。它将所有活对象从旧堆复制到新堆，然后再释放旧堆中的对象所占内存。 如果所有对象都很稳定，垃圾回收器的效率降低，就切换到“标记——清扫”方式，同样，Java虚拟机会追踪“标记——清扫”的效果，如果堆空间出现很多碎片，就会切换回“停止——复制”方式。 Java虚拟机中有很多附加技术提升速度，比如“即时”编译器技术。这种技术将程序全部或部分翻译成本地机器码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public class Practice11 &#123; @Override protected void finalize() throws Throwable &#123; System.out.println("我被清理了"); super.finalize(); &#125; /** * output * Try 1: * Try 2: * Try 3: * Try 4: * 我被清理了 * @param args */ public static void main(String[] args) &#123; Practice11 p = new Practice11(); System.out.println("Try 1: "); System.runFinalization(); System.out.println("Try 2: "); Runtime.getRuntime().runFinalization(); System.out.println("Try 3: "); System.gc(); System.out.println("Try 4: "); // using deprecated since 1.1 method: System.runFinalizersOnExit(true); &#125;&#125;//用于终结条件的判断public class Practice12 &#123; //默认true,满的 private boolean flag=true; public Practice12(boolean flag) &#123; this.flag = flag; &#125; @Override protected void finalize() throws Throwable &#123; if(flag)&#123; System.out.println("我是满的,我被清理了"); super.finalize(); &#125;else &#123; System.out.println("我不是满的,我不清理"); &#125; &#125; /** * output * true * false * 我不是满的,我不清理 * 我是满的,我被清理了 * @param args */ public static void main(String[] args)throws Exception &#123; Practice12 p = new Practice12(true); Practice12 p1 = new Practice12(false); System.runFinalizersOnExit(true); Thread.sleep(10000); //貌似会保证引用调用完被清理 System.out.println(p.flag); System.out.println(p1.flag); &#125;&#125; 6.成员的初始化 所有变量在使用前都能得到适当的初始化。对于函数局部变量，Java以编译错误的形式强制初始化。不初始化编译就不成功。下面是各类型基本数据的初始值 123456789 boolean false char [ ] byte 0 short 0 int 0 long 0 float 0.0 double 0.0 reference null 7.构造器的初始化 无法阻止自动初始化的进行，它将在构造器被调用之前发生。因此，编译器不会强制一定在构造器某个地方或者在使用它们之前对元素进行初始化——因为初始化早已得到了保证。 静态数据初始化： 静态数据只占用一份存储区域。静态初始化只有在必要时候进行。只有在第一个类型对象创建（或第一次访问静态数据）的时候，他们才会被初始化。此后，静态对象不会再被初始化。 初始化顺序： 静态对象（只一次）——&gt; 非静态对象——&gt;构造器 可以使用静态块的方式，对静态对象成员进行初始化，放在static关键字后面，如下： 123456public class Spoon &#123; static int i; static &#123; i = 47; &#125; &#125; 非静态实例初始化： 12345678910111213public class Mug &#123; Mug mug1; Mug mug2; &#123; mug1 = new Mug(1); mug2 = new Mug(2); System.out.println("mug1 &amp; mug2 initialized"); &#125; Mug() &#123; &#125; Mug(int i) &#123; &#125;&#125; 如上，看起来比静态块少了个static关键字，它保证了每新建一个该类的对象，不论调用何种构造器，这些操作都会发生。实例初始化子句是发生在构造器之前执行.另外这种语法对于匿名内部类的初始化是必须的 8.数组初始化 注意数组的别名问题。 不确定在数组里需要多少个元素时，可以直接new。在运行时再创建。这里再提一下，数组元素中基本数据类型，数字和字符会被自动初始化为0，而布尔型会自动初始化为false。 Array.toString()方法属于java.util标准类库，它将产生一维数组的可打印版本。 试图使用数组中的空引用（null），则会在运行时产生异常。 可变参数列表(C通常称之为varags)： 所谓可变参数列表，可以理解为函数的参数列表中某类型的数量是不确定的。这个特性是在JavaSE5之后添加的。 12345static void printArray(Object... args) &#123; for(Object obj : args) System.out.print(obj + &quot; &quot;); System.out.println(); &#125; 有了可变参数，就不用显示的编写数组语法了，当指定参数，编译器会自动填充数组。也就是输入一个列表，编译器会自动将其转化为数组，作为可变参数列表接受。 0个参数传递给可变参数列表是可行的，当局有可选的尾随参数时，这一特性就会很有用。 对于如下方法： 123456 static void f(int required, String... trailing) &#123; System.out.print(&quot;required: &quot; + required + &quot; &quot;); for(String s : trailing) System.out.print(s + &quot; &quot;); System.out.println(); &#125; f(0)是可以代入的，尽管并没有String类型参数。 getClass()方法属于Object的一部分，它将产生对象的类，并且在打印该类时，可以看到该类型的编码字符串。前导[表示int类型。 它是这样用的： 1234static void g(int... args) &#123; System.out.print(args.getClass()); System.out.println(&quot; length &quot; + args.length); &#125; 输出是这样的： 12345 class [Ljava.lang.Character; length 1 class [Ljava.lang.Character; length 0 class [I length 1 class [I length 0 int[]: class [I 可以在单一的参数列表中将类型混合在一起，而自动包装机制将有选择的将Int提升为Integer。可变参数列表使重载变得复杂，编译器无法知道应该调用哪种方法。因此应当总是只在重载的一个版本上使用可变参数列表，或者压根不用。 数组初始化的几种方式 12345678910111213141516171819202122基本数据类型 int[] a = new int[10];//创建大小为10的int数组并自动初始化为零 int[] a1 = &#123;1,2&#125;;//创建并初始化 int[] a2 = new int[]&#123;1,2,4&#125;; int[] a3 = IntStream.of(1, 2, 3, 4, 5).toArray(); Arrays.stream(a).forEach(System.out::print); System.out.println(); Arrays.stream(a1).forEach(System.out::print); System.out.println(); Arrays.stream(a2).forEach(System.out::print); System.out.println();//对于包装类型 Integer[] b1 = &#123;1,2&#125;;//创建并初始化 Integer[] b2 = new Integer[]&#123;1,2,4&#125;; Integer[] b3 = Stream.of(1, 2, 3, 4, 5).toArray(Integer[]::new); //nullnullnullnullnullnullnullnullnullnull Integer[] b4 = new Integer[10]; //试图使用数组中的空引用，空指针异常 if(b4[0]==0)&#123; System.out.println(&quot;b4[0]==0&quot;); &#125; Stream.of(b4).forEach(System.out::print); 9.枚举类型 ava SE5添加了enum关键字 （枚举类型的实例都是常量，因此都用大写字母表示，如果有多个单词，就用下划线隔开。） 创建一个枚举类型： 123public enum Spiciness &#123; NOT,MILD,MEDIUM,HOT,FLAMING &#125; 创建enum实例： Spiciness howHot = Spiciness.MEDIUM; enum的一些特性： toString() 函数可以方便的显示某个实例的名字。 ordinal() 函数可以显示某个特定enum常量的申明顺序。 static values() 函数可以按照enum常量的申明顺序构成相应数组。 枚举类型可以配合switch case使用。 参考资料 https://blog.csdn.net/severusyue/article/details/48633599 Java编程思想第四版读书笔记——第五章 初始化与清理 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第四章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F10%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾，这一章主要讲解了java的控制执行流程 正文 1.true和false Java不允许我们将一个数字作为布尔值使用，虽然这在C和C++里是允许的（在这些语句里，“真”是非零，“假”是零） 2.break和continue break用于强行退出循环，不执行循环中剩余的语句，只能跳出一层循环。而continue则停止执行当前的迭代（不执行本次循环的后续代码），然后退回循环起始处，开始下一次迭代。 3.臭名昭著的goto 不提倡使用goto，会给程序带来毁灭性灾害。 break和continue配合标签使用，效果更佳。 12345一般continue会返回最内层循环的开头（顶部），并继续执行。带标签的continue会达到标签的位置，并重新进入紧接在那个标签后面的循环。一般break会中断并跳出当前循环。带标签的break会中断并跳出标签所指的循环。在Java里需要使用标签的唯一理由就是因为有循 在Java里需要使用标签的唯一理由就是因为有循环嵌套存在，从而想从多层嵌套中break或continue。 4.switch switch中的选择因子必须是int或者char那样的整数值 参考资料 https://blog.csdn.net/severusyue/article/details/48632345?utm_source=blogxgwz5 Java编程思想第四版读书笔记——第四章 控制执行流程 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版前三章读书笔记]]></title>
    <url>%2Fblog%2F2019%2F01%2F08%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E5%89%8D%E4%B8%89%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的 整理知识点，方便以后回顾 正文 第一章 对象导论 1.抽象过程: 万物皆对象； 程序是对象的集合，它们通过发送消息来告知彼此所要做的； 每个对象都有自己的由其它对象构成的存储。 每个对象都有其类型，每个对象都是某个类的一个实例（instance）; 某一特定类型的所有对象都可以接受同样的消息。 2.每个对象都有一个接口 每个对象都只能满足某些请求，这些请求是由对象的接口（interface）所定义的，决定接口的便是类型。 3.每个对象都提供服务 将对象看做服务者可以提高对象的内聚性。高内聚性是软件设计的基本质量要求之一，可以将一个拥有很多功能的对象拆分成多个各司其职的对象。 4.被隐藏的具体实现 为什么要进行访问控制？ （1）让客户端程序员无法触及他们不该触及的部分——这些部分对于内部操作是必须的，但不是用户解决特定问题所需要的接口的一部分。减少客户端程序员需要考虑的东西，忽略不重要的东西。 （2）允许库设计者可以改变内部的工作方式而不用担心会影响到客户端程序员 5.复用具体实现 复用对象： （1）直接使用该类的对象； （2）创建一个成员对象； 使用现有的类合成新的类，称为“组合”，如果组合是动态发生的，则称为“聚合”。 在创建新类时，优先考虑组合，再考虑继承。 上面的关系可以解读如下: 123456(关联)Association：A类有B类有逻辑上的连接(聚合)Aggregation : A类有一个B类(组合)Composition : A类拥有一个B类(依赖)Dependency : A类使用了B类(继承)Inheritance : B类是一个A类 (或者B类扩展A类)(实现)Realization : B类实现了接口A 6.继承 导出类和基类具有相同的类型即一个圆也是一个几何形 有两种方法可以使基类和导出类产生差异 12直接在导出类中添加新方法，这些新方法并不是基类接口的一部分，应该考虑的是基类是否应该具备这些方法另一种更重要的使基类和导出类之间产生差异的方法是改变现有基类的方法，称为覆盖 “是一个”和“像是一个”的关系 如果继承只覆盖基类的方法，意味着导出类和基类是完全相同的类型，他们具有完全相同的接口，这被称为纯粹替代。某种意义上，是继承的理想方式，为is-a关系 如果继承在导出类必须添加新的接口元素，扩展了接口，这种替代并不完美，为is-like-a(像是一个)关系 7.伴随多态的可交互对象 将导出类看做它的基类的过程称为向上转型。 方法可以在不知道对象的实际类型时，做出正确的行为。 后期绑定 8.单根继承结构 除了C以外的所有OOP语言，所有类最终都继承自单一的基类。这个终极基类即Object; 单根继承使所有对象都具有统一的接口，给编程带来了更大的灵活性。 垃圾回收器的实现变的容易许多。 C如果这样，优点：额外的灵活性; 缺点：需要构建自己的继承体系，不兼容 9.容器 不同的容器提供了不同类型的接口和外部行; 不同的容器对于某些操作具有不同的效率 为了避免向下转型为错误的类型，因此有了参数化类型机制，参数化类型就是一个编译器可以自动定制用于特定类型上的类。 10.对象的创建和生命周期 对象的创建 C++认为效率控制是最重要的议题，在堆栈或者静态存储区域创建对象。 Java在创建对象的时候可以不用知道对象的确切数量，生命周期和类型。 Java完全采用了动态内存分配的方式。它认为对象变得复杂后，查找和释放存储空间的开销就不那么那么重要了。提高灵活性，牺牲了时间。 对象的生命周期 Java提供了“垃圾回收器”机制，可以自动发现对象何时不再被使用，继而销毁它。 垃圾回收器可以避免内存溢出的问题。 11.异常处理：处理错误 异常是一种对象，它从出错地点被“抛出”，并被专门设计用来处理特定类型错误的相应的异常处理器“捕获”。 异常不能忽略，所以它保证一定会在某处得到处理。它提供了一种从错误状况进行可靠恢复的路径。异常处理不是面向对象的特征。 12.并发编程 使用线程，但是可能遇到一个隐患，就是共享资源的问题。 某个任务锁定某项资源，完成其任务，然后释放资源锁，使其它任务可以使用这项资源。 13.Java与Internet 客户/服务器系统的核心思想是：系统具有一个中央信息存储池，用来存储某种数据，它通常位于数据库中，你可以根据需要将它分发给某些人员或机器集群。 信息存储池、用于分发信息的软件以及消息与软件所驻留的机器或机群被称为服务器; 第二章 一切都是对象 1.用引用操作对象 字符串可以用带引号的文本初始化 2.必须由你创建所有对象 (1) 寄存器。这是最快的保存区域，因为它位于和其他所有保存方式不同的 地方：处理器内部。然而，寄存器的数量十分有限，所以寄存器是根据需要由编 译器分配。我们对此没有直接的控制权，也不可能在自己的程序里找到寄存器存 在的任何踪迹。 (2) 堆栈。驻留于常规 RAM（随机访问存储器）区域，但可通过它的“堆栈 指针”获得处理的直接支持。堆栈指针若向下移，会创建新的内存；若向上移， 则会释放那些内存。这是一种特别快、特别有效的数据保存方式，仅次于寄存器。 创建程序时，Java 编译器必须准确地知道堆栈内保存的所有数据的“长度”以 及“存在时间”。这是由于它必须生成相应的代码，以便向上和向下移动指针。 这一限制无疑影响了程序的灵活性，所以尽管有些 Java 数据要保存在堆栈里— —特别是对象句柄，但 Java 对象并不放到其中。 (3) 堆。一种常规用途的内存池（也在 RAM 区域），其中保存了 Java 对象。 和堆栈不同，“内存堆”或“堆”（Heap）最吸引人的地方在于编译器不必知道 要从堆里分配多少存储空间，也不必知道存储的数据要在堆里停留多长的时间。 因此，用堆保存数据时会得到更大的灵活性。要求创建一个对象时，只需用 new 命令编制相关的代码即可。执行这些代码时，会在堆里自动进行数据的保存。当 然，为达到这种灵活性，必然会付出一定的代价：在堆里分配存储空间时会花掉 更长的时间！ (4) 静态存储。这儿的“静态”（Static）是指“位于固定位置”（尽管也在 RAM 里）。程序运行期间，静态存储的数据将随时等候调用。可用 static 关键字 指出一个对象的特定元素是静态的。但 Java 对象本身永远都不会置入静态存储 空间。 (5) 常数存储。常数值通常直接置于程序代码内部。这样做是安全的，因为 它们永远都不会改变。有的常数需要严格地保护，所以可考虑将它们置入只读存 储器（ROM）。 (6) 非 RAM 存储。若数据完全独立于一个程序之外，则程序不运行时仍可 存在，并在程序的控制范围之外。其中两个最主要的例子便是“流式对象”和“固 定对象”。对于流式对象，对象会变成字节流，通常会发给另一台机器。而对于 固定对象，对象保存在磁盘中。即使程序中止运行，它们仍可保持自己的状态不 变。对于这些类型的数据存储，一个特别有用的技巧就是它们能存在于其他媒体 中。一旦需要，甚至能将它们恢复成普通的、基于 RAM 的对象。Java 1.1 提供 了对 Lightweight persistence 的支持。未来的版本甚至可能提供更完整的方案 特殊情况：主要类型 有一系列类需特别对待；可将它们想象成“基本”、“主要”或者“主” （Primitive）类型，进行程序设计时要频繁用到它们。之所以要特别对待，是由 于用 new 创建对象（特别是小的、简单的变量）并不是非常有效，因为 new 将 对象置于“堆”里。所以对于这些主要类型，Java 采纳了与 C 和 C++相同的方法。也就 是说，不是用 new 创建变量，而是创建一个并非句柄的“自动”变量。这个变 量容纳了具体的值，并置于堆栈中，能够更高效地存取。 Java 决定了每种主要类型的大小。就象在大多数语言里那样，这些大小并 不随着机器结构的变化而变化。这种大小的不可更改正是 Java 程序具有很强移 植能力的原因之一。 3.特例:基本类型 主类型 大小 最小值 最大值 封装器类型 boolean 1 位 - - Boolean char 16 位 Unicode 0 Unicode 2的16次方-1 Character byte 8 位 -128 +127 Byte short 16 位 -2的15次方 +2的 15 次方-1 Short int 32 位 -2的31次方 +2的 31 次方-1 Integer long 64 位 -2的63次方 +2的 63 次方-1 Long float 32 位 IEEE754 IEEE754 Float double 64 位 IEEE754 IEEE754 Double float有一个符号位+8个指数位+23个尾数位 阶码的范围是-126～127 -126-23 即最小值为2的-149次方 最大值(2-2的-23次方)*2的127次方 Float.MIN_VALUE = 1.4e-45f Float.MAX_VALUE = 3.4028235e+38f double一样 1+11+52 解码的范围 -1022-1023 -1022-52 即最小值为2的-1074次方 最大值(2-2的-52)*2的1023次方 为什么java中对于float和double定义的最小值都是正数，而不是-Float.MAX_VALUE了？ 因为他们不是连续的，它们有精度，无法表示整个实数，最小值也是趋近于零，float无法表示-Float.MIN_VALUE和Float.MIN_VALUE之间的值，如果最小值用-Float.MAX_VALUE是不严谨的 高精度数字 Java 1.1 增加了两个类，用于进行高精度的计算：BigInteger 和 BigDecimal。 尽管它们大致可以划分为“封装器”类型，但两者都没有对应的“主类型”。 这两个类都有自己特殊的“方法”，对应于我们针对主类型执行的操作。也 就是说，能对 int 或 float 做的事情，对 BigInteger 和 BigDecimal 一样可以做。 只是必须使用方法调用，不能使用运算符。此外，由于牵涉更多，所以运算速度 会慢一些。我们牺牲了速度，但换来了精度。 BigInteger 支持任意精度的整数。也就是说，我们可精确表示任意大小的整 数值，同时在运算过程中不会丢失任何信息。 BigDecimal 支持任意精度的定点数字。例如，可用它进行精确的币值计算。 至于调用这两个类时可选用的构建器和方法，请自行参考联机帮助文档 4.Java 的数组 在 C++里，应尽量不要使用数组，换用标准模板库（Standard TemplateLibrary）里更安全的容器。 而一个 Java 可以保证被初始化，而且不可在它的范 围之外访问。由于系统自动进行范围检查，所以必然要付出一些代价：针对每个 数组，以及在运行期间对索引的校验，都会造成少量的内存开销。但由此换回的 是更高的安全性，以及更高的工作效率。为此付出少许代价是值得的。 创建对象数组时，实际创建的是一个句柄数组。而且每个句柄都会自动初始 化成一个特殊值，并带有自己的关键字：null（空）。一旦 Java 看到 null，就知 道该句柄并未指向一个对象。正式使用前，必须为每个句柄都分配一个对象。若 试图使用依然为 null 的一个句柄，就会在运行期报告问题。因此，典型的数组错 误在 Java 里就得到了避免。 也可以创建主类型数组。同样地，编译器能够担保对它的初始化，因为会将 那个数组的内存划分成零。 5.作用域 对于在作用域里 定义的名字，作用域同时决定了它的“可见性”以及“存在时间”。在 C，C++ 和 Java 里，作用域是由花括号的位置决定的 12345678910 &#123; int x = 12; /* only x available */ &#123; int q = 96; /* both x &amp; q available */ &#125; /* only x available */ /* q “out of scope” */&#125; 注意尽管在 C 和 C++里是合法的，但在 Java 里不能象下面这样书写代码： 1234567 &#123; int x = 12; &#123; int x = 96; /* illegal */ &#125;&#125; 编译器会认为变量 x 已被定义。所以 C 和 C++能将一个变量“隐藏”在一 个更大的作用域里。但这种做法在 Java 里是不允许的，因为 Java 的设计者认 为这样做使程序产生了混淆。 对象的作用域 Java 对象不具备与主类型一样的存在时间。用 new 关键字创建一个 Java 对象的时候，它会超出作用域的范围之外 123&#123;String s = new String(&quot;a string&quot;);&#125; /* 作用域的终点 */ 那么句柄 s 会在作用域的终点处消失。然而，s 指向的 String 对象依然占据 着内存空间。在上面这段代码里，我们没有办法访问对象，因为指向它的唯一一 个句柄已超出了作用域的边界。在后面的章节里，大家还会继续学习如何在程序 运行期间传递和复制对象句柄。 6.新建数据类型：类 定义一个类时（我们在 Java 里的全部工作就是定义类、制作那些类的对象 以及将消息发给那些对象），可在自己的类里设置两种类型的元素：数据成员（有 时也叫“字段”）以及成员函数（通常叫“方法”）。其中，数据成员是一种对象 （通过它的句柄与其通信），可以为任何类型。它也可以是主类型（并不是句柄） 之一 7.主成员的默认值 若某个主数据类型属于一个类成员，那么即使不明确（显式）进行初始化， 也可以保证它们获得一个默认值。 主类型 默认值 Boolean false Char ‘\u0000’(null) byte (byte)0 short (short)0 int 0 long 0L float 0.0f double 0.0d 一旦将变量作为类成员使用，就要特别注意由 Java 分配的默认值。这样做 可保证主类型的成员变量肯定得到了初始化（C不具备这一功能），可有效遏 止多种相关的编程错误。 然而，这种保证却并不适用于“局部”变量——那些变量并非一个类的字段。 所以，假若在一个函数定义中写入下述代码： int x; 那么 x 会得到一些随机值（这与 C 和 C是一样的），不会自动初始化成零。 我们责任是在正式使用 x 前分配一个适当的值。如果忘记，就会得到一条编译期 错误，告诉我们变量可能尚未初始化。这种处理正是 Java 优于 C的表现之一。 许多 C编译器会对变量未初始化发出警告，但在 Java 里却是错误。 8: 方法、自变量和返回值 迄今为止，我们一直用“函数”（Function）这个词指代一个已命名的子例程。 但在 Java 里，更常用的一个词却是“方法”（Method），代表“完成某事的途径”。 尽管它们表达的实际是同一个意思，但从现在开始，本书将一直使用“方法”， 而不是“函数”。 Java 的“方法”决定了一个对象能够接收的消息。 Java 的方法只能作为类的一部分创建。只能针对某个对象调用一个方法(正如马上就要学到的那样，“静态”方法可针对类调用，毋需一个对象) int x = a.f(); 象这样调用一个方法的行动通常叫作“向对象发送一条消息”。在上面的例 子中，消息是 f()，而对象是 a。面向对象的程序设计通常简单地归纳为“向对象 发送消息”。 正如在 Java 其他地方处理对象时一样，我们实际传递的是“句柄”（注释④）。 ④：对于前面提及的“特殊”数据类型 boolean，char，byte，short，int， long，，float 以及 double 来说是一个例外。但在传递对象时，通常都是指传递指 向对象的句柄。 9：使用其他组件 用 import 关键字准确告诉 Java 编译器我们希望的类是什么。import 的作用是 指示编译器导入一个“包”——或者说一个“类库”（在其他语言里，可将“库” 想象成一系列函数、数据以及类的集合。但请记住，Java 的所有代码都必须写 入一个类中）。 1import java.util.Vector; 它的作用是告诉编译器我们想使用 Java 的 Vector 类。然而，util 包含了数 量众多的类，我们有时希望使用其中的几个，同时不想全部明确地声明它们。为 达到这个目的，可使用“*”通配符。如下所示： 123456789101112131415161718192021222324252627282930313233343536373839import java.util.*;``` 需导入一系列类时，采用的通常是这个办法。应尽量避免一个一个地导入类#### 10:static 关键字通常，我们创建类时会指出那个类的对象的外观与行为。除非用 new 创建那 个类的一个对象，否则实际上并未得到任何东西。只有执行了 new 后，才会正 式生成数据存储空间，并可使用相应的方法。但在两种特殊的情形下，上述方法并不堪用。一种情形是只想用一个存储区 域来保存一个特定的数据——无论要创建多少个对象，甚至根本不创建对象。另 一种情形是我们需要一个特殊的方法，它没有与这个类的任何对象关联。也就是 说，即使没有创建对象，也需要一个能调用的方法。为满足这两方面的要求，可 使用 static（静态）关键字。一旦将什么东西设为 static，数据或方法就不会同 那个类的任何对象实例联系到一起当然，在正式使用前，由于static 方法不需要创建任何对象，所以它们不可简单地调用其他那些成员，同时不引用 一个已命名的对象，从而直接访问非 static 成员或方法（因为非 static 成员和方 法必须同一个特定的对象关联到一起）。&lt;font color=&quot;#eb4d4b&quot;&gt;尽管是“静态”的，但只要应用于一个数据成员，就会明确改变数据的创建 方式（一个类一个成员，以及每个对象一个非静态成员）。若应用于一个方法， 就没有那么戏剧化了。对方法来说，static 一项重要的用途就是帮助我们在不必 创建对象的前提下调用那个方法。正如以后会看到的那样，这一点是至关重要的 ——特别是在定义程序运行入口方法 main()的时候。 和其他任何方法一样，static 方法也能创建自己类型的命名对象。所以经常 把 static 方法作为一个“领头羊”使用，用它生成一系列自己类型的“实例”。&lt;/font&gt;## 第三章 操作符#### 1.使用Java操作符几乎所有Java操作符都只能操作“基本类型”，例外的是“=”，“==”和“!=”String类型支持“+”和“+=”#### 2.赋值对象的赋值其实是将“引用”赋值到另一个地方。如 c = d;那么c和d都指向原本只有d指向的对象。下面这个小例子挺好的t2赋给t1后，并非是互相独立桥归桥路归路。而是绑定在一起共同操作同一个对象。这种特殊的现象称为“别名现象”。#### 3.算术操作符整数除法后直接去掉小数位，而非四舍五入的结果。Random类对象#### 4.关系操作符==和!= 比较的是对象的引用。```javapublic class Equivalence &#123;public static void main(String[] args) &#123;Integer n1 = new Integer(47);Integer n2 = new Integer(47);System.out.println(n1 == n2);System.out.println(n1 != n2);&#125;&#125; /* Output:falsetrue 需要比较对象的实际内容使用equals()，此方法不适合基本类型。 然而，对于自定义类，需要比较对象的内容时，还需要覆盖equals()方法 5.逻辑操作符 与&amp;&amp;，或||，非！ 在使用逻辑操作符时，会遇到短路现象，即 boolean a =（2&gt;1）&amp;&amp; (3&lt;1) &amp;&amp; (5&gt;2) &amp;&amp; (9&gt;3); 在计算到(3&gt;1)为false时，后续两个式子就不再计算，结果a = false不会再改变 5.直接常量 直接常量后缀表明了它的类型，大写（或小写）L，表示long，大写（或小写）F，表示float，大写D，表示double 如： long n3 = 200; float f4 = 1r-43f; 十六进制 0x(0X) + 0~f 八进制 0+0~7 将变量初始化的超出表示范围，编译器会报错。 通过使用Integer和Long的toBinaryString()方法，可以轻松又随意的以二进制形式表示。 Java的指数计数法中，e表示10的幂次而非自然数2,.71那个e： float = 1.39e-43f; 表示1.39*10^(-43) 6.直接常量 与&amp;，或|，非~，异或^ &amp;=，!=，^=。然而并没有=，因为是一元操作符。 对于布尔值，按位操作符具有与逻辑操作符相同效果，但是它们不会中途短路。 7.移位操作符 左移位操作符（&lt;&lt;），低位补0。 “有符号”右移位操作符（&gt;&gt;），高位补0，符号保留。 “无符号”右移位操作符（&gt;&gt;&gt;），无论正负，高位补0。 char，byte，short移位前会被转换为int类型，得到结果也是int类型，只有右端低5位有效。（int类型只有32位）。 因此无符号右移时，它们会被先转成Int型，然后右移操作，然后截断，赋值给原来的类型，在这种情况下可能导致-1的结果。 8.类型转换操作符 可以对变量或者数值进行类型转换（cast）。 如果执行窄化转换，数据可能会丢失，编译器会觉得是不是我们搞错了没注意到，此时需要显式的进行类型转换，强调一下。执行扩展转换，则不必显式的进行类型转换。 float和double转化为整型值时，总会对该数字执行截尾。 对于基本数据类型进行算术运算或按位运算，只要类型比int小，在运算前这些书会自动转换成int，即会自动执行数据类型提升。 表达式中出现最大的数据类型决定了表达式最终的数据类型。 参考资料 https://my.oschina.net/jackieyeah/blog/224265 UML类图中的六大关系：关联、聚合、组合、依赖、继承、实现 JackieYeah https://www.cnblogs.com/yanquan/p/7248933.html 《THINKING IN JAVA》–第二章一切都是对象 延泉 https://blog.csdn.net/severusyue/article/details/48576589 Java编程思想第四版读书笔记——第三章 操作符 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>java</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[回溯与递归]]></title>
    <url>%2Fblog%2F2019%2F01%2F07%2F%E5%9B%9E%E6%BA%AF%E4%B8%8E%E9%80%92%E5%BD%92%2F</url>
    <content type="text"><![CDATA[前言 最近在leetcode刷题，对于平常不是很清楚的一些数据结构和算法重新回顾和巩固一遍 目的 了解回溯和递归的区别，另外弄清楚回溯的特点和应用场景 正文 回溯和递归的区别和联系 12递归:递归是一种算法结构,函数调用本身,最直接的递归应用就是计算连续数的阶乘，计算规律：n!=(n-1)!*n，还有汉诺塔的实现回溯:在按某种搜索策略搜索的过程中，当到达某一状态时，继续向前搜索已经确定不会得到正确答案的情况下，可以返回上一搜索状态，沿着新的可能性继续搜索。其求解过程的实质是一个先序遍历一棵“状态树”的过程 两者之间的联系:回溯多用递归实现 回溯的特点 123搜索策略:符合递归算法，问题解决可以化为子问题，算法类似，规模减小;控制策略:当遇到失败的搜索状态，需要返回上一状态，沿另外的路径搜索;数据结构:一般用数组保存搜索过程中的状态、路径。 选择回溯的前提 123选择：对于每个特定的解，肯定是由一步步构建而来的，而每一步怎么构建，肯定都是有限个选择，要怎么选择，这个要知道；同时，在编程时候要定下，优先或合法的每一步选择的顺序，一般是通过多个if或者for循环来排列条件：对于每个特定的解的某一步，他必然要符合某个解要求符合的条件，如果不符合条件，就要回溯，其实回溯也就是递归调用的返回结束：当到达一个特定结束条件时候，就认为这个一步步构建的解是符合要求的解了。把解存下来或者打印出来。对于这一步来说，有时候也可以另外写一个issolution函数来进行判断。注意，当到达第三步后，有时候还需要构建一个数据结构，把符合要求的解存起来，便于当得到所有解后，把解空间输出来。这个数据结构必须是全局的，作为参数之一传递给递归函数 回溯参数的设计 1234必须要有一个临时变量(可以就直接传递一个字面量或者常量进去)传递不完整的解，因为每一步选择后，暂时还没构成完整的解，这个时候这个选择的不完整解，也要想办法传递给递归函数。也就是，把每次递归的不同情况传递给递归调用的函数。可以有一个全局变量，用来存储完整的每个解，一般是个集合容器（也不一定要有这样一个变量，因为每次符合结束条件，不完整解就是完整解了，直接打印即可）。最重要的一点，一定要在参数设计中，可以得到结束条件。一个选择是可以传递一个量n，也许是数组的长度，也许是数量，等等。要保证递归函数返回后，状态可以恢复到递归前，以此达到真正回溯。 扩展 #784 LetterCasePermutation 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.creambing.leetcode.backtracking;import java.util.LinkedList;import java.util.List;/** * Class Name:LetterCasePermutation784 * Description:字母大小写全排列 * * @author Bing * @create 2019-01-07 20:52 * @version v1.0 */public class LetterCasePermutation784 &#123; public List&lt;String&gt; letterCasePermutation(String S) &#123; //全局的结果集合，作为回溯入参，保存完整结果 List&lt;String&gt; result = new LinkedList&lt;&gt;(); //开始回溯，这里选用字符数组，方便遍历以及替换字符，同时还可以连接成完整结果 backtracking(S.toCharArray(), 0, result); return result; &#125; private void backtracking(char[] s, int pos, List&lt;String&gt; result) &#123; result.add(new String(s)); for (int j = pos; j &lt; s.length; j++) &#123; char ch = s[j]; if (Character.isAlphabetic(ch)) &#123; s[j] = flip(ch); backtracking(s, j+1, result); s[j]= ch; &#125; &#125; &#125; private char flip(char ch)&#123; return Character.isUpperCase(ch)? Character.toLowerCase(ch):Character.toUpperCase(ch); &#125; public static void main(String[] args) &#123; String s ="ab14c"; new LetterCasePermutation784().letterCasePermutation(s).forEach(System.out::println); &#125;&#125; 思路根据上面的对于回溯的理解设计参数，我们从最简单的情景来设计程序，假设串是a,那么结果就是a,A,那么这个最简单的逻辑是什么了？先把当前串写入集合中，把第i个字母大小转换(数字不管)就是下面这段,要注意的是:要保证递归函数返回后，状态可以恢复到递归前，以此达到真正回溯,因此注释的那段很重要，要加上，否则回溯会有问题 1234567891011121314public class LetterCasePermutation784 &#123; private void backtracking(char[] s, int pos, List&lt;String&gt; result) &#123; result.add(new String(s)); for (int j = pos; j &lt; s.length; j++) &#123; char ch = s[j]; if (Character.isAlphabetic(ch)) &#123; s[j] = flip(ch); backtracking(s, j+1, result); //s[j]= ch; &#125; &#125; &#125;&#125; 运行结果截图 运行流程分析 Runtime: 10 ms, faster than 45.47% of Java online submissions for Letter Case Permutation. #401 BinaryWatch(二进制手表) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.creambing.leetcode.backtracking;import java.util.ArrayList;import java.util.List;/** * Class Name:BinaryWatch401 * Description:二进制手表 * * @author Bing * @version v1.0 * @create 2019-01-08 19:00 */public class BinaryWatch401 &#123; public List&lt;String&gt; readBinaryWatch(int num) &#123; int[] hoursc = &#123;1, 2, 4, 8&#125;; int[] minutec = &#123;1, 2, 4, 8, 16, 32&#125;; List&lt;String&gt; result = new ArrayList&lt;&gt;(); //我们想给了n个灯亮，那么我们正常就是先在hour中选，然后在minute中选，差不多想到下面这种逻辑 List&lt;Integer&gt; hourList = new ArrayList&lt;&gt;(); List&lt;Integer&gt; minuteList = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; num; i++) &#123; //这里面关于最后一个回溯参数先前没有考虑，getHour中i=0开始遍历的，这里设置参数的原因是选过了就不能再选了 getHour(i, hourList, 0, hoursc, 0); getMinu(num - i, minuteList, 0, minutec, 0); for (int hour : hourList) &#123; for (int minu : minuteList) &#123; result.add(hour+":"+(minu&lt;10?"0"+minu:minu)); &#125; &#125; //这里一定要清空 hourList.clear(); minuteList.clear(); &#125; return result; &#125; private void getHour(int n, List&lt;Integer&gt; hourList, int hour, int[] hoursc, int index) &#123; //这段可以不加，但是为了效率，加上 if (n &lt; 0) &#123; return; &#125; if (n == 0 &amp;&amp; hour &lt; 12) &#123; hourList.add(hour); &#125; for (int i = index; i &lt; hoursc.length; i++) &#123; getHour(n - 1, hourList, hour + hoursc[i], hoursc, i + 1); &#125; &#125; private void getMinu(int n, List&lt;Integer&gt; minuList, int minu, int[] minuc, int index) &#123; if (n &lt; 0) &#123; return; &#125; if (n == 0 &amp;&amp; minu &lt; 60) &#123; minuList.add(minu); &#125; for (int i = index; i &lt; minuc.length; i++) &#123; getMinu(n - 1, minuList, minu + minuc[i], minuc, i + 1); &#125; &#125;&#125; 这里拿到题目之后，感觉可以用回溯发，开始设计回溯参数 1.最开始的时候没有设计最后一个参数，for循环中i=0而不是index,这样导致选了之后在选，重复了，这里我们没有恢复状态，因为我们也没有改变状态，我们只是遍历取合适的值 2.另外一个小问题是组合的时候需要清空列表 Runtime: 3 ms, faster than 56.44% of Java online submissions for Binary Watch. 其他需要回溯方法解决的leetcode题目:https://leetcode.com/tag/backtracking/ 参考资料 1.https://www.jianshu.com/p/4c5ccac18fac 递归2-回溯与递归 偏偏注定要落脚丶 2.https://blog.csdn.net/u014772862/article/details/51789015 回溯和递归区别 繁拾简忆 3.https://blog.csdn.net/sinat_27908213/article/details/80599460 回溯算法超通俗易懂详尽分析和例题 littlelufisher]]></content>
      <categories>
        <category>算法</category>
        <category>回溯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7在线安装docker]]></title>
    <url>%2Fblog%2F2018%2F11%2F30%2Fcentos7%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85docker%2F</url>
    <content type="text"><![CDATA[前言 在线在centos7安装docker 目的 CentOS Linux release 7.5.1804 (Core) docker-ce.x86_64 3:18.09.0-3.el7 正文 1.确认系统是否是centos7，内核在3.10以上 123uname -r或者cat /etc/redhat-release 2.执行如下命令安装 在root用户下，或者在sudo执行 123456789yum install -y yum-utils \ device-mapper-persistent-data \ lvm2yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce 在第一次执行安装命令时，无法解析远程仓库，此时用浏览器访问了一下,确认可以访问，于是再次执行，安装成功，这说明这个网站针对国内不够稳定，最后下载的时候确实显示速度也比较慢 所以这里可以切换成阿里的源 http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 3.启动并验证 12systemctl start docker.servicedocker run hello-world 4.centos7以下安装docker的方式 一.什么是epel? 如果既想获得 RHEL 的高质量、高性能、高可靠性，又需要方便易用(关键是免费)的软件包更新功能，那么 Fedora Project 推出的 EPEL(Extra Packages for Enterprise Linux)正好适合你。EPEL(http://fedoraproject.org/wiki/EPEL) 是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。 具体步骤链接:https://www.jianshu.com/p/4e74f11ee309,这个我没有亲自实验，想来应该可以，但是升级一大堆包毕竟感觉有点慌张，这里提供我之前的安装方式 通过epel安装已经行不通了，因为里面已经没有了docker-io的包了 2019/03/19实验可行 centos6最后支持的docker版本是1.7.1 123yum install https://get.docker.com/rpm/1.7.1/centos-6/RPMS/x86_64/docker-engine-1.7.1-1.el6.x86_64.rpmservice docker startdocker run hello-world docker1.7.1安装docker-compose 这里目前还是安装失败 参考资料 1.docker官方网站 [https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository] 2.各个操作系统安装docker社区版的官方网址 https://hub.docker.com/search/?type=edition&amp;offering=community 3.centos6.x安装docker http://icyleaf.com/2016/12/docker-with-centos/]]></content>
      <categories>
        <category>centos7</category>
        <category>docker</category>
        <category>在线</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>docker</tag>
        <tag>在线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker安装mangodb和redis]]></title>
    <url>%2Fblog%2F2018%2F11%2F29%2Fdocker%E5%AE%89%E8%A3%85mangodb%E5%92%8Credis%2F</url>
    <content type="text"><![CDATA[前言 在有docker环境和docker-compose的工具的机器上，快速搭建redis和mangodb的单机服务 目的 由于我在window上安装了docker,具体教程可看**windows上安装docker-ce**，以下命令都是在windows上操作 正文 安装redis 在cmd中执行以下命令下载redis镜像 1docker pull redis 在redis服务需要启动的目录中新建redis.yml文件，里面写入如下内容 1234567891011121314151617181920version: '3.1'services: redis: image: redis:latest container_name: redis hostname: redis restart: always networks: static-network: ipv4_address: 172.21.0.2 ports: - "16379:6379"networks: static-network: ipam: config: - subnet: 172.21.0.0/16 注意我们这里对于redis所在容器的ip进行了指定，当然也可以不用指定，可以服务开启后自己查看ip地址，另外容器ip不用172.21.0.1,不然会报错地址已被使用 进入redis.yml文件所在目录执行 1docker-compose -f redis.yml up -d 截图如下 利用redis-client客户端连接(客户端下载地址 https://redisdesktop.com/download) 这里在window下有个问题，就是我这里重新又定义了一个网络，我发现我不能ping通172.21.0.2这个容器ip，所以只能通过127.0.0.1:16379连接 不过之前定义的consuls的网络是可以ping通的,后来发现ping通的不是docker中的，而是电信网关连接的其他网络，我们现在将网络改为consuls桥接的网络看看 123456789101112131415161718version: '3.1'services: redis: image: redis:latest container_name: redis hostname: redis restart: always networks: consuls_static-network: ipv4_address: 172.20.0.5 ports: - "16379:6379"networks: consuls_static-network: external: true 这里只是展示一下docker-compose使用已有网络的写法，虽然改了能够ping通，但不是这个网络，这个和linux上有差别 linux上docker新建桥接网络，是可以互通的，但是windows上不行 我注意到docker 的setting中有network这个选项 然后我们查看一下window的路由链路 1route print 这里我们发现10.0.75.0/24的子网的网关为10.0.75.1和docker setting配置一样，正好对上了，但是并没有172.20.0.5的子网，虽然docker中已经有了，这也正说明windows上的docker和linux上的docker不一样，因为linux上只要新建了网络，就有链路了 所以我们这里新建一个匹配的桥接网络 1docker network create -d bridge --subnet=10.0.75.0/24 --gateway=10.0.75.1 usable_net 123456789101112131415161718192021222324version: '3.1'services: redis: image: redis:latest container_name: redis hostname: redis restart: always networks: usable_net: ipv4_address: 10.0.75.5 ports: - "16379:6379"networks: usable_net: external: true#或者如下networks: usable_net: ipam: config: - subnet: 10.0.75.0/24 结果我发现这样做之后redis都连接不上了，于是还原回去利用最开始的方法，自己自定义网络， 但是我们发现我们自定义的网络中连网关都没有 扩展 这部分是在Linux作为宿主机的测试，centos7在线安装docker + linux上安装docker-compose(centos7.5+docker18.09+docker-composev1.22.0) 因为可以ping通，所以我在linux宿主机上既可以通过本地的16379也可以用docker的ip(172.21.0.2)+6379访问，但是在windows上我只能用16379,因为docker机器我无法ping通 这里遗留了两个问题: 12windows上network配置有什么用？为什么windows作为宿主机无法ping通自定义桥接网络的容器ip? 但是我们还是无法ping通，我们手动添加路由试试 1route add 192.172.0.0 mask 255.255.0.0 192.168.5.105 https://download.studio3t.com/studio-3t/windows/2018.5.1/studio-3t-x64.zip 参考资料 1.docker-compose v3 [https://docs.docker.com/compose/compose-file/#ipv4_address-ipv6_address] 2.docker-compose networks [https://docs.docker.com/compose/networking/#configure-the-default-network]]]></content>
      <categories>
        <category>docker-compose</category>
        <category>mangodb</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
        <tag>mangodb</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs微服务集成consul]]></title>
    <url>%2Fblog%2F2018%2F11%2F23%2Fnodejs%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90consul%2F</url>
    <content type="text"><![CDATA[前言 **使用Sidecar来整合非jvm微服务**这篇文章讲解了非jvm集成到springcloud体系中的方法 需要说明的是上述方法是用Netflix的sidecar,然而它依赖Eureka作为服务发现组件，consul有自己的注册接口 目的 利用consul的http api将nodejs微服务注册到consul中 正文 js中有目前实现最为完备的Consul 客户端是node-consul 它支持的功能有 123456789ACL: 访问控制Agent: 检查/服务注册Health: 健康信息获取Catalog: 目录列表KV: 键值对存取Event: 发送事件与列表Query: 查询服务信息Status: Raft一致性的状态信息... 不过我目前就只需要当node程序启动时能将服务注册到consul中，关闭程序时能注销 我发现Consul-SDK实现了这一点 使用方法在nodejs工程目录下运行命令安装,当时安装的版本为1.1.9，其中依赖的consul(即node-consul)版本为0.27.0，当前最新为0.34.1 1npm i consul-sdk --save 在根目录下添加consul.json，check是我后面添加健康检查自己修改源码所加的配置 123456789101112&#123; "serverHost": "localhost", "serverPort": 18500, "secure": false, "name": "node-service", "host": "192.168.5.105", "port": 3000, "check":&#123; "http":"http://192.168.5.105:3000/health", "interval":"10s" &#125;&#125; 在app.js中引入consul-sdk 1require('consul-sdk'); 这样在项目启动和结束就会触发相应的注册和注销操作 由于我现在的consul服务器端版本是1.3.0，这个js版本的consul客户端版本是0.27.0，其中注销时报错405，get方法不被允许 需要修改consul源码包中service.js中注销逻辑中get方法为put方法，和注册一样 我们对比一下js版本的consul客户端和java版本的客户端(spring-cloud-starter-consul-discovery),在服务发现的功能上 12js实现了服务注册和注销，但是还没有健康检查，如果注销失败会出现下面截图中出现的事情，服务在consul上依然存在并且正常java实现了服务注册和健康检查，并没有服务注销(不知道是不是我没有配置) 其实node-consul是支持健康检查的，只不过consul-sdk不支持，但它是依赖node-consul来做的，我们把consul-sdk源码修改一下 其实consul-sdk是对consul的一层封装，作者用es5写的，可以借鉴思路自己改写 同时配置文件添加上面那一段check. 下面我们在我们之前实现的网关服务中**springcloud使用zuul聚合微服务**添加代码来调用一下node中的相关服务 添加服务类和控制类 1234567891011121314151617181920212223242526272829303132333435363738@Servicepublic class NodeRibbonService &#123; @Autowired RestTemplate restTemplate; @HystrixCommand(fallbackMethod = "fallback") public String getHealthInfo() &#123; return restTemplate.getForObject("http://node-service/health", String.class); &#125; public String fallback(Throwable throwable) &#123; System.out.println("node-service /health 报错:"+throwable); Map&lt;String, Object&gt; map = Maps.newHashMap(); map.put("status", "unkown"); return new Gson().toJson(map); &#125;&#125;@RestController@RequestMapping("/un")public class UserAndNodeController &#123; @Autowired UserRibbonService userRibbonService; @Autowired NodeRibbonService nodeRibbonService; @RequestMapping(value = "/getUserAndNodeHealth",method = RequestMethod.GET) public Map&lt;String, Object&gt; getUserAndNodeHealth()&#123; List&lt;User&gt; users = userRibbonService.getAllUsers1(); String s = nodeRibbonService.getHealthInfo(); Map&lt;String, Object&gt; map = Maps.newHashMap(); map.put("users",users); map.put("node",s); return map; &#125;&#125; 调用接口http://localhost:1051/un/getUserAndNodeHealth 关掉node服务，但是没有在consul上注销并且consul上显示node服务正常 利用上面修改源码程序退出成功在consul上注销后再调用 关掉node程序，增加健康检查后，但是在consul上不注销，此时consul上显示node服务不健康，调用该接口直接走hytrix,和java类似 参考资料 1.js版本的consul客户端 [https://github.com/silas/node-consul#agent-service-register] 2.Consul-SDK博客地址 [http://www.moye.me/2016/10/26/node-consul-sdk/] 3.consul-sdkgithub地址 [https://github.com/rockdragon/node-consul-sdk] 4.consul官网service的http api [https://www.consul.io/api/agent/service.html]]]></content>
      <categories>
        <category>nodejs</category>
        <category>consul</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Sidecar来整合非jvm微服务]]></title>
    <url>%2Fblog%2F2018%2F11%2F21%2F%E4%BD%BF%E7%94%A8Sidecar%E6%9D%A5%E6%95%B4%E5%90%88%E9%9D%9Ejvm%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[前言 由于语言多样，系统复杂，有时候一个健壮的系统可能是由多种语言组成的，针对一个非jvm的接口平台，我们可以利用sidecar整合进来 目的 利用zuul可以调用已经注册到注册中心的服务，利用sidecar调用非jvm的服务，这样就可以对外提供一个整合了jvm和非jvm的网关服务 正文 利用idea新建一个node项目 在idea中新建一个node工程，没有的话，先添加nodejs插件 编写node项目，添加health端点 在app.js中添加 123var healthRouter = require('./routes/health');app.use('/health', healthRouter); 在routes中添加health.js中添加如下 123456789var express = require('express');var router = express.Router();/* GET users listing. */router.get('/', function(req, res, next) &#123; res.send(JSON.stringify(&#123;"status":"UP"&#125;));&#125;);module.exports = router; 访问http://localhost:3000/health显示 编写java sidecar整合这个node服务 参考资料]]></content>
      <categories>
        <category>java</category>
        <category>springcloud</category>
        <category>sidecar</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>sidecar</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud使用zuul聚合微服务]]></title>
    <url>%2Fblog%2F2018%2F10%2F30%2Fspringcloud%E4%BD%BF%E7%94%A8zuul%E8%81%9A%E5%90%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[前言 1.springcloud编写用户微服务 2.springcloud编写电影微服务 3.springcloud集成网关ZUUL 依上面教程，我已经实现了用户，电影微服务以及zuul网关，微服务的设计难点之一在于对原有业务的拆分， 在我看来每个微服务职责要尽可能单一，但是这样同样也带来了一个问题，那就是微服务之间不可避免的一 些交集.例如终端需要查询用户信息和电影信息，这里有两种做法 1.让终端查询用户信息后在查询电影信息 2.网关层查询用户信息和电影信息，聚合后返回给终端 后一种方式显然更好一些，因为他节省了带宽，相较于终端两次请求网关，显然网关两次请求微服务的网络情况更好 目的 利用RXJAVA聚合微服务，这里面其实很多东西可以讨论，关于分布式协议和分布式事务,这次先简单的说明 一下查询聚合，因为查询是幂等操作，不需要事务 正文 工程初始化 可以参见这篇博客**springcloud集成网关ZUUL** 验证: http://localhost:1051/api/user/user/getAll http://localhost:1051/api/movie/movie/findOneById?id=2 集成feign,添加用户和电影的消费端 可以参见这篇博客**springcloud集成feign** 仿照user创建movie的feign客户端 1234567891011121314@FeignClient(name = &quot;consul-movie&quot;)public interface MovieFeignClient &#123; @RequestMapping(value = &quot;/movie/findOneById&quot;,method = RequestMethod.GET) Movie findOneById(@RequestParam(&quot;id&quot;) Long id);&#125;错误的写法@FeignClient(name = &quot;consul-movie&quot;)public interface MovieFeignClient &#123; @RequestMapping(value = &quot;/movie/findOneById&quot;,method = RequestMethod.GET) Movie findOneById(Long id);&#125; get多参数写法 12直接写Long id或者直接是User user这种对象，feign依然会用post方式调用，所以会报错接口不支持需要用@RequestParam(&quot;id&quot;)注解，或者@RequestParam Map&lt;String,Object&gt; map 扩展 20181031更新:zuul上的service中添加hystrix回退并没有执行，如下图，想着service中利用的是 feign实现的，所以给feign加上回退，需要在配置上加上feign.hystrix.enabled=true 123456789101112131415161718192021222324252627282930313233343536373839404142@FeignClient(name = "consul-movie",fallback = MovieFeignClient.MovieFeignClientFallBack.class)public interface MovieFeignClient &#123; @RequestMapping(value = "/movie/findOneById",method = RequestMethod.GET) Movie findOneById(@RequestParam("id") Long id); @Component class MovieFeignClientFallBack implements MovieFeignClient&#123; @Override public Movie findOneById(Long id) &#123; Movie movie = new Movie(); movie.setId(-1L); return movie; &#125; &#125;&#125;//加上日志的版本@FeignClient(name = "consul-movie",fallbackFactory = MovieFeignClient.MovieFeignClientFallBackFactory.class)public interface MovieFeignClient &#123; @RequestMapping(value = "/movie/findOneById",method = RequestMethod.GET) Movie findOneById(@RequestParam("id") Long id); @Component class MovieFeignClientFallBackFactory implements FallbackFactory&lt;MovieFeignClient&gt;&#123; private static final Logger LOGGER = LoggerFactory.getLogger(MovieFeignClientFallBackFactory.class); @Override public MovieFeignClient create(Throwable throwable) &#123; return new MovieFeignClient() &#123; @Override public Movie findOneById(Long id) &#123; LOGGER.error("MovieFeignClient findOneById fallback;reason was:[&#123;&#125;]",throwable); Movie movie = new Movie(); movie.setId(-1L); return movie; &#125; &#125;; &#125; &#125;&#125; 集成ribbon 添加一个配置类java 123456789@Componentpublic class RibbonConf &#123; @Bean @LoadBalanced public RestTemplate restTemplate()&#123; return new RestTemplate(); &#125;&#125; 添加ribbon调用服务类 123456789101112131415161718192021222324252627282930313233343536@Servicepublic class MovieRibbonService &#123; @Autowired private RestTemplate restTemplate; @HystrixCommand(fallbackMethod = "fallback") public Observable&lt;Movie&gt; findOneById(Long id) &#123; return Observable.create(observer -&gt; &#123; Movie movie = restTemplate.getForObject("http://consul-movie/movie/findOneById", Movie.class, id); observer.onNext(movie); observer.onComplete(); &#125;); &#125; public Observable&lt;Movie&gt; fallback(Long id) &#123; return Observable.create(observer -&gt; &#123; Movie movie = new Movie(); movie.setId(-1L); observer.onNext(movie); observer.onComplete(); &#125;); &#125; @HystrixCommand(fallbackMethod = "fallback1") public Movie findOneById1(Long id) &#123; return restTemplate.getForObject("http://consul-movie/movie/findOneById", Movie.class, id); &#125; public Movie fallback1(Long id,Throwable throwable) &#123; System.out.println("consul-movie /movie/findOneById 报错:"+throwable); Movie movie = new Movie(); movie.setId(-1L); return movie; &#125;&#125; 新建聚合controller和服务(RXjava) 针对feign实现的service,之前在上面截图中可以发现我在上面加了HystrixCommand没有用，所以去掉了，不知道是不是因为里面是feign实现的，所以下面会有ribbon实现 123456789101112131415161718192021222324252627282930313233343536/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.springcloud.consulzuulum.service.rxjava;import com.springcloud.consulzuulum.feign.movie.Movie;import com.springcloud.consulzuulum.feign.movie.MovieFeignClient;import io.reactivex.Observable;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;/** * Class Name:MovieService * Description:movie rxjava 服务类 * * @author Bing * @version v1.0 * @create 2018-10-30 22:01 */@Servicepublic class MovieService &#123; @Autowired MovieFeignClient movieFeignClient; public Observable&lt;Movie&gt; findOneById(Long id) &#123; return Observable.create(observer -&gt; &#123; Movie movie = movieFeignClient.findOneById(id); observer.onNext(movie); observer.onComplete(); &#125;); &#125;&#125; 控制类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.springcloud.consulzuulum.controller;import com.google.common.collect.Maps;import com.springcloud.consulzuulum.feign.movie.Movie;import com.springcloud.consulzuulum.feign.movie.MovieFeignClient;import com.springcloud.consulzuulum.feign.user.User;import com.springcloud.consulzuulum.feign.user.UserFeignClient;import com.springcloud.consulzuulum.service.rxjava.MovieService;import com.springcloud.consulzuulum.service.rxjava.UserService;import io.reactivex.Observable;import io.reactivex.Observer;import io.reactivex.disposables.Disposable;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.context.request.async.DeferredResult;import java.util.HashMap;import java.util.List;import java.util.Map;/** * Class Name:UserAndMovieController * Description:用户和电影聚合控制类 * * @author Bing * @version v1.0 * @create 2018-10-30 17:11 */@RestController@RequestMapping("/um")public class UserAndMovieController &#123; @Autowired UserFeignClient userFeignClient; @Autowired MovieFeignClient movieFeignClient; @Autowired UserService userService; @Autowired MovieService movieService; @RequestMapping(value = "/getUserAndMovie", method = RequestMethod.GET) Map&lt;String, Object&gt; getUserAndMovie(Long id) &#123; Long startTime = System.currentTimeMillis(); Map&lt;String, Object&gt; result = new HashMap&lt;&gt;(); //同步调用 List&lt;User&gt; users = userFeignClient.getAllUser(); Movie movie = movieFeignClient.findOneById(id); result.put("users", users); result.put("movie", movie); Long endTime = System.currentTimeMillis(); System.out.println("getUserAndMovie同步调用花费时间:"+(endTime-startTime)); return result; &#125; @RequestMapping(value = "/getUserAndMovieUseRx", method = RequestMethod.GET) DeferredResult&lt;HashMap&lt;String,Object&gt;&gt; getUserAndMovieUseRx(Long id) &#123; Long startTime = System.currentTimeMillis(); //rx异步调用 Observable&lt;HashMap&lt;String,Object&gt;&gt; observable = aggregateObservable(id); DeferredResult&lt;HashMap&lt;String,Object&gt;&gt; result = toDefer(observable); Long endTime = System.currentTimeMillis(); System.out.println("getUserAndMovieUseRx异步调用花费时间:"+(endTime-startTime)); return result; &#125; public Observable&lt;HashMap&lt;String,Object&gt;&gt; aggregateObservable(Long id)&#123; return Observable.zip( userService.getAllUsers(), movieService.findOneById(id), (users,movie) -&gt; &#123; HashMap&lt;String,Object&gt; map = Maps.newHashMap(); map.put("users",users); map.put("movie",movie); return map; &#125; ); &#125; public DeferredResult&lt;HashMap&lt;String,Object&gt;&gt; toDefer(Observable&lt;HashMap&lt;String,Object&gt;&gt; details)&#123; DeferredResult&lt;HashMap&lt;String, Object&gt;&gt; result = new DeferredResult&lt;&gt;(); details.subscribe(new Observer&lt;HashMap&lt;String, Object&gt;&gt;() &#123; @Override public void onSubscribe(Disposable disposable) &#123; System.out.println(""); &#125; @Override public void onNext(HashMap&lt;String, Object&gt; stringObjectHashMap) &#123; result.setResult(stringObjectHashMap); &#125; @Override public void onError(Throwable throwable) &#123; System.out.println("发生错误:"+throwable); &#125; @Override public void onComplete() &#123; System.out.println("完成"); &#125; &#125;); return result; &#125;&#125; 访问 feign http://localhost:1051/um/getUserAndMovieUseRx?id=1 hystrix有效 rxjava+ribbon http://localhost:1051/um/getUserAndMovieUseRibbon?id=1 hystrix无效 ribbon http://localhost:1051/um/getAllUserRibbon hystrix有效 ribbon http://localhost:1051/um/getUserAndMovieUseRibbon1?id=1 hystrix有效]]></content>
      <categories>
        <category>java</category>
        <category>springcloud</category>
        <category>zuul</category>
        <category>rxjava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>zuul</tag>
        <tag>rxjava</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud编写电影微服务]]></title>
    <url>%2Fblog%2F2018%2F10%2F30%2Fspringcloud%E7%BC%96%E5%86%99%E7%94%B5%E5%BD%B1%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[前言 1.springcloud Finchley.SR2版本 2.springboot 版本2.0.6.RELEASE 3.h2 4.jooq 5.consul 搭建一个电影微服务 目的 利用idea快速搭建一个springcloud集成上述功能的微服务，可以查询电影 正文 初始化工程 方法跟**springcloud编写用户微服务**中前期准备工程一般，勾选下列依赖 在resources文件夹下新增bootstrap.yml文件，写入以下内容 123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1018spring: application: #项目名称 name: consul-movie cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: consul-movie #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.150:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 初始化H2数据库 这时候决定手动初始化datasource,同时集成第三方数据库连接池进来，详情**springboot集成druid** 此时consul上的配置如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758spring: datasource: url: jdbc:h2:mem:test #url: jdbc:h2:file:~/.h2/testdb #url: jdbc:h2:~/testuser driverClassName: org.h2.Driver username: sa password: 123456 platform: h2 schema: classpath:db/schema.sql data: classpath:db/data.sql initialization-mode: always #springboot2.0加上上述sql才会执行 # 下面为druid连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 1 minIdle: 3 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 30000 validationQuery: select &apos;x&apos; testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计 filters: stat # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true h2: console: settings: web-allow-others: true #进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。 path: /h2-console #进行该配置，你就可以通过YOUR_URL/h2-console访问h2 web consloe。YOUR_URL是你程序的访问URl。 enabled: true #进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。#Actuator的健康检查开启所有包括health，info，metrics等management: endpoints: web: exposure: include: &quot;*&quot; #开启health端点详细检查 endpoint: health: show-details: alwayslogging: level: root: INFO org.hibernate: INFO org.hibernate.type.descriptor.sql.BasicBinder: TRACE org.hibernate.type.descriptor.sql.BasicExtractor: TRACE 根据配置在resources目录下，新增db文件夹，下面新增schema.sql和data.sql文件，内容分别如下 12345drop table movie if exists;create table movie (id bigint generated by default as identity ,movie_name varchar(40),score decimal(10,2),primary key (id));insert into movie (id,movie_name,score) values (1,&apos;肖申克的救赎&apos;,100.00);insert into movie (id,movie_name,score) values (2,&apos;这个杀手不太冷&apos;,101.00); 在pom中添加依赖druid 12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt; 在主程序平级目录新增db目录，新增DataSourceBean.java和DatasourceConf.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101@Configuration@Component@Datapublic class DataSourceBean &#123; private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceBean.class); @Autowired DatasourceConf datasourceConf; @Bean public DataSource getDataSource() &#123; DruidDataSource datasource = new DruidDataSource(); datasource.setUrl(datasourceConf.getUrl()); datasource.setUsername(datasourceConf.getUsername()); datasource.setPassword(datasourceConf.getPassword()); datasource.setDriverClassName(datasourceConf.getDriverClassName()); //configuration datasource.setInitialSize(datasourceConf.getInitialSize()); datasource.setMinIdle(datasourceConf.getMinIdle()); datasource.setMaxActive(datasourceConf.getMaxActive()); datasource.setMaxWait(datasourceConf.getMaxWait()); datasource.setTimeBetweenEvictionRunsMillis(datasourceConf.getTimeBetweenEvictionRunsMillis()); datasource.setMinEvictableIdleTimeMillis(datasourceConf.getMinEvictableIdleTimeMillis()); datasource.setValidationQuery(datasourceConf.getValidationQuery()); datasource.setTestWhileIdle(datasourceConf.getTestWhileIdle()); datasource.setTestOnBorrow(datasourceConf.getTestOnBorrow()); datasource.setTestOnReturn(datasourceConf.getTestOnReturn()); datasource.setPoolPreparedStatements(datasourceConf.getPoolPreparedStatements()); datasource.setMaxPoolPreparedStatementPerConnectionSize(datasourceConf.getMaxPoolPreparedStatementPerConnectionSize()); datasource.setUseGlobalDataSourceStat(datasourceConf.getUseGlobalDataSourceStat()); try &#123; datasource.setFilters(datasourceConf.getFilters()); &#125; catch (SQLException e) &#123; LOGGER.error(&quot;druid configuration initialization filter: &quot; + e); &#125; datasource.setConnectionProperties(datasourceConf.getConnectionProperties()); return datasource; &#125; /** * 配置监控服务器 * * @return 返回监控注册的servlet对象 */ @Bean public ServletRegistrationBean statViewServlet() &#123; ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;); // 添加IP白名单 servletRegistrationBean.addInitParameter(&quot;allow&quot;, &quot;192.168.14.32,127.0.0.1&quot;); // 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高 servletRegistrationBean.addInitParameter(&quot;deny&quot;, &quot;192.168.14.32&quot;); // 添加控制台管理用户 servletRegistrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;druid&quot;); servletRegistrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;123456&quot;); // 是否能够重置数据 servletRegistrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;); return servletRegistrationBean; &#125; /** * 配置服务过滤器 * * @return 返回过滤器配置对象 */ @Bean public FilterRegistrationBean statFilter() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter()); // 添加过滤规则 filterRegistrationBean.addUrlPatterns(&quot;/*&quot;); // 忽略过滤格式 filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*,&quot;); return filterRegistrationBean; &#125;&#125;@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)@Component@Datapublic class DatasourceConf &#123; private String url; private String username; private String password; private String driverClassName; private int initialSize; private int minIdle; private int maxActive; private int maxWait; private int timeBetweenEvictionRunsMillis; private int minEvictableIdleTimeMillis; private String validationQuery; private Boolean testWhileIdle; private Boolean testOnBorrow; private Boolean testOnReturn; private Boolean poolPreparedStatements; private int maxPoolPreparedStatementPerConnectionSize; private String filters; private String connectionProperties; private Boolean useGlobalDataSourceStat;&#125; 重新启动主程序，此时会报一个小错，具体原因是由于druid开启了如下配置，当数据库为h2并且需要执 行新增表操作时，sql统计分析会合并异常，具体看github上面的issue 12# 配置监控统计拦截的filters，去掉后监控界面sql无法统计filters: stat 检查 1.查看h2 ui,是否user表和数据是否写入 http://localhost:1016/h2-console/ 2.查看druid监控页面 http://127.0.0.1:1016/druid/sql.html 集成jooq generate工具 具体教程可见**springboot集成jooq** 扩展 这里和user有一些不同的是，我将h2的数据库类型改成了内存，结果jooq-codegen-maven无法生成 1234567&lt;!-- JDBC connection parameters --&gt;&lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:mem:test&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt;&lt;/jdbc&gt; 需要改成文件类型 1234567&lt;!-- JDBC connection parameters --&gt;&lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:~/testmovie&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt;&lt;/jdbc&gt; 因为h2选择的是内存数据库，不管我是否将h2数据库开启(程序运行或不运行),然后执行jooq generate,都无法生成 如果我将h2类型改为file,那么这个时候不能运行源程序，才能执行jooq generate，否则执行jooq generate的时候会报错数据库使用中 扩展 在maven package时，由于集成了jooq generate工具，会执行一遍，这样如果自己修改了相关类会被还原，所以在打包时希望不执行相关驱动可以加如下配置 放在pom驱动配置的configuration标签内 20181030更新:注意这个标签添加之后，无论编译打包甚至直接运行这个插件都不再生成相关东西，如果你现在需要重新运行一遍，请先提交或者保存你做过的修改，然后注释掉这个，运行完之后再加上，然后再将你做的修改重新添加回来 12&lt;!-- install 跳过 --&gt;&lt;skip&gt;true&lt;/skip&gt; 在打包的过程中，执行了springboot中的一些test，当从consul上远程读取yml配置时爆了如下错，忽略测试打包成功后，启动工程仍然报错，然而idea中自己run的时候却没有报错 对比了相关命令 远程yml配置中含有中文，务必在使用java -Dfile.encoding=UTF-8 -jar .\consul-movie-0.0.1-SNAPSHOT.jar指定utf8编码 不然打包会失败，启动失败，会报上面的错 https://github.com/jOOQ/jOOQ/blob/master/jOOQ-examples/jOOQ-spring-example/pom.xml]]></content>
      <categories>
        <category>java</category>
        <category>微服务</category>
        <category>springcloud</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>jooq</tag>
        <tag>h2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud集成feign]]></title>
    <url>%2Fblog%2F2018%2F10%2F29%2Fspringcloud%E9%9B%86%E6%88%90feign%2F</url>
    <content type="text"><![CDATA[前言 Feign是声明式、模板化的HTTP客户端，可以更加快捷优雅的调用HTTP API。在部分场景下和Ribbon类似，都是进行数据的请求处理，但是在请求参数使用实体类的时候显然更加方便，同时还支持安全性、授权控制等。 Feign是集成了Ribbon的，也就是说如果引入了Feign，那么Ribbon的功能也能使用，比如修改负载均衡策略等。 目的 1.springcloud Finchley.SR2版本 2.springboot 版本2.0.6.RELEASE 以consul为服务发现和配置中心的前提下，集成一个针对**springcloud编写用户微服务**的用户消费服务 正文 初始化工程 方法跟**springcloud集成consul**中前期准备工程一般，勾选下列依赖 如果不是上述方法初始化，添加依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&lt;/dependency&gt; 在resources文件夹下新增bootstrap.yml文件，写入以下内容 123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1020spring: application: #项目名称 name: consul-feign cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: consul-feign #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.150:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 添加controller类和feign接口 这里的user类就是springcloud编写用户微服务中jooq-codegen-maven3.10.8生成的实体对象 所以最好是将这些实体模块化，这样在共同需要的地方引用即可，不用像我这样图简便就直接复制过来 1234567891011121314151617181920@RestController@RequestMapping(&quot;/user&quot;)public class UserController &#123; @Autowired UserFeignClient userFeignClient; @RequestMapping(value = &quot;/getAll&quot;,method = RequestMethod.GET) public List&lt;User&gt; getAll()&#123; return userFeignClient.getAllUser(); &#125;&#125;@FeignClient(name = &quot;consul-user&quot;)public interface UserFeignClient &#123; @RequestMapping(value = &quot;/user/getAll&quot;,method = RequestMethod.GET) List&lt;User&gt; getAllUser();&#125; 20181030更新:get多参数写法 12直接写Long id或者直接是User user这种对象，feign依然会用post方式调用，所以会报错接口不支持需要用@RequestParam(&quot;id&quot;) Long id，或者@RequestParam Map&lt;String,Object&gt; map 最终的工程结构 修改主类 主类上添加@EnableFeignClients注解，否则报错找不到UserFeignClient 集成健康检查和hystrix 添加依赖 1234567891011121314健康检查需加依赖&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;hystrix需加&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;&lt;/dependency&gt; 远程配置添加健康检查详细监控以及支持hystrix 12345678910111213#Actuator的健康检查开启所有包括health，info，metrics等management: endpoints: web: exposure: include: &quot;*&quot; #开启health端点详细检查 endpoint: health: show-details: alwaysfeign: hystrix: enabled: true 修改主类 主类上添加@EnableHystrix注解，否则没有/actuator/hystrix.stream信息，另外上面的配置需要打开，不然没数据]]></content>
      <categories>
        <category>java</category>
        <category>springcloud</category>
        <category>feign</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>feign</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud集成网关ZUUL]]></title>
    <url>%2Fblog%2F2018%2F10%2F29%2Fspringcloud%E9%9B%86%E6%88%90%E7%BD%91%E5%85%B3ZUUL%2F</url>
    <content type="text"><![CDATA[前言 Routing in an integral part of a microservice architecture. For example, / may be mapped to your web application, /api/users is mapped to the user service and /api/shop is mapped to the shop service. Zuul is a JVM based router and server side load balancer by Netflix. 路由在微服务架构的一个组成部分。 例如，/可以映射到您的Web应用程序，/api/users映射到用户服务，并且/api/shop映射到商店服务。 Zuul是Netflix的基于JVM的路由器和服务器端负载均衡器。 其功能包括 12345678910验证见解压力测试金丝雀测试动态路由服务迁移减载安全静态响应处理主动/主动流量管理 Zuul的规则引擎允许规则和过滤器基本上用任何JVM语言编写，内置支持Java和Groovy 目的 1.springcloud Finchley.SR2版本 2.springboot 版本2.0.6.RELEASE 以consul为服务发现和配置中心的前提下，集成一个zuul网关服务 正文 初始化工程 方法跟**springcloud集成consul**中前期准备工程一般，勾选下列依赖 20181029更新:上面不用勾选hystrix,下面也说明了zuul中已经集成了 在resources文件夹下新增bootstrap.yml文件，写入以下内容 123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1050spring: application: #项目名称 name: consul-zuul cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: consul-zuul #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.150:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 在远程配置中心上添加如下配置 123456789101112131415zuul: routes: user: # 可以随便写，在zuul上面唯一即可；当这里的值 = service-id时，service-id可以不写。 path: /api/user/** # 想要映射到的路径 service-id: consul-user # consul中的service-name#Actuator的健康检查开启所有包括health，info，metrics等management: endpoints: web: exposure: include: &quot;*&quot; #开启health端点详细检查 endpoint: health: show-details: always 修改主类，在主类上加上@EnableZuulProxy注解，这样就完成了 扩展 由于zuul已经集成hystrix，所以当打开详细健康检查时可以看到hystrix已经打开 同时查看 http://localhost:1050/actuator/hystrix.stream 注意当没有接口调用时，会显示一直ping,需要调用一个接口，这个页面数据是实时刷新的 参考资料 1.自定义zuul过滤器 2.zuul比较详细的说明 3.springcloud+zuul+hystrix]]></content>
      <categories>
        <category>java</category>
        <category>springcloud</category>
        <category>zuul</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>zuul</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot集成jooq]]></title>
    <url>%2Fblog%2F2018%2F10%2F26%2Fspringboot%E9%9B%86%E6%88%90jooq%2F</url>
    <content type="text"><![CDATA[前言 说明一下springboot2.0.6.RELEASE集成jooq3.10.8以及jooq-codegen-maven3.10.8 目的 简单说明一下jooq的集成和用法 正文 初始化工程 idea初始化工程方法可以参见**springcloud编写用户微服务** h2 以h2为梨子说明一下 添加依赖 123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jooq&lt;/artifactId&gt;&lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 扩展 这种不需要写版本的是因为父工程为springboot或者用下面那种写法 123456789101112131415161718&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;或者&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 添加驱动工具 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;plugin&gt; &lt;!-- Specify the maven code generator plugin --&gt; &lt;!-- Use org.jooq for the Open Source Edition org.jooq.pro for commercial editions, org.jooq.pro-java-6 for commercial editions with Java 6 support, org.jooq.trial for the free trial edition Note: Only the Open Source Edition is hosted on Maven Central. Import the others manually from your distribution --&gt; &lt;groupId&gt;org.jooq&lt;/groupId&gt; &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt; &lt;!-- The plugin should hook into the generate goal --&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;generate&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;!-- Manage the plugin&apos;s dependency. In this example, we&apos;ll use a PostgreSQL database --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;version&gt;1.4.197&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- Specify the plugin configuration. The configuration format is the same as for the standalone code generator --&gt; &lt;configuration&gt; &lt;!-- install 跳过 --&gt; &lt;skip&gt;true&lt;/skip&gt; &lt;!-- JDBC connection parameters --&gt; &lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:~/testuser&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt; &lt;/jdbc&gt; &lt;!-- Generator parameters --&gt; &lt;generator&gt; &lt;database&gt; &lt;name&gt;org.jooq.util.h2.H2Database&lt;/name&gt; &lt;includes&gt;.*&lt;/includes&gt; &lt;excludes&gt;&lt;/excludes&gt; &lt;!-- In case your database supports catalogs, e.g. SQL Server: &lt;inputCatalog&gt;public&lt;/inputCatalog&gt; --&gt; &lt;inputSchema&gt;PUBLIC&lt;/inputSchema&gt; &lt;/database&gt; &lt;generate&gt; &lt;instanceFields&gt;true&lt;/instanceFields&gt; &lt;pojos&gt;true&lt;/pojos&gt; &lt;daos&gt;true&lt;/daos&gt; &lt;springAnnotations&gt;true&lt;/springAnnotations&gt; &lt;/generate&gt; &lt;target&gt; &lt;packageName&gt;com.springcloud.consuluser.dao&lt;/packageName&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;/target&gt; &lt;/generator&gt; &lt;/configuration&gt;&lt;/plugin&gt; 扩展 1.这是以h2作为梨子，如果要用mysql的话差不过需要修改相关位置 2.maven package打包忽略插件 放在pom驱动配置的configuration标签内 20181030更新:注意这个标签添加之后，无论编译打包甚至直接运行这个插件都不再生成相关东西，如果你现在需要重新运行一遍，请先提交或者保存你做过的修改，然后注释掉这个，运行完之后再加上，然后再将你做的修改重新添加回来 12&lt;!-- install 跳过 --&gt;&lt;skip&gt;true&lt;/skip&gt; 3.需要生成相关dao和实体，添加如下配置 123456&lt;generate&gt; &lt;instanceFields&gt;true&lt;/instanceFields&gt; &lt;pojos&gt;true&lt;/pojos&gt; &lt;daos&gt;true&lt;/daos&gt; &lt;springAnnotations&gt;true&lt;/springAnnotations&gt;&lt;/generate&gt; 4.20181030更新:当h2的数据库类型为内存时，结果jooq-codegen-maven无法生成 1234567&lt;!-- JDBC connection parameters --&gt;&lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:mem:test&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt;&lt;/jdbc&gt; 需要改成文件类型 1234567&lt;!-- JDBC connection parameters --&gt;&lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:~/testmovie&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt;&lt;/jdbc&gt; jooq-codegen-maven以上配置生成的目录结构如下 yml配置文件添加相关配置 123456789101112131415161718192021222324252627282930313233343536373839404142spring: datasource: #url: jdbc:h2:mem:test #url: jdbc:h2:file:~/.h2/testdb url: jdbc:h2:~/testuser driverClassName: org.h2.Driver username: sa password: 123456 platform: h2 schema: classpath:db/schema.sql data: classpath:db/data.sql initialization-mode: always #springboot2.0加上上述sql才会执行 # 下面为druid连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 1 minIdle: 3 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 30000 validationQuery: select &apos;x&apos; testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计 filters: stat # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true h2: console: settings: web-allow-others: true #进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。 path: /h2-console #进行该配置，你就可以通过YOUR_URL/h2-console访问h2 web consloe。YOUR_URL是你程序的访问URl。 enabled: true #进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。 扩展 1.上面的配置中添加initialization-mode之后才会初始化schema.sql和data.sql 2.initialization-mode配置之后的是druid的补充配置，需结合java程序手动初始化或者添加spring.datasource.type=com.alibaba.druid.pool.DruidDataSource自动初始化，不过这种初始化之前我的druid监控页面无法打开 3.h2的控制页面配置如上，如果不加无法访问 4.集成druid,详情见**springboot集成druid** 参考资料 java api doc jooq-codegen-maven其他配置 jooq官方example]]></content>
      <categories>
        <category>java</category>
        <category>springboot2</category>
        <category>jooq</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot2</tag>
        <tag>jooq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot集成druid]]></title>
    <url>%2Fblog%2F2018%2F10%2F26%2Fspringboot%E9%9B%86%E6%88%90druid%2F</url>
    <content type="text"><![CDATA[前言 Druid是Java语言中最好的数据库连接池。Druid能够提供强大的监控和扩展功能 目的 springboot2.0.6.RELEASE集成druid1.1.10 正文 添加依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt; 添加配置 123456789101112131415161718192021222324252627282930313233343536spring: datasource: #url: jdbc:h2:mem:test #url: jdbc:h2:file:~/.h2/testdb url: jdbc:h2:~/testuser driverClassName: org.h2.Driver username: sa password: 123456 platform: h2 schema: classpath:db/schema.sql data: classpath:db/data.sql initialization-mode: always #springboot2.0加上上述sql才会执行 # 下面为druid连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 1 minIdle: 3 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 30000 validationQuery: select &apos;x&apos; testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计 filters: stat # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true 初始化datasource 1.添加spring.datasource.type=com.alibaba.druid.pool.DruidDataSource自动初始化，不过这种初始化之前我的druid监控页面无法打开 2.利用java程序手动初始化 在java源码，springboot主程序的所在目录的子目录下，添加如下两个文件DataSourceBean.java和DatasourceConf.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)@Component@Datapublic class DatasourceConf &#123; private String url; private String username; private String password; private String driverClassName; private int initialSize; private int minIdle; private int maxActive; private int maxWait; private int timeBetweenEvictionRunsMillis; private int minEvictableIdleTimeMillis; private String validationQuery; private Boolean testWhileIdle; private Boolean testOnBorrow; private Boolean testOnReturn; private Boolean poolPreparedStatements; private int maxPoolPreparedStatementPerConnectionSize; private String filters; private String connectionProperties; private Boolean useGlobalDataSourceStat;&#125;@Configuration@Component@Datapublic class DataSourceBean &#123; private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceBean.class); @Autowired DatasourceConf datasourceConf; @Bean public DataSource getDataSource() &#123; DruidDataSource datasource = new DruidDataSource(); datasource.setUrl(datasourceConf.getUrl()); datasource.setUsername(datasourceConf.getUsername()); datasource.setPassword(datasourceConf.getPassword()); datasource.setDriverClassName(datasourceConf.getDriverClassName()); //configuration datasource.setInitialSize(datasourceConf.getInitialSize()); datasource.setMinIdle(datasourceConf.getMinIdle()); datasource.setMaxActive(datasourceConf.getMaxActive()); datasource.setMaxWait(datasourceConf.getMaxWait()); datasource.setTimeBetweenEvictionRunsMillis(datasourceConf.getTimeBetweenEvictionRunsMillis()); datasource.setMinEvictableIdleTimeMillis(datasourceConf.getMinEvictableIdleTimeMillis()); datasource.setValidationQuery(datasourceConf.getValidationQuery()); datasource.setTestWhileIdle(datasourceConf.getTestWhileIdle()); datasource.setTestOnBorrow(datasourceConf.getTestOnBorrow()); datasource.setTestOnReturn(datasourceConf.getTestOnReturn()); datasource.setPoolPreparedStatements(datasourceConf.getPoolPreparedStatements()); datasource.setMaxPoolPreparedStatementPerConnectionSize(datasourceConf.getMaxPoolPreparedStatementPerConnectionSize()); datasource.setUseGlobalDataSourceStat(datasourceConf.getUseGlobalDataSourceStat()); try &#123; datasource.setFilters(datasourceConf.getFilters()); &#125; catch (SQLException e) &#123; LOGGER.error(&quot;druid configuration initialization filter: &quot; + e); &#125; datasource.setConnectionProperties(datasourceConf.getConnectionProperties()); return datasource; &#125; /** * 配置监控服务器 * * @return 返回监控注册的servlet对象 */ @Bean public ServletRegistrationBean statViewServlet() &#123; ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;); // 添加IP白名单 servletRegistrationBean.addInitParameter(&quot;allow&quot;, &quot;192.168.14.32,127.0.0.1&quot;); // 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高 servletRegistrationBean.addInitParameter(&quot;deny&quot;, &quot;192.168.14.32&quot;); // 添加控制台管理用户 servletRegistrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;druid&quot;); servletRegistrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;123456&quot;); // 是否能够重置数据 servletRegistrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;); return servletRegistrationBean; &#125; /** * 配置服务过滤器 * * @return 返回过滤器配置对象 */ @Bean public FilterRegistrationBean statFilter() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter()); // 添加过滤规则 filterRegistrationBean.addUrlPatterns(&quot;/*&quot;); // 忽略过滤格式 filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*,&quot;); return filterRegistrationBean; &#125;&#125; 参考资料 Druid 介绍及配置]]></content>
      <categories>
        <category>java</category>
        <category>springboot2</category>
        <category>druid</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot2</tag>
        <tag>druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud编写用户微服务]]></title>
    <url>%2Fblog%2F2018%2F10%2F26%2Fspringcloud%E7%BC%96%E5%86%99%E7%94%A8%E6%88%B7%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[前言 1.springcloud Finchley.SR2版本 2.springboot 版本2.0.6.RELEASE 3.h2 4.jooq 5.consul 搭建一个用户微服务 目的 利用idea快速搭建一个springcloud集成上述功能的微服务，可以查询用户 正文 初始化工程 方法跟**springcloud集成consul**中前期准备工程一般，勾选下列依赖 在resources文件夹下新增bootstrap.yml文件，写入以下内容 123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1016spring: application: #项目名称 name: consul-user cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: consul-user #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.101:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 启动主工程,查看consul ui发现程序正常注册 如果程序未能正常注册，查看程序是否正常启动或者这里的ip需要写成程序所在机器的ip,consul集群所在的机器能够访问 初始化H2数据库 由于已经使用了consul作为配置中心,直接在consul配置界面新增如下配置 启动之后发现datasource循环依赖 这时候决定手动初始化datasource,同时集成第三方数据库连接池进来，详情**springboot集成druid** 此时consul上的配置如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647spring: datasource: url: jdbc:h2:mem:test #内存 #url: jdbc:h2:file:~/.h2/testdb #文件 driverClassName: org.h2.Driver username: sa password: 123456 platform: h2 schema: classpath:db/schema.sql data: classpath:db/data.sql initialization-mode: always #springboot2.0加上上述sql才会执行 # 下面为druid连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 1 minIdle: 3 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 30000 validationQuery: select &apos;x&apos; testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计 filters: stat # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true h2: console: settings: web-allow-others: true #进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。 path: /h2-console #进行该配置，你就可以通过YOUR_URL/h2-console访问h2 web consloe。YOUR_URL是你程序的访问URl。 enabled: true #进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。logging: level: root: INFO org.hibernate: INFO org.hibernate.type.descriptor.sql.BasicBinder: TRACE org.hibernate.type.descriptor.sql.BasicExtractor: TRACE 根据配置在resources目录下，新增db文件夹，下面新增schema.sql和data.sql文件，内容分别如下 12345drop table user if exists;create table user (id bigint generated by default as identity ,username varchar(40),name varchar(20),age int(3),balance decimal(10,2),primary key (id));insert into user (id,username,name,age,balance) values (1,&apos;admin&apos;,&apos;zb&apos;,20,100.00);insert into user (id,username,name,age,balance) values (2,&apos;liuman&apos;,&apos;柳曼&apos;,20,101.00); 在pom中添加依赖druid 12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt; 在主程序平级目录新增db目录，新增DataSourceBean.java和DatasourceConf.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101@Configuration@Component@Datapublic class DataSourceBean &#123; private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceBean.class); @Autowired DatasourceConf datasourceConf; @Bean public DataSource getDataSource() &#123; DruidDataSource datasource = new DruidDataSource(); datasource.setUrl(datasourceConf.getUrl()); datasource.setUsername(datasourceConf.getUsername()); datasource.setPassword(datasourceConf.getPassword()); datasource.setDriverClassName(datasourceConf.getDriverClassName()); //configuration datasource.setInitialSize(datasourceConf.getInitialSize()); datasource.setMinIdle(datasourceConf.getMinIdle()); datasource.setMaxActive(datasourceConf.getMaxActive()); datasource.setMaxWait(datasourceConf.getMaxWait()); datasource.setTimeBetweenEvictionRunsMillis(datasourceConf.getTimeBetweenEvictionRunsMillis()); datasource.setMinEvictableIdleTimeMillis(datasourceConf.getMinEvictableIdleTimeMillis()); datasource.setValidationQuery(datasourceConf.getValidationQuery()); datasource.setTestWhileIdle(datasourceConf.getTestWhileIdle()); datasource.setTestOnBorrow(datasourceConf.getTestOnBorrow()); datasource.setTestOnReturn(datasourceConf.getTestOnReturn()); datasource.setPoolPreparedStatements(datasourceConf.getPoolPreparedStatements()); datasource.setMaxPoolPreparedStatementPerConnectionSize(datasourceConf.getMaxPoolPreparedStatementPerConnectionSize()); datasource.setUseGlobalDataSourceStat(datasourceConf.getUseGlobalDataSourceStat()); try &#123; datasource.setFilters(datasourceConf.getFilters()); &#125; catch (SQLException e) &#123; LOGGER.error(&quot;druid configuration initialization filter: &quot; + e); &#125; datasource.setConnectionProperties(datasourceConf.getConnectionProperties()); return datasource; &#125; /** * 配置监控服务器 * * @return 返回监控注册的servlet对象 */ @Bean public ServletRegistrationBean statViewServlet() &#123; ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;); // 添加IP白名单 servletRegistrationBean.addInitParameter(&quot;allow&quot;, &quot;192.168.14.32,127.0.0.1&quot;); // 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高 servletRegistrationBean.addInitParameter(&quot;deny&quot;, &quot;192.168.14.32&quot;); // 添加控制台管理用户 servletRegistrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;druid&quot;); servletRegistrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;123456&quot;); // 是否能够重置数据 servletRegistrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;); return servletRegistrationBean; &#125; /** * 配置服务过滤器 * * @return 返回过滤器配置对象 */ @Bean public FilterRegistrationBean statFilter() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter()); // 添加过滤规则 filterRegistrationBean.addUrlPatterns(&quot;/*&quot;); // 忽略过滤格式 filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*,&quot;); return filterRegistrationBean; &#125;&#125;@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)@Component@Datapublic class DatasourceConf &#123; private String url; private String username; private String password; private String driverClassName; private int initialSize; private int minIdle; private int maxActive; private int maxWait; private int timeBetweenEvictionRunsMillis; private int minEvictableIdleTimeMillis; private String validationQuery; private Boolean testWhileIdle; private Boolean testOnBorrow; private Boolean testOnReturn; private Boolean poolPreparedStatements; private int maxPoolPreparedStatementPerConnectionSize; private String filters; private String connectionProperties; private Boolean useGlobalDataSourceStat;&#125; 重新启动主程序，此时会报一个小错，具体原因是由于druid开启了如下配置，当数据库为h2并且需要执 行新增表操作时，sql统计分析会合并异常，具体看github上面的issue 12# 配置监控统计拦截的filters，去掉后监控界面sql无法统计filters: stat 检查 1.查看h2 ui,是否user表和数据是否写入 http://localhost:1016/h2-console/ 2.查看druid监控页面 http://127.0.0.1:1016/druid/sql.html 集成jooq generate工具 具体教程可见**springboot集成jooq** 扩展 在maven package时，由于集成了jooq generate工具，会执行一遍，这样如果自己修改了相关类会被还原，所以在打包时希望不执行相关驱动可以加如下配置 放在pom驱动配置的configuration标签内 20181030更新:注意这个标签添加之后，无论编译打包甚至直接运行这个插件都不再生成相关东西，如果你现在需要重新运行一遍，请先提交或者保存你做过的修改，然后注释掉这个，运行完之后再加上，然后再将你做的修改重新添加回来 12&lt;!-- install 跳过 --&gt;&lt;skip&gt;true&lt;/skip&gt; 在打包的过程中，执行了springboot中的一些test，当从consul上远程读取yml配置时爆了如下错，忽略测试打包成功后，启动工程仍然报错，然而idea中自己run的时候却没有报错 对比了相关命令 远程yml配置中含有中文，务必在使用java -Dfile.encoding=UTF-8 -jar .\consul-user-0.0.1-SNAPSHOT.jar指定utf8编码 不然打包会失败，启动失败，会报上面的错 https://github.com/jOOQ/jOOQ/blob/master/jOOQ-examples/jOOQ-spring-example/pom.xml]]></content>
      <categories>
        <category>java</category>
        <category>微服务</category>
        <category>springcloud</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>jooq</tag>
        <tag>h2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud集成consul]]></title>
    <url>%2Fblog%2F2018%2F10%2F23%2Fspringcloud%E9%9B%86%E6%88%90consul%2F</url>
    <content type="text"><![CDATA[前言 1.springcloud Finchley.SR2版本 2.springboot 版本2.0.6.RELEASE 集成consul作为配置中心和服务发现中心，同时开启健康检查 目的 利用idea快速搭建一个springcloud集成上述功能的微服务 正文 利用idea新建工程 新建springboot maven工程 设置项目信息 勾选自动配置 勾选consul配置中心 勾选consul服务发现中心 完成 新建bootstrap.yml文件,添加如下内容，并启动主程序 123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1015spring: application: #项目名称 name: springcloud-consul cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: springcloud-consul #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.101:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 启动主程序,发现报错 添加依赖 1234 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 重新启动正常 访问健康检查端点 http://ip:port/actuator/health 在consul ui上查看 访问consul ui http://localhost:18500/ consul 作为配置中心 访问consul ui 添加配置信息 12app: port: 3232 新增conf目录，新增如下代码 12345678910111213141516@Component@ConfigurationProperties(prefix = &quot;app&quot;)@Datapublic class AppConf &#123; private static final Logger LOGGER = LoggerFactory.getLogger(AppConf.class); private int port; @PostConstruct public void printConf()&#123; LOGGER.info(&quot;加载配置port:[&#123;&#125;]&quot;,port); &#125;&#125; 重新启动主程序 附加 工程pom 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.springcloud&lt;/groupId&gt; &lt;artifactId&gt;consul1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;consul1&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Finchley.SR2&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 参考资料 springcloud-consul中文文档]]></content>
      <categories>
        <category>java</category>
        <category>微服务</category>
        <category>springcloud</category>
        <category>consul</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>consul</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows上安装docker-ce]]></title>
    <url>%2Fblog%2F2018%2F10%2F21%2Fwindows%E4%B8%8A%E5%AE%89%E8%A3%85docker-ce%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>windows</category>
        <category>docker</category>
        <category>安装</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>安装</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-compose搭建consul集群]]></title>
    <url>%2Fblog%2F2018%2F10%2F21%2Fdocker-compose%E6%90%AD%E5%BB%BAconsul%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>docker-compose</category>
        <category>consul集群</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>consul集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot+Aop+自定义注解实现日志记录]]></title>
    <url>%2Fblog%2F2018%2F10%2F21%2Fspringboot-Aop-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[前言 AOP（Aspect Orient Programming），也就是面向方面编程，作为面向对象编程的一种补充，专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题，在Java EE应用中，常常通过AOP来处理一些具有横切性质的系统级服务，如事务管理、安全检查、缓存、对象池管理等。AOP实现的关键就在于AOP框架自动创建的AOP代理，AOP代理主要分为静态代理和动态代理两大类，静态代理以AspectJ为代表；而动态代理则以Spring AOP为代表 目的 简单说明一下AspectJ，另外实现一个springboot+Aop+自定义注解实现日志记录的梨子 正文 AspectJ AspectJ 是一个基于 Java 语言的 AOP 框架，提供了强大的 AOP 功能，其他很多 AOP 框架都借鉴或采纳其中的一些思想。 AspectJ 是 Java 语言的一个 AOP 实现，其主要包括两个部分：第一个部分定义了如何表达、定义 AOP 编程中的语法规范，通过这套语言规范，我们可以方便地用 AOP 来解决 Java 语言中存在的交叉关注点问题；另一个部分是工具部分，包括编译器、调试工具等。 AspectJ 是编译期增强的框架，需要遵从相关语法然后用他的工具编译织入 springboot aop 添加依赖 123456789101112&lt;!-- AOP依赖模块 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- 测试 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667自定义注解@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface AnalysisActuator &#123; String note() default &quot;&quot;;&#125;定义切面@Aspect@Componentpublic class AnalysisActuatorAspect &#123; final static Logger log = LoggerFactory.getLogger(AnalysisActuatorAspect.class); ThreadLocal&lt;Long&gt; beginTime = new ThreadLocal&lt;&gt;(); @Pointcut(&quot;@annotation(analysisActuator)&quot;) public void serviceStatistics(AnalysisActuator analysisActuator) &#123; &#125; @Before(&quot;serviceStatistics(analysisActuator)&quot;) public void doBefore(JoinPoint joinPoint, AnalysisActuator analysisActuator) &#123; // 记录请求到达时间 beginTime.set(System.currentTimeMillis()); &#125; @After(&quot;serviceStatistics(analysisActuator)&quot;) public void doAfter(AnalysisActuator analysisActuator) &#123; log.info(&quot;statistic time:&#123;&#125;, note:&#123;&#125;&quot;, System.currentTimeMillis() - beginTime.get(), analysisActuator.note()); &#125;&#125;服务改写@Servicepublic class PersonServiceForAopImpl implements PersonService &#123; @AnalysisActuator(note = &quot;[PersonServiceForAopImpl]插入&quot;) @Override public int insert(Object obj) &#123; System.out.println(&quot;成功插入一个person&quot;); return 1; &#125; @AnalysisActuator(note = &quot;[PersonServiceForAopImpl]更新&quot;) @Override public int update(Object obj) &#123; System.out.println(&quot;成功更新一个person&quot;); return 1; &#125;&#125;测试服务@RunWith(SpringRunner.class)@SpringBootTestpublic class TestPersonServiceForAopImpl &#123; @Qualifier(&quot;personServiceForAopImpl&quot;) @Autowired PersonService personService; @Test public void testInsert()&#123; personService.insert(new Object()); &#125;&#125; 执行结果 参考资料 1.Spring AOP实现原理与CGLIB应用 2.使用Spring Boot的AOP处理自定义注解]]></content>
      <categories>
        <category>java</category>
        <category>springboot</category>
        <category>aop</category>
        <category>注解</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>aop</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CGLib代理]]></title>
    <url>%2Fblog%2F2018%2F10%2F21%2FCGLib%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言 **java动态代理**这篇博客介绍了java的动态代理，那么这里同样不得不介绍一下CGLib代理。JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理.cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理 目的 简单介绍一下cglib的代理应用 正文 同样用java动态代理的那个梨子 cglib代理 添加依赖 12345&lt;dependency&gt; &lt;groupId&gt;cglib&lt;/groupId&gt; &lt;artifactId&gt;cglib&lt;/artifactId&gt; &lt;version&gt;3.2.4&lt;/version&gt;&lt;/dependency&gt; 12345678910111213141516171819202122232425262728293031public class CglibProxyInterceptor implements MethodInterceptor &#123; //通过Enhancer 创建代理对象 private Enhancer enhancer = new Enhancer(); //通过Class对象获取代理对象 public &lt;T&gt; T getProxy(Class c)&#123; //设置创建子类的类 enhancer.setSuperclass(c); enhancer.setCallback(this); return (T)enhancer.create(); &#125; @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123; System.out.println(&quot;CglibProxyInterceptor 代理方法&quot;); return methodProxy.invokeSuper(o,objects); &#125; public static void main(String[] args) &#123; //原来的调用方式 PersonService personService = new PersonServiceImpl(); personService.insert(new Object()); personService.update(new Object()); System.out.println(&quot;**********************&quot;); CglibProxyInterceptor proxy = new CglibProxyInterceptor(); PersonService personServiceProxy = proxy.getProxy(PersonServiceImpl.class); personServiceProxy.insert(new Object()); personServiceProxy.update(new Object()); &#125;&#125; 执行结果 与java动态代理相比 123456相同点: 1.两个都新增了一个代理类，代理的类限制不大,扩展性很高 2.两种方式都不需要修改接口类以及实现类，只需要修改调用的地方即可，利用代理类调用不同点: 1.jdk动态代理需要对接口代理，cglib对非final修辞的类都可以代理 2.cglib是第三方包,需要添加依赖]]></content>
      <categories>
        <category>java</category>
        <category>CGLib</category>
        <category>代理</category>
      </categories>
      <tags>
        <tag>CGLib</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java动态代理]]></title>
    <url>%2Fblog%2F2018%2F10%2F21%2Fjava%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言 **java反射基础用法**这边博客讲解了java反射的一些基础用法，那么动态代理就是利用反射实现的一个高级用法 目的 简单介绍一下动态代理的用法，JDK提供的代理只能针对接口做代理,我们有更强大的代理**CGLib代理** 正文 假设有个personservice服务类接口以及实现类，现如今需要在尽可能少量修改代码的前提下，让原来的方法增加一些其他方法 1234567891011121314151617181920212223public interface PersonService &#123; //插入一个person int insert(Object obj); //更新一个person int update(Object obj);&#125;public class PersonServiceImpl implements PersonService &#123; @Override public int insert(Object obj) &#123; System.out.println(&quot;成功插入一个person&quot;); return 1; &#125; @Override public int update(Object obj) &#123; System.out.println(&quot;成功更新一个person&quot;); return 1; &#125;&#125; 静态代理 123456789101112131415161718192021222324252627282930313233public class SimplePersonServiceProxy implements PersonService&#123; //被代理接口类 private PersonService personService; public SimplePersonServiceProxy(PersonService personService) &#123; this.personService = personService; &#125; @Override public int insert(Object obj) &#123; System.out.println(&quot;SimplePersonServiceProxy 插入静态代理方法&quot;); return personService.insert(obj); &#125; @Override public int update(Object obj) &#123; System.out.println(&quot;SimplePersonServiceProxy 更新静态代理方法&quot;); return personService.update(obj); &#125; public static void main(String[] args) &#123; //原来的调用方式 PersonService personService = new PersonServiceImpl(); personService.insert(new Object()); personService.update(new Object()); System.out.println(&quot;**********************&quot;); //增加功能的调用方法，原来的PersonService和PersonServiceImpl代码都不需要变 PersonService proxy = new SimplePersonServiceProxy(new PersonServiceImpl()); proxy.insert(new Object()); proxy.update(new Object()); &#125;&#125; 执行结果: 动态代理 12345678910111213141516171819202122232425262728public class DynamicProxyHandler implements InvocationHandler &#123; //被代理对象，这里跟静态代理对比，这里的代码扩展性更高，可以是任何对象 private Object object; public DynamicProxyHandler(Object object) &#123; this.object = object; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(&quot;DynamicProxyHandler java动态代理方法&quot;); return method.invoke(object,args); &#125; public static void main(String[] args) &#123; //原来的调用方式 PersonService personService = new PersonServiceImpl(); personService.insert(new Object()); personService.update(new Object()); System.out.println(&quot;**********************&quot;); //增加功能的调用方法，原来的PersonService和PersonServiceImpl代码都不需要变 PersonService proxy = (PersonService) Proxy.newProxyInstance(PersonService.class.getClassLoader(),new Class[]&#123;PersonService.class&#125;,new DynamicProxyHandler(new PersonServiceImpl())); proxy.insert(new Object()); proxy.update(new Object()); &#125;&#125; 执行结果: 对比两种方式，我们可以得出结论 123456789相同点: 1.两个都新增了一个代理类，并且属性都是代理类，只不过静态代理的属性限制的更大，必须是 代理接口类 2.两种方式都不需要修改接口类以及实现类，只需要修改调用的地方即可，利用代理类调用不同点 1.静态代理需要实现代理接口，并且属性为代理类接口，这说明每个接口都需要实现一个静态代 理类，扩展性不高，正因为如此，其每个代理的类中的方法可以各自写相关的代理方法 2.动态代理类由于其属性为Object,所以可以代理任何接口,扩展性高，不过由于每个方法执行 前的代理方法都是一样的，所以更适合做一些通用的代理]]></content>
      <categories>
        <category>java</category>
        <category>动态代理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java反射基础用法]]></title>
    <url>%2Fblog%2F2018%2F10%2F15%2Fjava%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前言 Java让我们在运行时识别对象和类的信息，主要有2种方式: 12传统的RTTI，它假定我们在编译时已经知道了所有的类型信息;反射机制，它允许我们在运行时发现和使用类的信息; 目的 简单介绍一下反射的机制和应用. 正文 class对象 class对象包含了与类有关的信息,是用来创建所有“常规”对象的.每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类.Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的 扩展 1234567891011121314151617181920212223242526272829303132public class TestClass &#123; public static void main(String[] args) &#123; //静态内部类-静态属性 System.out.println(InnerClass.staticName); System.out.println(&quot;**************************&quot;); //静态内部类-普通属性 InnerClass in = new InnerClass(); System.out.println(in.name); System.out.println(&quot;**************************&quot;); //外部类-普通属性 System.out.println(new OutterClass().outterName); System.out.println(&quot;**************************&quot;); //外部类-静态属性 System.out.println(OutterClass.outterStaticName); &#125; static class InnerClass &#123; public static String staticName = &quot;innerStaticName&quot;; public String name = &quot;innerName&quot;; static &#123; System.out.println(&quot;静态内部类静态块&quot;); &#125; public InnerClass() &#123; System.out.println(&quot;静态内部类已经构造好了&quot;); &#125; &#125;&#125; 上面代码运行的结果: 结论: 说明当第一次引用一个类的静态属性时，该类会加载到jvm中并调用静态块初始化类时会调用相应构造方法，由于该类已经加载到jvm中，所以不会调用静态块第三点同时印证了第二点，第一次初始化某个类时，该类加载到jvm中，首先调用静态块方法，然后调用相应构造方法第四点印证第二点 获取class对象引用的两种方式及区别 12使用功能”.class”来创建Class对象的引用使用功能Class.forName(“xxx”) 区别: 想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤: 123加载：由类加载器完成，找到对应的字节码，创建一个Class对象链接：验证类中的字节码，为静态域分配空间初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 扩展 1234567891011121314151617181920212223242526272829303132333435363738394041public class BaseMain &#123; public static void main(String[] args) throws Exception &#123; //通过obj.class获取class对象的引用 Class clz1 = StaticBase.class; System.out.println(&quot;*********************&quot;); //通过Class.获取class对象的引用--静态内部类 Class clz2 = Class.forName(&quot;com.example.demo.java.reflect.BaseMain$StaticBase&quot;); //通过Class.获取class对象的引用--普通内部类 Class clz3 = Class.forName(&quot;com.example.demo.java.reflect.BaseMain$Base&quot;); System.out.println(&quot;*********************&quot;); //内部类的构造方法获取 clz3也可以换成Base.class Constructor con3 = clz3.getDeclaredConstructor(BaseMain.class); //私有构造需要设置 con3.setAccessible(true); Object obj3 = con3.newInstance(BaseMain.class.newInstance()); &#125; static class StaticBase &#123; static int num = 1; static &#123; System.out.println(&quot;StaticBase 静态块:num = &quot; + num); &#125; &#125; public class BaseParent&#123; public BaseParent() &#123; System.out.println(&quot;父类被构造了&quot;); &#125; &#125; private class Base extends BaseParent&#123; int num = 2; private Base() &#123; System.out.println(&quot;普通内部类被构造了:num = &quot; + num); &#125; &#125;&#125; 执行结果: 结论 123obj.class确实不会初始化类Class.forName会调用静态块初始化子类构造先初始化父类构造 反射获取私有属性和方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class ReflectDemo &#123; public static void main(String[] args) throws Exception &#123; OutterClass out = new OutterClass(); System.out.println(&quot;***************&quot;); getAllFields(out); System.out.println(&quot;***************&quot;); getAllMethods(out); &#125; /** * 获取一个对象的所有属性 * @param obj */ public static void getAllFields (Object obj) throws Exception&#123; //获取该类包括父类的属性，未注释的表示只有该类的 //Field[] fields = obj.getClass().getFields(); Field[] fields = obj.getClass().getDeclaredFields(); for(Field f : fields)&#123; f.setAccessible(true); System.out.println(&quot;属性-值:&quot;+f.getName()+&quot;-&quot;+f.get(obj)); &#125; &#125; public static void getAllMethods (Object obj) throws Exception &#123; //获取该类包括父类的属性，未注释的表示只有该类的 //Method[] methods = obj.getClass().getMethods(); Method[] methods = obj.getClass().getDeclaredMethods(); for(Method m : methods)&#123; m.setAccessible(true); System.out.println(m+&quot;\n参数个数:&quot;+m.getParameterCount()); switch (m.getParameterCount())&#123; case 0: m.invoke(obj); break; case 1: m.invoke(obj,&quot;hello&quot;); break; default: System.out.println(&quot;参数个数大于1&quot;); &#125; &#125; &#125;&#125; 执行结果:]]></content>
      <categories>
        <category>java</category>
        <category>语法</category>
        <category>反射</category>
      </categories>
      <tags>
        <tag>java语法</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[okhttp3链式调用]]></title>
    <url>%2Fblog%2F2018%2F10%2F13%2Fokhttp3%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言 HTTP是现代应用常用的一种交换数据和媒体的网络方式，高效地使用HTTP能让资源加载更快，节省带宽。OkHttp是一个高效的HTTP客户端，它有以下默认特性： 1234支持HTTP/2，允许所有同一个主机地址的请求共享同一个socket连接连接池减少请求延时透明的GZIP压缩减少响应数据的大小缓存响应内容，避免一些完全重复的请求 目的 介绍一些okhttp3的基本用法 正文 获取OkHttpClient客户端 12345678//简单获取OkHttpClient client = new OkHttpClient();//设置超时时间private static final OkHttpClient client = new OkHttpClient.Builder() .connectTimeout(10, TimeUnit.SECONDS) .readTimeout(20, TimeUnit.SECONDS) .build(); get请求 普通get请求 1234567891011121314String url = &quot;https://www.baidu.com/&quot;;OkHttpClient okHttpClient = new OkHttpClient();Request request = new Request.Builder() .url(url) .build();Call call = okHttpClient.newCall(request);try &#123; Response response = call.execute(); if (response.isSuccessful()) &#123; System.out.println(response.body().string()); &#125;&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 设置header参数 可以设置例如Cookie，User-Agent什么的 123456Request request = new Request.Builder() .url(url) .header(&quot;键&quot;, &quot;值&quot;) .header(&quot;键&quot;, &quot;值&quot;) ... .build(); post请求 普通的表单提交 1234567891011121314151617181920String url = &quot;https://www.baidu.com/&quot;;OkHttpClient okHttpClient = new OkHttpClient();RequestBody body = new FormBody.Builder() .add(&quot;键&quot;, &quot;值&quot;) .add(&quot;键&quot;, &quot;值&quot;) .build();Request request = new Request.Builder() .url(url) .post(body) .build();Call call = okHttpClient.newCall(request);try &#123; Response response = call.execute(); System.out.println(response.body().string());&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 参考资料 OkHttp3的基本用法 简书 许宏川]]></content>
      <categories>
        <category>java</category>
        <category>http调用客户端</category>
      </categories>
      <tags>
        <tag>http调用客户端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xxl-job-V1.9.1实现jobapi远程调用]]></title>
    <url>%2Fblog%2F2018%2F10%2F12%2Fxxl-job-V1-9-1%E5%AE%9E%E7%8E%B0jobapi%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言 **xxl-job**是一个非常好用的分布式java任务调度框架,目前实际应用中框架建议我们在其管理页面手动新增调度 任务,但是由于一些情况,我们更加希望能够通过代码动态添加job,官方在job-core中提供了相关api,位置:com.xxl.job.core.biz.AdminBiz.java但是提供的功能有限,无法满足我们的需求,但是根据后面官方的说法，可以通过修改xxl-jobadmin的源码,实现其部分接口可以绕过登陆来远程调用 目的 通过修改xxl-jobadmin的源码,实现其部分接口可以绕过登陆来远程调用: 1234567任务列表查询任务新增任务更新任务删除任务暂停任务恢复任务触发 正文 下载xxl-job-v1.9.1的源码 xxl-job-v1.9.1 下载地址 目前我们用的是v1.9.1的,此版本适合这种方式，如果是后续版本建议看一下官方文档，没准官方给出了更合适的方法 修改源码重新打包 准确修改位置为com.xxl.job.admin.controller.JobInfoController中的接口方法上加上@PermessionLimit(limit = false) 测试 通过postman调用接口,一个是未修改源码的,请求被登陆拦截 修改源码后，调用后通过json方式返回 参考资料 1.官方针对远程调用的方法解决]]></content>
      <categories>
        <category>java</category>
        <category>分布式</category>
        <category>任务调度框架</category>
      </categories>
      <tags>
        <tag>xxl-job</tag>
        <tag>分布式java调度框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux上安装docker-compose]]></title>
    <url>%2Fblog%2F2018%2F09%2F10%2Flinux%E4%B8%8A%E5%AE%89%E8%A3%85docker-compose%2F</url>
    <content type="text"><![CDATA[前言 linux上安装docker-compose,为了在安装了docker的机器上更加方便的编排容器 目的 利用docker-compose快速编排docker容器 正文 wget 1wget https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64 如果wget没有安装,利用下面命令安装 1yum install wget 另外如果wget下载不下来,因为直接从github上下载,国内可能网速并不理想 docker-compose v1.22.0 下载 提取码:ixnx mv并设置环境变量 1234567891011mv docker-compose-Linux-x86_64 docker-composemkdir -p /apps/softs/docker_compose/cd /apps/softs/docker_compose/cp /dev/zkandkafka/docker-compose /apps/softs/docker_compose/chmod +x docker-compose修改环境变量vi /etc/profileDOCKER_COMPOSE_HOME=/apps/softs/docker_compose/PATH=$PATH:$DOCKER_COMPOSE_HOMEexport PATHsource /etc/profile 验证 1docker-compose -v 其他 docker-compose版本]]></content>
      <categories>
        <category>docker-compose</category>
        <category>docker服务编排工具</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>docker服务编排工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java程序打成docker镜像]]></title>
    <url>%2Fblog%2F2018%2F08%2F25%2Fjava%E7%A8%8B%E5%BA%8F%E6%89%93%E6%88%90docker%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[前言 本片教程适合idea+java+maven的环境,另外需要有docker环境,如果windows上没有，可以将程序拷贝到linux上有docker的环境上执行相关操作 docker环境安装教程[] 目的 将java程序打进docker镜像中,方便docker方式部署 正文 mavne添加以下依赖并执行生成Dockerfile 在pom文件的bulid中添加如下驱动 123456789101112131415161718192021&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;api&lt;/imageName&gt; &lt;baseImage&gt;java&lt;/baseImage&gt; &lt;maintainer&gt;test@email.com&lt;/maintainer&gt; &lt;workdir&gt;/ROOT&lt;/workdir&gt; &lt;cmd&gt;["java", "-version"]&lt;/cmd&gt; &lt;entryPoint&gt;["java", "-jar", "$&#123;project.build.finalName&#125;.jar"]&lt;/entryPoint&gt; &lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/ROOT&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt;&lt;/plugin&gt; 执行docker_build之后会自动生成Dockerfile,如果你的windows上有docker,会生成镜像,由于我的机器上没有，因为新版的docker安装到window上有 系统限制，详情查看这篇博客[] Dockerfile内容如下 123456FROM javaMAINTAINER test@email.comWORKDIR /ROOTADD /ROOT/xxx.jar /ROOT/ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;xxx.jar&quot;]CMD [&quot;java&quot;, &quot;-version&quot;] 转移到linux上有docker环境的机器上开始build 修改一下Dockerfile,将配置文件也打入进去,上面驱动也可以改造成通过Dockerfile打包,而不是写到pom中 1234567FROM javaMAINTAINER test@email.comWORKDIR /ROOTADD ./xxx.jar /ROOT/ADD ./conf /ROOT/ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;xxx.jar&quot;]CMD [&quot;java&quot;, &quot;-version&quot;] linux上目录结构如下 执行build指令 1docker build -t job:0814 . 终端打印成功截图 docker images验证截图]]></content>
      <categories>
        <category>java</category>
        <category>Dockerfile</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>镜像</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker镜像迁移]]></title>
    <url>%2Fblog%2F2018%2F08%2F24%2Fdocker%E9%95%9C%E5%83%8F%E8%BF%81%E7%A7%BB%2F</url>
    <content type="text"><![CDATA[前言 一般正规的做法应该是将自己做好的镜像push到远程仓库去,然后需要的时候从远处仓库拉取.由于目前我还没有建立私有远程仓库 所以这篇博客主要是讲手动导出镜像的方法 目的 手动导出镜像以便于在其他地方使用 正文 查看镜像列表 1docker images save导出镜像 指令: docker save repository:tag &gt; 自定义导出名字.tar 推荐 或者 docker save image_id &gt; 自定义导出名字.tar 1docker save webapi:0814 &gt; webapi0814.tar 截图: load导入镜像 1docker load -qi webapi0814.tar 截图: 验证: docker images 查看一下导入情况,这里说明一下,如果之前指令是通过save imageid导出的镜像的话,这里导入的时候仓库和标签名可能为空,推荐save repository:tag导出]]></content>
      <categories>
        <category>docker</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>镜像</tag>
        <tag>迁移</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker离线安装包准备]]></title>
    <url>%2Fblog%2F2018%2F08%2F23%2Fdocker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85%E5%87%86%E5%A4%87%2F</url>
    <content type="text"><![CDATA[前言 在一台有网络的centos上准备docker-ce.18离线安装包,然后可以根据**docker离线安装**这篇博客离线安装docker 下面的操作都是在有网络的centos7上进行操作的 目的 为离线安装docker提供相关依赖和程序包 正文 建立本地文件夹 1mkdir -p /apps/docker/packages 修改yum源镜像地址 先看一下有没有wget ,没有先装一下，在备份 1yum install wget 备份原来的repo 123cd /etc/yum.repos.d/mkdir backupmv ./CentOS-* ./backup/ 下载阿里的镜像源并应用 123wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repoyum clean allyum makecache 截图: 下载createrepo软件包及其依赖 1repotrack -a x86_64 -p /apps/docker/packages createrepo 如果上诉指令不存在,先安装yum-utils 1yum install -y yum-utils 截图: 再次执行repotrack上面那个指令,开始下载依赖包 截图: 下载libgudev1和systemd-sysv，是因为centos7.2的libgudev1和systemd-sysv依赖systemd-219-19.el7.x86_64， 而docker-ce需要systemd-219-30el7.x86_64.下载 libgudev1和systemd-sysv软件包机器依赖 12repotrack -a x86_64 -p /apps/docker/packages libgudev1repotrack -a x86_64 -p /apps/docker/packages systemd-sysv 下载docker-ce及依赖 由于你的yum远程仓库可能没有docker-ce的相关依赖,建议之前先执行下面的命令添加阿里的docker仓库镜像 1yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 然后下载docker-ce相关依赖 1repotrack -a x86_64 -p /apps/docker/packages docker-ce 压缩下载 执行下面的命令,将在/apps/docker目录下生成一个docker-ce-18-offline-yum.tgz的包,这个包通过xftp下载后可以在其他地方离线安装docker 只要离线的电脑上有yum命令并且是centos7以上的系统 12cd /apps/dockertar -zcvf docker-ce-18-offline-yum.tgz /apps/docker/packages]]></content>
      <categories>
        <category>docker</category>
        <category>离线</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>离线</tag>
        <tag>安装包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo在多台电脑之间迁移写作]]></title>
    <url>%2Fblog%2F2018%2F08%2F21%2Fhexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E4%B9%8B%E9%97%B4%E8%BF%81%E7%A7%BB%E5%86%99%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>博客</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>迁移</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker离线安装]]></title>
    <url>%2Fblog%2F2018%2F08%2F21%2Fdocker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>docker</category>
        <category>离线</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>离线</tag>
        <tag>安装</tag>
      </tags>
  </entry>
</search>
